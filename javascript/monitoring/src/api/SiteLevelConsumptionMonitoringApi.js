/**
 * The Enphase Monitoring API
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClientError from '../model/ClientError';
import GetSystemBatteryLifetimeResponse from '../model/GetSystemBatteryLifetimeResponse';
import GetSystemBatteryTelemetryResponse from '../model/GetSystemBatteryTelemetryResponse';
import GetSystemConsumptionLifetimeResponse from '../model/GetSystemConsumptionLifetimeResponse';
import GetSystemConsumptionMeterTelemetryResponse from '../model/GetSystemConsumptionMeterTelemetryResponse';
import GetSystemEnergyExportLifetimeResponse from '../model/GetSystemEnergyExportLifetimeResponse';
import GetSystemEnergyExportTelemetryResponse from '../model/GetSystemEnergyExportTelemetryResponse';
import GetSystemEnergyImportLifetimeResponse from '../model/GetSystemEnergyImportLifetimeResponse';
import GetSystemEnergyImportTelemetryResponse from '../model/GetSystemEnergyImportTelemetryResponse';
import GetSystems500Response from '../model/GetSystems500Response';
import MethodNotAllowedError from '../model/MethodNotAllowedError';
import NotImplementedError from '../model/NotImplementedError';
import TelemetryGranularityEnum from '../model/TelemetryGranularityEnum';
import TooManyRequestsError from '../model/TooManyRequestsError';

/**
* SiteLevelConsumptionMonitoring service.
* @module api/SiteLevelConsumptionMonitoringApi
* @version 4.0
*/
export default class SiteLevelConsumptionMonitoringApi {

    /**
    * Constructs a new SiteLevelConsumptionMonitoringApi. 
    * @alias module:api/SiteLevelConsumptionMonitoringApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * battery_lifetime
     * Returns a daily time series of energy charged into the batteries and energy discharged from the batteries for a system over its lifetime. All measurements are in Watt hours. The time series includes one entry for each day from the start_date to the end_date with no gaps in the time series. If the response includes trailing zeroes, such as [909, 4970, 0, 0, 0], then no energy has been charged/discharged for the last days in the series.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {Object} opts Optional parameters
     * @param {Date} [startDate] Requested start date of the time series data. Defaults to the system's operational date. If the start_date is earlier than the system's operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format.
     * @param {Date} [endDate] End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSystemBatteryLifetimeResponse} and HTTP response
     */
    getSystemBatteryLifetimeWithHttpInfo(systemId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling getSystemBatteryLifetime");
      }

      let pathParams = {
        'system_id': systemId
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSystemBatteryLifetimeResponse;
      return this.apiClient.callApi(
        '/systems/{system_id}/battery_lifetime', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * battery_lifetime
     * Returns a daily time series of energy charged into the batteries and energy discharged from the batteries for a system over its lifetime. All measurements are in Watt hours. The time series includes one entry for each day from the start_date to the end_date with no gaps in the time series. If the response includes trailing zeroes, such as [909, 4970, 0, 0, 0], then no energy has been charged/discharged for the last days in the series.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate Requested start date of the time series data. Defaults to the system's operational date. If the start_date is earlier than the system's operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format.
     * @param {Date} opts.endDate End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSystemBatteryLifetimeResponse}
     */
    getSystemBatteryLifetime(systemId, opts) {
      return this.getSystemBatteryLifetimeWithHttpInfo(systemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves telemetry for all batteries for a system
     * Retrieves telemetry for all the batteries of a system. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system's first reported date, then midnight of the system's first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt] Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response.
     * @param {module:model/TelemetryGranularityEnum} [granularity] Granularity of the telemetry data. Default is 'day'.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSystemBatteryTelemetryResponse} and HTTP response
     */
    getSystemBatteryTelemetryWithHttpInfo(systemId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling getSystemBatteryTelemetry");
      }

      let pathParams = {
        'system_id': systemId
      };
      let queryParams = {
        'start_at': opts['startAt'],
        'granularity': opts['granularity']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSystemBatteryTelemetryResponse;
      return this.apiClient.callApi(
        '/systems/{system_id}/telemetry/battery', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves telemetry for all batteries for a system
     * Retrieves telemetry for all the batteries of a system. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system's first reported date, then midnight of the system's first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startAt Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response.
     * @param {module:model/TelemetryGranularityEnum} opts.granularity Granularity of the telemetry data. Default is 'day'.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSystemBatteryTelemetryResponse}
     */
    getSystemBatteryTelemetry(systemId, opts) {
      return this.getSystemBatteryTelemetryWithHttpInfo(systemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * consumption_lifetime
     * Returns a daily time series of energy consumption as measured by the consumption meter installed on the specified system. All measurements are in Watt hours. The time series includes one entry for each day from the start_date to the end_date. There are no gaps in the time series. If the response includes trailing zeroes, such as [909, 4970, 0, 0, 0], then no data has been reported for the last three days.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {Object} opts Optional parameters
     * @param {Date} [startDate] Requested start date of the time series data. Defaults to the system's operational date. If the start_date is earlier than the system's operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format.
     * @param {Date} [endDate] End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSystemConsumptionLifetimeResponse} and HTTP response
     */
    getSystemConsumptionLifetimeWithHttpInfo(systemId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling getSystemConsumptionLifetime");
      }

      let pathParams = {
        'system_id': systemId
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSystemConsumptionLifetimeResponse;
      return this.apiClient.callApi(
        '/systems/{system_id}/consumption_lifetime', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * consumption_lifetime
     * Returns a daily time series of energy consumption as measured by the consumption meter installed on the specified system. All measurements are in Watt hours. The time series includes one entry for each day from the start_date to the end_date. There are no gaps in the time series. If the response includes trailing zeroes, such as [909, 4970, 0, 0, 0], then no data has been reported for the last three days.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate Requested start date of the time series data. Defaults to the system's operational date. If the start_date is earlier than the system's operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format.
     * @param {Date} opts.endDate End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSystemConsumptionLifetimeResponse}
     */
    getSystemConsumptionLifetime(systemId, opts) {
      return this.getSystemConsumptionLifetimeWithHttpInfo(systemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves telemetry for all consumption meters for a system
     * Retrieves telemetry for all the consumption meters of a system. If the start_at specified is earlier than the system's first reported date, then midnight of the system's first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt] Requested start time for telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system's first reported date, then the system first reported date is considered as start_at. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response.
     * @param {module:model/TelemetryGranularityEnum} [granularity] Granularity of the telemetry data. Default is 'day'.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSystemConsumptionMeterTelemetryResponse} and HTTP response
     */
    getSystemConsumptionMeterTelemetryWithHttpInfo(systemId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling getSystemConsumptionMeterTelemetry");
      }

      let pathParams = {
        'system_id': systemId
      };
      let queryParams = {
        'start_at': opts['startAt'],
        'granularity': opts['granularity']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSystemConsumptionMeterTelemetryResponse;
      return this.apiClient.callApi(
        '/systems/{system_id}/telemetry/consumption_meter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves telemetry for all consumption meters for a system
     * Retrieves telemetry for all the consumption meters of a system. If the start_at specified is earlier than the system's first reported date, then midnight of the system's first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startAt Requested start time for telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system's first reported date, then the system first reported date is considered as start_at. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response.
     * @param {module:model/TelemetryGranularityEnum} opts.granularity Granularity of the telemetry data. Default is 'day'.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSystemConsumptionMeterTelemetryResponse}
     */
    getSystemConsumptionMeterTelemetry(systemId, opts) {
      return this.getSystemConsumptionMeterTelemetryWithHttpInfo(systemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * export_lifetime
     * Returns a daily time series of energy exported to the grid by the system over its lifetime. All measurements are in Watt-hours. The time series includes one entry for each day from the start_date to the end_date with no gaps in the time series. If the response contains trailing zeroes, such as [909, 4970, 0, 0, 0], then no energy has been exported for the last days in the series.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {Object} opts Optional parameters
     * @param {Date} [startDate] Requested start date of the time series data. Defaults to the system's operational date. If the start_date is earlier than the system's operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format.
     * @param {Date} [endDate] End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSystemEnergyExportLifetimeResponse} and HTTP response
     */
    getSystemEnergyExportLifetimeWithHttpInfo(systemId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling getSystemEnergyExportLifetime");
      }

      let pathParams = {
        'system_id': systemId
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSystemEnergyExportLifetimeResponse;
      return this.apiClient.callApi(
        '/systems/{system_id}/energy_export_lifetime', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * export_lifetime
     * Returns a daily time series of energy exported to the grid by the system over its lifetime. All measurements are in Watt-hours. The time series includes one entry for each day from the start_date to the end_date with no gaps in the time series. If the response contains trailing zeroes, such as [909, 4970, 0, 0, 0], then no energy has been exported for the last days in the series.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate Requested start date of the time series data. Defaults to the system's operational date. If the start_date is earlier than the system's operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format.
     * @param {Date} opts.endDate End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSystemEnergyExportLifetimeResponse}
     */
    getSystemEnergyExportLifetime(systemId, opts) {
      return this.getSystemEnergyExportLifetimeWithHttpInfo(systemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves energy exported to grid in regular intervals
     * Retrieves energy exported to grid in regular intervals. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system’s first reported date, then midnight of the system’s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 intervals will appear in response. If granularity is day, maximum 96 intervals will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt] Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response.
     * @param {module:model/TelemetryGranularityEnum} [granularity] Granularity of the telemetry data. Default is 'day'.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSystemEnergyExportTelemetryResponse} and HTTP response
     */
    getSystemEnergyExportTelemetryWithHttpInfo(systemId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling getSystemEnergyExportTelemetry");
      }

      let pathParams = {
        'system_id': systemId
      };
      let queryParams = {
        'start_at': opts['startAt'],
        'granularity': opts['granularity']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSystemEnergyExportTelemetryResponse;
      return this.apiClient.callApi(
        '/systems/{system_id}/energy_export_telemetry', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves energy exported to grid in regular intervals
     * Retrieves energy exported to grid in regular intervals. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system’s first reported date, then midnight of the system’s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 intervals will appear in response. If granularity is day, maximum 96 intervals will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startAt Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response.
     * @param {module:model/TelemetryGranularityEnum} opts.granularity Granularity of the telemetry data. Default is 'day'.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSystemEnergyExportTelemetryResponse}
     */
    getSystemEnergyExportTelemetry(systemId, opts) {
      return this.getSystemEnergyExportTelemetryWithHttpInfo(systemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * import_lifetime
     * Returns a daily time series of energy imported to the grid by the system over its lifetime. All measurements are in Watt hours. The time series includes one entry for each day from the start_date to the end_date with no gaps in the time series. If the response contains trailing zeroes, such as [909, 4970, 0, 0, 0], then no energy has been imported for the last days in the series.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {Object} opts Optional parameters
     * @param {Date} [startDate] Requested start date of the time series data. Defaults to the system's operational date. If the start_date is earlier than the system's operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format.
     * @param {Date} [endDate] End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSystemEnergyImportLifetimeResponse} and HTTP response
     */
    getSystemEnergyImportLifetimeWithHttpInfo(systemId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling getSystemEnergyImportLifetime");
      }

      let pathParams = {
        'system_id': systemId
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSystemEnergyImportLifetimeResponse;
      return this.apiClient.callApi(
        '/systems/{system_id}/energy_import_lifetime', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * import_lifetime
     * Returns a daily time series of energy imported to the grid by the system over its lifetime. All measurements are in Watt hours. The time series includes one entry for each day from the start_date to the end_date with no gaps in the time series. If the response contains trailing zeroes, such as [909, 4970, 0, 0, 0], then no energy has been imported for the last days in the series.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate Requested start date of the time series data. Defaults to the system's operational date. If the start_date is earlier than the system's operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format.
     * @param {Date} opts.endDate End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSystemEnergyImportLifetimeResponse}
     */
    getSystemEnergyImportLifetime(systemId, opts) {
      return this.getSystemEnergyImportLifetimeWithHttpInfo(systemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves energy imported from grid in regular intervals
     * Retrieves energy imported from grid in regular intervals. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system’s first reported date, then midnight of the system’s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 intervals will appear in response. If granularity is day, maximum 96 intervals will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt] Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response.
     * @param {module:model/TelemetryGranularityEnum} [granularity] Granularity of the telemetry data. Default is 'day'.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSystemEnergyImportTelemetryResponse} and HTTP response
     */
    getSystemEnergyImportTelemetryWithHttpInfo(systemId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling getSystemEnergyImportTelemetry");
      }

      let pathParams = {
        'system_id': systemId
      };
      let queryParams = {
        'start_at': opts['startAt'],
        'granularity': opts['granularity']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSystemEnergyImportTelemetryResponse;
      return this.apiClient.callApi(
        '/systems/{system_id}/energy_import_telemetry', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves energy imported from grid in regular intervals
     * Retrieves energy imported from grid in regular intervals. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system’s first reported date, then midnight of the system’s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 intervals will appear in response. If granularity is day, maximum 96 intervals will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startAt Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response.
     * @param {module:model/TelemetryGranularityEnum} opts.granularity Granularity of the telemetry data. Default is 'day'.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSystemEnergyImportTelemetryResponse}
     */
    getSystemEnergyImportTelemetry(systemId, opts) {
      return this.getSystemEnergyImportTelemetryWithHttpInfo(systemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
