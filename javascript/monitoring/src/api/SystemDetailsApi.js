/**
 * The Enphase Monitoring API
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClientError from '../model/ClientError';
import GetInvertersSummaryByEnvoyOrSiteResponseInner from '../model/GetInvertersSummaryByEnvoyOrSiteResponseInner';
import GetSystemDevicesResponse from '../model/GetSystemDevicesResponse';
import GetSystemSummaryResponse from '../model/GetSystemSummaryResponse';
import GetSystems500Response from '../model/GetSystems500Response';
import GetSystemsResponse from '../model/GetSystemsResponse';
import MethodNotAllowedError from '../model/MethodNotAllowedError';
import NotImplementedError from '../model/NotImplementedError';
import RetrieveSystemIdResponse from '../model/RetrieveSystemIdResponse';
import SearchSystemsRequest from '../model/SearchSystemsRequest';
import SearchSystemsResponse from '../model/SearchSystemsResponse';
import SystemDetails from '../model/SystemDetails';
import SystemSortByEnum from '../model/SystemSortByEnum';
import TooManyRequestsError from '../model/TooManyRequestsError';

/**
* SystemDetails service.
* @module api/SystemDetailsApi
* @version 4.0
*/
export default class SystemDetailsApi {

    /**
    * Constructs a new SystemDetailsApi. 
    * @alias module:api/SystemDetailsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * inverters_summary_by_envoy_or_site
     * Returns the microinverters summary based on the specified active envoy serial number or system.
     * @param {Object} opts Optional parameters
     * @param {Number} [siteId] Site ID. The response will contain only those microinverters reporting to one of the active envoys of the given site.
     * @param {String} [envoySerialNumber] Active envoy serial number. Only microinverters reporting to the given active envoy will be present in the response.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/GetInvertersSummaryByEnvoyOrSiteResponseInner>} and HTTP response
     */
    getInvertersSummaryByEnvoyOrSiteWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'site_id': opts['siteId'],
        'envoy_serial_number': opts['envoySerialNumber']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetInvertersSummaryByEnvoyOrSiteResponseInner];
      return this.apiClient.callApi(
        '/systems/inverters_summary_by_envoy_or_site', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * inverters_summary_by_envoy_or_site
     * Returns the microinverters summary based on the specified active envoy serial number or system.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.siteId Site ID. The response will contain only those microinverters reporting to one of the active envoys of the given site.
     * @param {String} opts.envoySerialNumber Active envoy serial number. Only microinverters reporting to the given active envoy will be present in the response.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/GetInvertersSummaryByEnvoyOrSiteResponseInner>}
     */
    getInvertersSummaryByEnvoyOrSite(opts) {
      return this.getInvertersSummaryByEnvoyOrSiteWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves a System by ID
     * Retrieves a system by ID.
     * @param {Number} systemId Unique numeric ID of the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SystemDetails} and HTTP response
     */
    getSystemWithHttpInfo(systemId) {
      let postBody = null;
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling getSystem");
      }

      let pathParams = {
        'system_id': systemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SystemDetails;
      return this.apiClient.callApi(
        '/systems/{system_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves a System by ID
     * Retrieves a system by ID.
     * @param {Number} systemId Unique numeric ID of the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SystemDetails}
     */
    getSystem(systemId) {
      return this.getSystemWithHttpInfo(systemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves devices for a given system
     * Retrieves devices for a given system. Only devices that are active will be returned in the response.
     * @param {Number} systemId Unique numeric ID of the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSystemDevicesResponse} and HTTP response
     */
    getSystemDevicesWithHttpInfo(systemId) {
      let postBody = null;
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling getSystemDevices");
      }

      let pathParams = {
        'system_id': systemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSystemDevicesResponse;
      return this.apiClient.callApi(
        '/systems/{system_id}/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves devices for a given system
     * Retrieves devices for a given system. Only devices that are active will be returned in the response.
     * @param {Number} systemId Unique numeric ID of the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSystemDevicesResponse}
     */
    getSystemDevices(systemId) {
      return this.getSystemDevicesWithHttpInfo(systemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves a system summary
     * Returns system summary based on the specified system ID.
     * @param {Number} systemId Unique numeric ID of the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSystemSummaryResponse} and HTTP response
     */
    getSystemSummaryWithHttpInfo(systemId) {
      let postBody = null;
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling getSystemSummary");
      }

      let pathParams = {
        'system_id': systemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSystemSummaryResponse;
      return this.apiClient.callApi(
        '/systems/{system_id}/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves a system summary
     * Returns system summary based on the specified system ID.
     * @param {Number} systemId Unique numeric ID of the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSystemSummaryResponse}
     */
    getSystemSummary(systemId) {
      return this.getSystemSummaryWithHttpInfo(systemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch systems
     * Returns a list of systems for which the user can make API requests. By default, systems are returned in batches of 10. The maximum size is 100.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page to be returned. Default=1, Min=1. For example, if page is set to 2, 2nd page is returned.
     * @param {Number} [size] Maximum number of records shown per page. Default=10, Min=1, Max=100.  For example, if set to 5, 5 records are shown per page.
     * @param {module:model/SystemSortByEnum} [sortBy] Returns list of systems sorted by <sort_by> field. To get ASC order sorted list, user sort_by = <key>. To get DESC order sorted list, use sort_by = (-)<key>. Current sort keys supported are id, name, and last_report_date. By default the list is sorted by decreasing system ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSystemsResponse} and HTTP response
     */
    getSystemsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'sort_by': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSystemsResponse;
      return this.apiClient.callApi(
        '/systems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch systems
     * Returns a list of systems for which the user can make API requests. By default, systems are returned in batches of 10. The maximum size is 100.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page to be returned. Default=1, Min=1. For example, if page is set to 2, 2nd page is returned.
     * @param {Number} opts.size Maximum number of records shown per page. Default=10, Min=1, Max=100.  For example, if set to 5, 5 records are shown per page.
     * @param {module:model/SystemSortByEnum} opts.sortBy Returns list of systems sorted by <sort_by> field. To get ASC order sorted list, user sort_by = <key>. To get DESC order sorted list, use sort_by = (-)<key>. Current sort keys supported are id, name, and last_report_date. By default the list is sorted by decreasing system ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSystemsResponse}
     */
    getSystems(opts) {
      return this.getSystemsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve system for a given envoy serial number
     * Get system ID by passing envoy serial number. If the serial number of a retired envoy is passed in the request param, a 404 Not Found response will be returned.
     * @param {String} serialNum Envoy serial number.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RetrieveSystemIdResponse} and HTTP response
     */
    retrieveSystemIdWithHttpInfo(serialNum) {
      let postBody = null;
      // verify the required parameter 'serialNum' is set
      if (serialNum === undefined || serialNum === null) {
        throw new Error("Missing the required parameter 'serialNum' when calling retrieveSystemId");
      }

      let pathParams = {
      };
      let queryParams = {
        'serial_num': serialNum
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveSystemIdResponse;
      return this.apiClient.callApi(
        '/systems/retrieve_system_id', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve system for a given envoy serial number
     * Get system ID by passing envoy serial number. If the serial number of a retired envoy is passed in the request param, a 404 Not Found response will be returned.
     * @param {String} serialNum Envoy serial number.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RetrieveSystemIdResponse}
     */
    retrieveSystemId(serialNum) {
      return this.retrieveSystemIdWithHttpInfo(serialNum)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search and filter systems
     * Search and filter systems. Provide only valid values in request parameters. Empty and invalid values will be ignored. Invalid keys will be rejected.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page to be returned. Default=1, Min=1, e.g=2.
     * @param {Number} [size] Maximum number of records shown per page. Default=10, Min=1, Max=1000, e.g=5.
     * @param {module:model/SearchSystemsRequest} [params] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SearchSystemsResponse} and HTTP response
     */
    searchSystemsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['params'];

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchSystemsResponse;
      return this.apiClient.callApi(
        '/systems/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Search and filter systems
     * Search and filter systems. Provide only valid values in request parameters. Empty and invalid values will be ignored. Invalid keys will be rejected.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page to be returned. Default=1, Min=1, e.g=2.
     * @param {Number} opts.size Maximum number of records shown per page. Default=10, Min=1, Max=1000, e.g=5.
     * @param {module:model/SearchSystemsRequest} opts.params 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SearchSystemsResponse}
     */
    searchSystems(opts) {
      return this.searchSystemsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
