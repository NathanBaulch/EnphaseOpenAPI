/**
 * The Enphase Monitoring API
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatterySettings from '../model/BatterySettings';
import ClientError from '../model/ClientError';
import GetSystemGridStatusSettingsResponse from '../model/GetSystemGridStatusSettingsResponse';
import GetSystems500Response from '../model/GetSystems500Response';
import LoadControlSettings from '../model/LoadControlSettings';
import MethodNotAllowedError from '../model/MethodNotAllowedError';
import NotImplementedError from '../model/NotImplementedError';
import StormGuardSettings from '../model/StormGuardSettings';
import TooManyRequestsError from '../model/TooManyRequestsError';
import UpdateSystemBatterySettingsRequest from '../model/UpdateSystemBatterySettingsRequest';
import UpdateSystemLoadControlSettingsRequest from '../model/UpdateSystemLoadControlSettingsRequest';
import UpdateSystemStormGuardSettingsRequest from '../model/UpdateSystemStormGuardSettingsRequest';

/**
* SystemConfigurations service.
* @module api/SystemConfigurationsApi
* @version 4.0
*/
export default class SystemConfigurationsApi {

    /**
    * Constructs a new SystemConfigurationsApi. 
    * @alias module:api/SystemConfigurationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns the current battery settings of a system
     * Returns the current battery settings of a system.
     * @param {Number} systemId Unique numeric ID of the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatterySettings} and HTTP response
     */
    getSystemBatterySettingsWithHttpInfo(systemId) {
      let postBody = null;
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling getSystemBatterySettings");
      }

      let pathParams = {
        'system_id': systemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BatterySettings;
      return this.apiClient.callApi(
        '/systems/config/{system_id}/battery_settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the current battery settings of a system
     * Returns the current battery settings of a system.
     * @param {Number} systemId Unique numeric ID of the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatterySettings}
     */
    getSystemBatterySettings(systemId) {
      return this.getSystemBatterySettingsWithHttpInfo(systemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the current grid status of a system.
     * Returns the current grid status of a system. Please note that the status returned in the response is not real-time and is updated only after the IQ Gateway sends a new report to the Enphase cloud.
     * @param {Number} systemId Unique numeric ID of the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSystemGridStatusSettingsResponse} and HTTP response
     */
    getSystemGridStatusSettingsWithHttpInfo(systemId) {
      let postBody = null;
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling getSystemGridStatusSettings");
      }

      let pathParams = {
        'system_id': systemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSystemGridStatusSettingsResponse;
      return this.apiClient.callApi(
        '/systems/config/{system_id}/grid_status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the current grid status of a system.
     * Returns the current grid status of a system. Please note that the status returned in the response is not real-time and is updated only after the IQ Gateway sends a new report to the Enphase cloud.
     * @param {Number} systemId Unique numeric ID of the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSystemGridStatusSettingsResponse}
     */
    getSystemGridStatusSettings(systemId) {
      return this.getSystemGridStatusSettingsWithHttpInfo(systemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the current load control settings of a system
     * Returns the current load control settings of a system.
     * @param {Number} systemId Unique numeric ID of the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoadControlSettings} and HTTP response
     */
    getSystemLoadControlSettingsWithHttpInfo(systemId) {
      let postBody = null;
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling getSystemLoadControlSettings");
      }

      let pathParams = {
        'system_id': systemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoadControlSettings;
      return this.apiClient.callApi(
        '/systems/config/{system_id}/load_control', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the current load control settings of a system
     * Returns the current load control settings of a system.
     * @param {Number} systemId Unique numeric ID of the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoadControlSettings}
     */
    getSystemLoadControlSettings(systemId) {
      return this.getSystemLoadControlSettingsWithHttpInfo(systemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the current storm guard settings of a system
     * Returns the current storm guard settings of a system.
     * @param {Number} systemId Unique numeric ID of the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StormGuardSettings} and HTTP response
     */
    getSystemStormGuardSettingsWithHttpInfo(systemId) {
      let postBody = null;
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling getSystemStormGuardSettings");
      }

      let pathParams = {
        'system_id': systemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StormGuardSettings;
      return this.apiClient.callApi(
        '/systems/config/{system_id}/storm_guard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the current storm guard settings of a system
     * Returns the current storm guard settings of a system.
     * @param {Number} systemId Unique numeric ID of the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StormGuardSettings}
     */
    getSystemStormGuardSettings(systemId) {
      return this.getSystemStormGuardSettingsWithHttpInfo(systemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the current battery settings of a system
     * Updates the current battery settings of a system.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateSystemBatterySettingsRequest} [batterySettings] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatterySettings} and HTTP response
     */
    updateSystemBatterySettingsWithHttpInfo(systemId, opts) {
      opts = opts || {};
      let postBody = opts['batterySettings'];
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling updateSystemBatterySettings");
      }

      let pathParams = {
        'system_id': systemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatterySettings;
      return this.apiClient.callApi(
        '/systems/config/{system_id}/battery_settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the current battery settings of a system
     * Updates the current battery settings of a system.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateSystemBatterySettingsRequest} opts.batterySettings 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatterySettings}
     */
    updateSystemBatterySettings(systemId, opts) {
      return this.updateSystemBatterySettingsWithHttpInfo(systemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the current load control settings of a system
     * Updates the current load control settings of a system.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateSystemLoadControlSettingsRequest} [updateSystemLoadControlSettingsRequest] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoadControlSettings} and HTTP response
     */
    updateSystemLoadControlSettingsWithHttpInfo(systemId, opts) {
      opts = opts || {};
      let postBody = opts['updateSystemLoadControlSettingsRequest'];
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling updateSystemLoadControlSettings");
      }

      let pathParams = {
        'system_id': systemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoadControlSettings;
      return this.apiClient.callApi(
        '/systems/config/{system_id}/load_control', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the current load control settings of a system
     * Updates the current load control settings of a system.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateSystemLoadControlSettingsRequest} opts.updateSystemLoadControlSettingsRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoadControlSettings}
     */
    updateSystemLoadControlSettings(systemId, opts) {
      return this.updateSystemLoadControlSettingsWithHttpInfo(systemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates the current storm guard settings of a system
     * Updates the current storm guard status of a system.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateSystemStormGuardSettingsRequest} [stormGuard] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/StormGuardSettings} and HTTP response
     */
    updateSystemStormGuardSettingsWithHttpInfo(systemId, opts) {
      opts = opts || {};
      let postBody = opts['stormGuard'];
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling updateSystemStormGuardSettings");
      }

      let pathParams = {
        'system_id': systemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StormGuardSettings;
      return this.apiClient.callApi(
        '/systems/config/{system_id}/storm_guard', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates the current storm guard settings of a system
     * Updates the current storm guard status of a system.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateSystemStormGuardSettingsRequest} opts.stormGuard 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/StormGuardSettings}
     */
    updateSystemStormGuardSettings(systemId, opts) {
      return this.updateSystemStormGuardSettingsWithHttpInfo(systemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
