/**
 * The Enphase Monitoring API
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatteryDeviceTelemetry from '../model/BatteryDeviceTelemetry';
import ClientError from '../model/ClientError';
import GetSystemMicroDeviceTelemetryResponse from '../model/GetSystemMicroDeviceTelemetryResponse';
import GetSystems500Response from '../model/GetSystems500Response';
import MethodNotAllowedError from '../model/MethodNotAllowedError';
import NotImplementedError from '../model/NotImplementedError';
import TelemetryGranularityEnum from '../model/TelemetryGranularityEnum';
import TooManyRequestsError from '../model/TooManyRequestsError';

/**
* DeviceLevelProductionMonitoring service.
* @module api/DeviceLevelProductionMonitoringApi
* @version 4.0
*/
export default class DeviceLevelProductionMonitoringApi {

    /**
    * Constructs a new DeviceLevelProductionMonitoringApi. 
    * @alias module:api/DeviceLevelProductionMonitoringApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Retrieves telemetry for single ACB
     * Retrieves telemetry for single ACB. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system's first reported date, then midnight of the system's first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {String} serialNo Serial number of the acb.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt] Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response.
     * @param {module:model/TelemetryGranularityEnum} [granularity] Granularity of the telemetry data. Default is 'day'.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatteryDeviceTelemetry} and HTTP response
     */
    getSystemAcbDeviceTelemetryWithHttpInfo(systemId, serialNo, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling getSystemAcbDeviceTelemetry");
      }
      // verify the required parameter 'serialNo' is set
      if (serialNo === undefined || serialNo === null) {
        throw new Error("Missing the required parameter 'serialNo' when calling getSystemAcbDeviceTelemetry");
      }

      let pathParams = {
        'system_id': systemId,
        'serial_no': serialNo
      };
      let queryParams = {
        'start_at': opts['startAt'],
        'granularity': opts['granularity']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BatteryDeviceTelemetry;
      return this.apiClient.callApi(
        '/systems/{system_id}/devices/acbs/{serial_no}/telemetry', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves telemetry for single ACB
     * Retrieves telemetry for single ACB. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system's first reported date, then midnight of the system's first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {String} serialNo Serial number of the acb.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startAt Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response.
     * @param {module:model/TelemetryGranularityEnum} opts.granularity Granularity of the telemetry data. Default is 'day'.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatteryDeviceTelemetry}
     */
    getSystemAcbDeviceTelemetry(systemId, serialNo, opts) {
      return this.getSystemAcbDeviceTelemetryWithHttpInfo(systemId, serialNo, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves telemetry for single Encharge
     * Retrieves telemetry for single Encharge. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system's first reported date, then midnight of the system's first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {String} serialNo Serial number of the Encharge.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt] Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response.
     * @param {module:model/TelemetryGranularityEnum} [granularity] Granularity of the telemetry data. Default is 'day'.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatteryDeviceTelemetry} and HTTP response
     */
    getSystemEnchargeDeviceTelemetryWithHttpInfo(systemId, serialNo, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling getSystemEnchargeDeviceTelemetry");
      }
      // verify the required parameter 'serialNo' is set
      if (serialNo === undefined || serialNo === null) {
        throw new Error("Missing the required parameter 'serialNo' when calling getSystemEnchargeDeviceTelemetry");
      }

      let pathParams = {
        'system_id': systemId,
        'serial_no': serialNo
      };
      let queryParams = {
        'start_at': opts['startAt'],
        'granularity': opts['granularity']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BatteryDeviceTelemetry;
      return this.apiClient.callApi(
        '/systems/{system_id}/devices/encharges/{serial_no}/telemetry', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves telemetry for single Encharge
     * Retrieves telemetry for single Encharge. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system's first reported date, then midnight of the system's first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {String} serialNo Serial number of the Encharge.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startAt Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response.
     * @param {module:model/TelemetryGranularityEnum} opts.granularity Granularity of the telemetry data. Default is 'day'.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatteryDeviceTelemetry}
     */
    getSystemEnchargeDeviceTelemetry(systemId, serialNo, opts) {
      return this.getSystemEnchargeDeviceTelemetryWithHttpInfo(systemId, serialNo, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves telemetry for single micro/pcu
     * Retrieves telemetry for single micro/pcu. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system's first reported date, then midnight of the system's first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 3 intervals will appear in response. If granularity is day, maximum 288 intervals will appear in response where each interval is of 5 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {String} serialNo Serial number of the individual solar Microinverter.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt] Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response.
     * @param {module:model/TelemetryGranularityEnum} [granularity] Granularity of the telemetry data. Default is 'day'.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSystemMicroDeviceTelemetryResponse} and HTTP response
     */
    getSystemMicroDeviceTelemetryWithHttpInfo(systemId, serialNo, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling getSystemMicroDeviceTelemetry");
      }
      // verify the required parameter 'serialNo' is set
      if (serialNo === undefined || serialNo === null) {
        throw new Error("Missing the required parameter 'serialNo' when calling getSystemMicroDeviceTelemetry");
      }

      let pathParams = {
        'system_id': systemId,
        'serial_no': serialNo
      };
      let queryParams = {
        'start_at': opts['startAt'],
        'granularity': opts['granularity']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSystemMicroDeviceTelemetryResponse;
      return this.apiClient.callApi(
        '/systems/{system_id}/devices/micros/{serial_no}/telemetry', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves telemetry for single micro/pcu
     * Retrieves telemetry for single micro/pcu. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system's first reported date, then midnight of the system's first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 3 intervals will appear in response. If granularity is day, maximum 288 intervals will appear in response where each interval is of 5 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
     * @param {Number} systemId Unique numeric ID of the system.
     * @param {String} serialNo Serial number of the individual solar Microinverter.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startAt Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response.
     * @param {module:model/TelemetryGranularityEnum} opts.granularity Granularity of the telemetry data. Default is 'day'.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSystemMicroDeviceTelemetryResponse}
     */
    getSystemMicroDeviceTelemetry(systemId, serialNo, opts) {
      return this.getSystemMicroDeviceTelemetryWithHttpInfo(systemId, serialNo, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
