/**
 * The Enphase Monitoring API
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetSystemDevicesResponseDevicesValueInner from './GetSystemDevicesResponseDevicesValueInner';

/**
 * The GetSystemDevicesResponse model module.
 * @module model/GetSystemDevicesResponse
 * @version 4.0
 */
class GetSystemDevicesResponse {
    /**
     * Constructs a new <code>GetSystemDevicesResponse</code>.
     * @alias module:model/GetSystemDevicesResponse
     */
    constructor() { 
        
        GetSystemDevicesResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetSystemDevicesResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetSystemDevicesResponse} obj Optional instance to populate.
     * @return {module:model/GetSystemDevicesResponse} The populated <code>GetSystemDevicesResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetSystemDevicesResponse();

            if (data.hasOwnProperty('system_id')) {
                obj['system_id'] = ApiClient.convertToType(data['system_id'], 'Number');
            }
            if (data.hasOwnProperty('total_devices')) {
                obj['total_devices'] = ApiClient.convertToType(data['total_devices'], 'Number');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], 'String');
            }
            if (data.hasOwnProperty('devices')) {
                obj['devices'] = ApiClient.convertToType(data['devices'], {'String': [GetSystemDevicesResponseDevicesValueInner]});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetSystemDevicesResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetSystemDevicesResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['items'] && !(typeof data['items'] === 'string' || data['items'] instanceof String)) {
            throw new Error("Expected the field `items` to be a primitive type in the JSON string but got " + data['items']);
        }

        return true;
    }


}



/**
 * System ID.
 * @member {Number} system_id
 */
GetSystemDevicesResponse.prototype['system_id'] = undefined;

/**
 * Total active devices associated with the system.
 * @member {Number} total_devices
 */
GetSystemDevicesResponse.prototype['total_devices'] = undefined;

/**
 * List key.
 * @member {String} items
 */
GetSystemDevicesResponse.prototype['items'] = undefined;

/**
 * Hash keys include all the possible device types micros, meters, gateways, mids, q_relays, ACBs, Encharges, Enpowers (if the devices of this type are present). For all the device types, the object will contain the serial_number and model with some additional information pertaining to the device type.
 * @member {Object.<String, Array.<module:model/GetSystemDevicesResponseDevicesValueInner>>} devices
 */
GetSystemDevicesResponse.prototype['devices'] = undefined;






export default GetSystemDevicesResponse;

