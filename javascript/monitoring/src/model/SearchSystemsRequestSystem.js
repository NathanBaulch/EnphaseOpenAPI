/**
 * The Enphase Monitoring API
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SystemConnectionTypeEnum from './SystemConnectionTypeEnum';
import SystemPublicNameEnum from './SystemPublicNameEnum';
import SystemStatusEnum from './SystemStatusEnum';

/**
 * The SearchSystemsRequestSystem model module.
 * @module model/SearchSystemsRequestSystem
 * @version 4.0
 */
class SearchSystemsRequestSystem {
    /**
     * Constructs a new <code>SearchSystemsRequestSystem</code>.
     * @alias module:model/SearchSystemsRequestSystem
     */
    constructor() { 
        
        SearchSystemsRequestSystem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SearchSystemsRequestSystem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchSystemsRequestSystem} obj Optional instance to populate.
     * @return {module:model/SearchSystemsRequestSystem} The populated <code>SearchSystemsRequestSystem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchSystemsRequestSystem();

            if (data.hasOwnProperty('ids')) {
                obj['ids'] = ApiClient.convertToType(data['ids'], ['Number']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('public_name')) {
                obj['public_name'] = SystemPublicNameEnum.constructFromObject(data['public_name']);
            }
            if (data.hasOwnProperty('statuses')) {
                obj['statuses'] = ApiClient.convertToType(data['statuses'], [SystemStatusEnum]);
            }
            if (data.hasOwnProperty('connection_type')) {
                obj['connection_type'] = SystemConnectionTypeEnum.constructFromObject(data['connection_type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchSystemsRequestSystem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchSystemsRequestSystem</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['ids'])) {
            throw new Error("Expected the field `ids` to be an array in the JSON data but got " + data['ids']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['statuses'])) {
            throw new Error("Expected the field `statuses` to be an array in the JSON data but got " + data['statuses']);
        }

        return true;
    }


}



/**
 * Filter system by particular Ids.
 * @member {Array.<Number>} ids
 */
SearchSystemsRequestSystem.prototype['ids'] = undefined;

/**
 * Search by name of the system.
 * @member {String} name
 */
SearchSystemsRequestSystem.prototype['name'] = undefined;

/**
 * @member {module:model/SystemPublicNameEnum} public_name
 */
SearchSystemsRequestSystem.prototype['public_name'] = undefined;

/**
 * Search by System status.
 * @member {Array.<module:model/SystemStatusEnum>} statuses
 */
SearchSystemsRequestSystem.prototype['statuses'] = undefined;

/**
 * @member {module:model/SystemConnectionTypeEnum} connection_type
 */
SearchSystemsRequestSystem.prototype['connection_type'] = undefined;






export default SearchSystemsRequestSystem;

