/**
 * The Enphase Monitoring API
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StreamSystemLiveDataResponseDataData model module.
 * @module model/StreamSystemLiveDataResponseDataData
 * @version 4.0
 */
class StreamSystemLiveDataResponseDataData {
    /**
     * Constructs a new <code>StreamSystemLiveDataResponseDataData</code>.
     * @alias module:model/StreamSystemLiveDataResponseDataData
     */
    constructor() { 
        
        StreamSystemLiveDataResponseDataData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StreamSystemLiveDataResponseDataData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StreamSystemLiveDataResponseDataData} obj Optional instance to populate.
     * @return {module:model/StreamSystemLiveDataResponseDataData} The populated <code>StreamSystemLiveDataResponseDataData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StreamSystemLiveDataResponseDataData();

            if (data.hasOwnProperty('battery_mode')) {
                obj['battery_mode'] = ApiClient.convertToType(data['battery_mode'], 'String');
            }
            if (data.hasOwnProperty('battery_power')) {
                obj['battery_power'] = ApiClient.convertToType(data['battery_power'], 'Number');
            }
            if (data.hasOwnProperty('battery_soc')) {
                obj['battery_soc'] = ApiClient.convertToType(data['battery_soc'], 'Number');
            }
            if (data.hasOwnProperty('consumption_power')) {
                obj['consumption_power'] = ApiClient.convertToType(data['consumption_power'], 'Number');
            }
            if (data.hasOwnProperty('envoy_serial_number')) {
                obj['envoy_serial_number'] = ApiClient.convertToType(data['envoy_serial_number'], ['String']);
            }
            if (data.hasOwnProperty('generator_power')) {
                obj['generator_power'] = ApiClient.convertToType(data['generator_power'], 'Number');
            }
            if (data.hasOwnProperty('grid_power')) {
                obj['grid_power'] = ApiClient.convertToType(data['grid_power'], 'Number');
            }
            if (data.hasOwnProperty('grid_status')) {
                obj['grid_status'] = ApiClient.convertToType(data['grid_status'], 'String');
            }
            if (data.hasOwnProperty('pv_power')) {
                obj['pv_power'] = ApiClient.convertToType(data['pv_power'], 'Number');
            }
            if (data.hasOwnProperty('system_id')) {
                obj['system_id'] = ApiClient.convertToType(data['system_id'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StreamSystemLiveDataResponseDataData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StreamSystemLiveDataResponseDataData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['battery_mode'] && !(typeof data['battery_mode'] === 'string' || data['battery_mode'] instanceof String)) {
            throw new Error("Expected the field `battery_mode` to be a primitive type in the JSON string but got " + data['battery_mode']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['envoy_serial_number'])) {
            throw new Error("Expected the field `envoy_serial_number` to be an array in the JSON data but got " + data['envoy_serial_number']);
        }
        // ensure the json data is a string
        if (data['grid_status'] && !(typeof data['grid_status'] === 'string' || data['grid_status'] instanceof String)) {
            throw new Error("Expected the field `grid_status` to be a primitive type in the JSON string but got " + data['grid_status']);
        }

        return true;
    }


}



/**
 * Battery mode of the site. Available values are Savings Mode, Full Backup, and Self-consumption.
 * @member {String} battery_mode
 */
StreamSystemLiveDataResponseDataData.prototype['battery_mode'] = undefined;

/**
 * Battery power in watts; Power will be positive in case of discharge and negative in case of charge.
 * @member {Number} battery_power
 */
StreamSystemLiveDataResponseDataData.prototype['battery_power'] = undefined;

/**
 * Battery soc in percentage.
 * @member {Number} battery_soc
 */
StreamSystemLiveDataResponseDataData.prototype['battery_soc'] = undefined;

/**
 * Consumption power in watts.
 * @member {Number} consumption_power
 */
StreamSystemLiveDataResponseDataData.prototype['consumption_power'] = undefined;

/**
 * @member {Array.<String>} envoy_serial_number
 */
StreamSystemLiveDataResponseDataData.prototype['envoy_serial_number'] = undefined;

/**
 * Generator power in watts.
 * @member {Number} generator_power
 */
StreamSystemLiveDataResponseDataData.prototype['generator_power'] = undefined;

/**
 * Grid power in watts; Power will be negative in case of export and positive in case of import.
 * @member {Number} grid_power
 */
StreamSystemLiveDataResponseDataData.prototype['grid_power'] = undefined;

/**
 * Grid state of the site. Available values are On Grid, Off Grid, Unknown.
 * @member {String} grid_status
 */
StreamSystemLiveDataResponseDataData.prototype['grid_status'] = undefined;

/**
 * PV power in watts.
 * @member {Number} pv_power
 */
StreamSystemLiveDataResponseDataData.prototype['pv_power'] = undefined;

/**
 * The unique numeric ID of the system.
 * @member {Number} system_id
 */
StreamSystemLiveDataResponseDataData.prototype['system_id'] = undefined;






export default StreamSystemLiveDataResponseDataData;

