/**
 * The Enphase Monitoring API
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SystemStatusEnum from './SystemStatusEnum';

/**
 * The GetSystemSummaryResponse model module.
 * @module model/GetSystemSummaryResponse
 * @version 4.0
 */
class GetSystemSummaryResponse {
    /**
     * Constructs a new <code>GetSystemSummaryResponse</code>.
     * @alias module:model/GetSystemSummaryResponse
     */
    constructor() { 
        
        GetSystemSummaryResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetSystemSummaryResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetSystemSummaryResponse} obj Optional instance to populate.
     * @return {module:model/GetSystemSummaryResponse} The populated <code>GetSystemSummaryResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetSystemSummaryResponse();

            if (data.hasOwnProperty('system_id')) {
                obj['system_id'] = ApiClient.convertToType(data['system_id'], 'Number');
            }
            if (data.hasOwnProperty('current_power')) {
                obj['current_power'] = ApiClient.convertToType(data['current_power'], 'Number');
            }
            if (data.hasOwnProperty('energy_lifetime')) {
                obj['energy_lifetime'] = ApiClient.convertToType(data['energy_lifetime'], 'Number');
            }
            if (data.hasOwnProperty('energy_today')) {
                obj['energy_today'] = ApiClient.convertToType(data['energy_today'], 'Number');
            }
            if (data.hasOwnProperty('last_interval_end_at')) {
                obj['last_interval_end_at'] = ApiClient.convertToType(data['last_interval_end_at'], 'Number');
            }
            if (data.hasOwnProperty('last_report_at')) {
                obj['last_report_at'] = ApiClient.convertToType(data['last_report_at'], 'Number');
            }
            if (data.hasOwnProperty('modules')) {
                obj['modules'] = ApiClient.convertToType(data['modules'], 'Number');
            }
            if (data.hasOwnProperty('operational_at')) {
                obj['operational_at'] = ApiClient.convertToType(data['operational_at'], 'Number');
            }
            if (data.hasOwnProperty('size_w')) {
                obj['size_w'] = ApiClient.convertToType(data['size_w'], 'Number');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = SystemStatusEnum.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('summary_date')) {
                obj['summary_date'] = ApiClient.convertToType(data['summary_date'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetSystemSummaryResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetSystemSummaryResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }

        return true;
    }


}



/**
 * Unique numeric ID of the system.
 * @member {Number} system_id
 */
GetSystemSummaryResponse.prototype['system_id'] = undefined;

/**
 * Current power production of the system in Watts.
 * @member {Number} current_power
 */
GetSystemSummaryResponse.prototype['current_power'] = undefined;

/**
 * Energy generated by the system during its lifetime in Wh.
 * @member {Number} energy_lifetime
 */
GetSystemSummaryResponse.prototype['energy_lifetime'] = undefined;

/**
 * Energy generated by the system today in Wh.
 * @member {Number} energy_today
 */
GetSystemSummaryResponse.prototype['energy_today'] = undefined;

/**
 * Last known time that the system produced energy. When a system has not been communicating for a length of time, the last_report_at can be recent, whereas the last_interval_end_at may be further back.
 * @member {Number} last_interval_end_at
 */
GetSystemSummaryResponse.prototype['last_interval_end_at'] = undefined;

/**
 * Timestamp (in epoch format) at which the system's Envoy last submitted a report.
 * @member {Number} last_report_at
 */
GetSystemSummaryResponse.prototype['last_report_at'] = undefined;

/**
 * Total number of modules in the system.
 * @member {Number} modules
 */
GetSystemSummaryResponse.prototype['modules'] = undefined;

/**
 * Timestamp (in epoch format) at which this system became operational. Corresponds to the system's interconnect time, if one is specified. Otherwise, it is the system's first reported interval end time.
 * @member {Number} operational_at
 */
GetSystemSummaryResponse.prototype['operational_at'] = undefined;

/**
 * System size in watts.
 * @member {Number} size_w
 */
GetSystemSummaryResponse.prototype['size_w'] = undefined;

/**
 * Source of energy measurement.
 * @member {String} source
 */
GetSystemSummaryResponse.prototype['source'] = undefined;

/**
 * @member {module:model/SystemStatusEnum} status
 */
GetSystemSummaryResponse.prototype['status'] = undefined;

/**
 * Summary date.
 * @member {Date} summary_date
 */
GetSystemSummaryResponse.prototype['summary_date'] = undefined;






export default GetSystemSummaryResponse;

