/**
 * The Enphase Monitoring API
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SystemAddress from './SystemAddress';
import SystemAttachmentTypeEnum from './SystemAttachmentTypeEnum';
import SystemConnectionTypeEnum from './SystemConnectionTypeEnum';
import SystemStatusEnum from './SystemStatusEnum';

/**
 * The System model module.
 * @module model/System
 * @version 4.0
 */
class System {
    /**
     * Constructs a new <code>System</code>.
     * @alias module:model/System
     */
    constructor() { 
        
        System.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>System</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/System} obj Optional instance to populate.
     * @return {module:model/System} The populated <code>System</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new System();

            if (data.hasOwnProperty('system_id')) {
                obj['system_id'] = ApiClient.convertToType(data['system_id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('public_name')) {
                obj['public_name'] = ApiClient.convertToType(data['public_name'], 'String');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = SystemAddress.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('connection_type')) {
                obj['connection_type'] = SystemConnectionTypeEnum.constructFromObject(data['connection_type']);
            }
            if (data.hasOwnProperty('energy_lifetime')) {
                obj['energy_lifetime'] = ApiClient.convertToType(data['energy_lifetime'], 'Number');
            }
            if (data.hasOwnProperty('energy_today')) {
                obj['energy_today'] = ApiClient.convertToType(data['energy_today'], 'Number');
            }
            if (data.hasOwnProperty('system_size')) {
                obj['system_size'] = ApiClient.convertToType(data['system_size'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = SystemStatusEnum.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('last_report_at')) {
                obj['last_report_at'] = ApiClient.convertToType(data['last_report_at'], 'Number');
            }
            if (data.hasOwnProperty('last_energy_at')) {
                obj['last_energy_at'] = ApiClient.convertToType(data['last_energy_at'], 'Number');
            }
            if (data.hasOwnProperty('operational_at')) {
                obj['operational_at'] = ApiClient.convertToType(data['operational_at'], 'Number');
            }
            if (data.hasOwnProperty('attachment_type')) {
                obj['attachment_type'] = SystemAttachmentTypeEnum.constructFromObject(data['attachment_type']);
            }
            if (data.hasOwnProperty('interconnect_date')) {
                obj['interconnect_date'] = ApiClient.convertToType(data['interconnect_date'], 'Date');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('other_references')) {
                obj['other_references'] = ApiClient.convertToType(data['other_references'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>System</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>System</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['public_name'] && !(typeof data['public_name'] === 'string' || data['public_name'] instanceof String)) {
            throw new Error("Expected the field `public_name` to be a primitive type in the JSON string but got " + data['public_name']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          SystemAddress.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['other_references'])) {
            throw new Error("Expected the field `other_references` to be an array in the JSON data but got " + data['other_references']);
        }

        return true;
    }


}



/**
 * Unique numeric ID of the system.
 * @member {Number} system_id
 */
System.prototype['system_id'] = undefined;

/**
 * Name of the system.
 * @member {String} name
 */
System.prototype['name'] = undefined;

/**
 * Name displayed on the public system page. Available values are All, Residential System, Commercial etc. Default='Residential System'. Only for systems that allow public access.
 * @member {String} public_name
 */
System.prototype['public_name'] = undefined;

/**
 * Timezone to which the system belongs.
 * @member {String} timezone
 */
System.prototype['timezone'] = undefined;

/**
 * @member {module:model/SystemAddress} address
 */
System.prototype['address'] = undefined;

/**
 * @member {module:model/SystemConnectionTypeEnum} connection_type
 */
System.prototype['connection_type'] = undefined;

/**
 * Energy generated by the system during its lifetime in Wh. It is returned only if the count is less than or equal to 100.
 * @member {Number} energy_lifetime
 */
System.prototype['energy_lifetime'] = undefined;

/**
 * Energy generated by the system today in Wh. It is returned only if the count is less than or equal to 100.
 * @member {Number} energy_today
 */
System.prototype['energy_today'] = undefined;

/**
 * Size of the system. It is returned only if the count is less than or equal to 100.
 * @member {Number} system_size
 */
System.prototype['system_size'] = undefined;

/**
 * @member {module:model/SystemStatusEnum} status
 */
System.prototype['status'] = undefined;

/**
 * Timestamp (in epoch format) at which the system's Envoy last submitted a report.
 * @member {Number} last_report_at
 */
System.prototype['last_report_at'] = undefined;

/**
 * Timestamp (in epoch format) at which the system's produced energy was last reported. Even if the last produced energy is 0, its timestamp will be returned.
 * @member {Number} last_energy_at
 */
System.prototype['last_energy_at'] = undefined;

/**
 * Timestamp (in epoch format) at which this system became operational. Corresponds to the system's interconnect time, if one is specified. Otherwise, it is the system's first reported interval end time.
 * @member {Number} operational_at
 */
System.prototype['operational_at'] = undefined;

/**
 * @member {module:model/SystemAttachmentTypeEnum} attachment_type
 */
System.prototype['attachment_type'] = undefined;

/**
 * Date on which the system was approved to connect to the grid.
 * @member {Date} interconnect_date
 */
System.prototype['interconnect_date'] = undefined;

/**
 * If the calling user belongs to a company and that company has provided its own identifier for a system, that ID is included here. Otherwise, this attribute is not returned.
 * @member {String} reference
 */
System.prototype['reference'] = undefined;

/**
 * If any other companies have provided their own identifiers for a system, those identifiers are included here. Otherwise, this attribute is not returned.
 * @member {Array.<String>} other_references
 */
System.prototype['other_references'] = undefined;






export default System;

