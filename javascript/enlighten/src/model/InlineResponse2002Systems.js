/**
 * The Enlighten Systems API
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConnectionType from './ConnectionType';
import Meta from './Meta';

/**
 * The InlineResponse2002Systems model module.
 * @module model/InlineResponse2002Systems
 * @version 2.0
 */
class InlineResponse2002Systems {
    /**
     * Constructs a new <code>InlineResponse2002Systems</code>.
     * @alias module:model/InlineResponse2002Systems
     * @param systemId {Number} The Enlighten ID of the system.
     * @param systemName {String} The name of the system. Even if the system owner has indicated their site is anonymous for public lists, the actual system name is returned here for identification purposes.
     * @param systemPublicName {String} The display name of the system. Use this when displaying the system name on a public list or view.
     * @param reference {String} If the calling user belongs to a company and that company has provided its own identifiers for a system, that ID is included here. Otherwise, this attribute is not returned.
     * @param otherReferences {Array.<String>} If any other companies have provided their own identifiers for a system, those identifiers are included here. Otherwise, this attribute is not returned.
     * @param country {String} The two-letter code for the country where the system is located. See [ISO_3166-1_alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) for reference.
     * @param state {String} The two-letter code for the state where the system is located. See [ISO_3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) for reference.
     * @param city {String} The name of the city where the system is located.
     * @param postalCode {String} The postal code where the system is located.
     * @param timezone {String} The timezone of the system.
     * @param connectionType {module:model/ConnectionType} 
     * @param status {module:model/InlineResponse2002Systems.StatusEnum} The current status of the system. You can find this and more in the `meta` property.
     * @param meta {module:model/Meta} 
     */
    constructor(systemId, systemName, systemPublicName, reference, otherReferences, country, state, city, postalCode, timezone, connectionType, status, meta) { 
        
        InlineResponse2002Systems.initialize(this, systemId, systemName, systemPublicName, reference, otherReferences, country, state, city, postalCode, timezone, connectionType, status, meta);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, systemId, systemName, systemPublicName, reference, otherReferences, country, state, city, postalCode, timezone, connectionType, status, meta) { 
        obj['system_id'] = systemId;
        obj['system_name'] = systemName;
        obj['system_public_name'] = systemPublicName;
        obj['reference'] = reference;
        obj['other_references'] = otherReferences;
        obj['country'] = country;
        obj['state'] = state;
        obj['city'] = city;
        obj['postal_code'] = postalCode;
        obj['timezone'] = timezone;
        obj['connection_type'] = connectionType;
        obj['status'] = status;
        obj['meta'] = meta;
    }

    /**
     * Constructs a <code>InlineResponse2002Systems</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineResponse2002Systems} obj Optional instance to populate.
     * @return {module:model/InlineResponse2002Systems} The populated <code>InlineResponse2002Systems</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineResponse2002Systems();

            if (data.hasOwnProperty('system_id')) {
                obj['system_id'] = ApiClient.convertToType(data['system_id'], 'Number');
            }
            if (data.hasOwnProperty('system_name')) {
                obj['system_name'] = ApiClient.convertToType(data['system_name'], 'String');
            }
            if (data.hasOwnProperty('system_public_name')) {
                obj['system_public_name'] = ApiClient.convertToType(data['system_public_name'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('other_references')) {
                obj['other_references'] = ApiClient.convertToType(data['other_references'], ['String']);
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('postal_code')) {
                obj['postal_code'] = ApiClient.convertToType(data['postal_code'], 'String');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('connection_type')) {
                obj['connection_type'] = ConnectionType.constructFromObject(data['connection_type']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = Meta.constructFromObject(data['meta']);
            }
        }
        return obj;
    }


}

/**
 * The Enlighten ID of the system.
 * @member {Number} system_id
 */
InlineResponse2002Systems.prototype['system_id'] = undefined;

/**
 * The name of the system. Even if the system owner has indicated their site is anonymous for public lists, the actual system name is returned here for identification purposes.
 * @member {String} system_name
 */
InlineResponse2002Systems.prototype['system_name'] = undefined;

/**
 * The display name of the system. Use this when displaying the system name on a public list or view.
 * @member {String} system_public_name
 */
InlineResponse2002Systems.prototype['system_public_name'] = undefined;

/**
 * If the calling user belongs to a company and that company has provided its own identifiers for a system, that ID is included here. Otherwise, this attribute is not returned.
 * @member {String} reference
 */
InlineResponse2002Systems.prototype['reference'] = undefined;

/**
 * If any other companies have provided their own identifiers for a system, those identifiers are included here. Otherwise, this attribute is not returned.
 * @member {Array.<String>} other_references
 */
InlineResponse2002Systems.prototype['other_references'] = undefined;

/**
 * The two-letter code for the country where the system is located. See [ISO_3166-1_alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) for reference.
 * @member {String} country
 */
InlineResponse2002Systems.prototype['country'] = undefined;

/**
 * The two-letter code for the state where the system is located. See [ISO_3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) for reference.
 * @member {String} state
 */
InlineResponse2002Systems.prototype['state'] = undefined;

/**
 * The name of the city where the system is located.
 * @member {String} city
 */
InlineResponse2002Systems.prototype['city'] = undefined;

/**
 * The postal code where the system is located.
 * @member {String} postal_code
 */
InlineResponse2002Systems.prototype['postal_code'] = undefined;

/**
 * The timezone of the system.
 * @member {String} timezone
 */
InlineResponse2002Systems.prototype['timezone'] = undefined;

/**
 * @member {module:model/ConnectionType} connection_type
 */
InlineResponse2002Systems.prototype['connection_type'] = undefined;

/**
 * The current status of the system. You can find this and more in the `meta` property.
 * @member {module:model/InlineResponse2002Systems.StatusEnum} status
 */
InlineResponse2002Systems.prototype['status'] = undefined;

/**
 * @member {module:model/Meta} meta
 */
InlineResponse2002Systems.prototype['meta'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
InlineResponse2002Systems['StatusEnum'] = {

    /**
     * value: "comm"
     * @const
     */
    "comm": "comm",

    /**
     * value: "power"
     * @const
     */
    "power": "power",

    /**
     * value: "meter"
     * @const
     */
    "meter": "meter",

    /**
     * value: "meter_issue"
     * @const
     */
    "meter_issue": "meter_issue",

    /**
     * value: "micro"
     * @const
     */
    "micro": "micro",

    /**
     * value: "battery"
     * @const
     */
    "battery": "battery",

    /**
     * value: "storage_idle"
     * @const
     */
    "storage_idle": "storage_idle",

    /**
     * value: "normal"
     * @const
     */
    "normal": "normal"
};



export default InlineResponse2002Systems;

