/**
 * The Enlighten Systems API
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Meta from './Meta';
import MonthlyProductionResponseMeterReadings from './MonthlyProductionResponseMeterReadings';

/**
 * The MonthlyProductionResponse model module.
 * @module model/MonthlyProductionResponse
 * @version 2.0
 */
class MonthlyProductionResponse {
    /**
     * Constructs a new <code>MonthlyProductionResponse</code>.
     * @alias module:model/MonthlyProductionResponse
     * @param systemId {Number} Enlighten ID for this system.
     * @param startDate {Date} First day included in the reporting period. The format is `YYYY-mm-dd` unless you pass a `datetime_format` parameter as described [here](https://developer.enphase.com/docs#Datetimes).
     * @param endDate {Date} Last day included in the reporting period.
     * @param productionWh {Number} Total production for the requested period in Watt-hours.
     * @param meterReadings {Array.<module:model/MonthlyProductionResponseMeterReadings>} If the system has any revenue-grade meters installed, the meter readings at the beginning and end of the reporting period are included here. Otherwise, the array is empty.
     * @param meta {module:model/Meta} 
     */
    constructor(systemId, startDate, endDate, productionWh, meterReadings, meta) { 
        
        MonthlyProductionResponse.initialize(this, systemId, startDate, endDate, productionWh, meterReadings, meta);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, systemId, startDate, endDate, productionWh, meterReadings, meta) { 
        obj['system_id'] = systemId;
        obj['start_date'] = startDate;
        obj['end_date'] = endDate;
        obj['production_wh'] = productionWh;
        obj['meter_readings'] = meterReadings;
        obj['meta'] = meta;
    }

    /**
     * Constructs a <code>MonthlyProductionResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MonthlyProductionResponse} obj Optional instance to populate.
     * @return {module:model/MonthlyProductionResponse} The populated <code>MonthlyProductionResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MonthlyProductionResponse();

            if (data.hasOwnProperty('system_id')) {
                obj['system_id'] = ApiClient.convertToType(data['system_id'], 'Number');
            }
            if (data.hasOwnProperty('start_date')) {
                obj['start_date'] = ApiClient.convertToType(data['start_date'], 'Date');
            }
            if (data.hasOwnProperty('end_date')) {
                obj['end_date'] = ApiClient.convertToType(data['end_date'], 'Date');
            }
            if (data.hasOwnProperty('production_wh')) {
                obj['production_wh'] = ApiClient.convertToType(data['production_wh'], 'Number');
            }
            if (data.hasOwnProperty('meter_readings')) {
                obj['meter_readings'] = ApiClient.convertToType(data['meter_readings'], [MonthlyProductionResponseMeterReadings]);
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = Meta.constructFromObject(data['meta']);
            }
        }
        return obj;
    }


}

/**
 * Enlighten ID for this system.
 * @member {Number} system_id
 */
MonthlyProductionResponse.prototype['system_id'] = undefined;

/**
 * First day included in the reporting period. The format is `YYYY-mm-dd` unless you pass a `datetime_format` parameter as described [here](https://developer.enphase.com/docs#Datetimes).
 * @member {Date} start_date
 */
MonthlyProductionResponse.prototype['start_date'] = undefined;

/**
 * Last day included in the reporting period.
 * @member {Date} end_date
 */
MonthlyProductionResponse.prototype['end_date'] = undefined;

/**
 * Total production for the requested period in Watt-hours.
 * @member {Number} production_wh
 */
MonthlyProductionResponse.prototype['production_wh'] = undefined;

/**
 * If the system has any revenue-grade meters installed, the meter readings at the beginning and end of the reporting period are included here. Otherwise, the array is empty.
 * @member {Array.<module:model/MonthlyProductionResponseMeterReadings>} meter_readings
 */
MonthlyProductionResponse.prototype['meter_readings'] = undefined;

/**
 * @member {module:model/Meta} meta
 */
MonthlyProductionResponse.prototype['meta'] = undefined;






export default MonthlyProductionResponse;

