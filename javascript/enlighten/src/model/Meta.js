/**
 * The Enlighten Systems API
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Status from './Status';

/**
 * The Meta model module.
 * @module model/Meta
 * @version 2.0
 */
class Meta {
    /**
     * Constructs a new <code>Meta</code>.
     * Information about the system that you can use to ascertain the timeliness of the production data included in the response.
     * @alias module:model/Meta
     * @param status {module:model/Status} 
     * @param lastReportAt {Number} 
     * @param lastEnergyAt {Number} 
     * @param operationalAt {Number} 
     */
    constructor(status, lastReportAt, lastEnergyAt, operationalAt) { 
        
        Meta.initialize(this, status, lastReportAt, lastEnergyAt, operationalAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, status, lastReportAt, lastEnergyAt, operationalAt) { 
        obj['status'] = status;
        obj['last_report_at'] = lastReportAt;
        obj['last_energy_at'] = lastEnergyAt;
        obj['operational_at'] = operationalAt;
    }

    /**
     * Constructs a <code>Meta</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Meta} obj Optional instance to populate.
     * @return {module:model/Meta} The populated <code>Meta</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Meta();

            if (data.hasOwnProperty('status')) {
                obj['status'] = Status.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('last_report_at')) {
                obj['last_report_at'] = ApiClient.convertToType(data['last_report_at'], 'Number');
            }
            if (data.hasOwnProperty('last_energy_at')) {
                obj['last_energy_at'] = ApiClient.convertToType(data['last_energy_at'], 'Number');
            }
            if (data.hasOwnProperty('operational_at')) {
                obj['operational_at'] = ApiClient.convertToType(data['operational_at'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Meta</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Meta</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Meta.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

Meta.RequiredProperties = ["status", "last_report_at", "last_energy_at", "operational_at"];

/**
 * @member {module:model/Status} status
 */
Meta.prototype['status'] = undefined;

/**
 * @member {Number} last_report_at
 */
Meta.prototype['last_report_at'] = undefined;

/**
 * @member {Number} last_energy_at
 */
Meta.prototype['last_energy_at'] = undefined;

/**
 * @member {Number} operational_at
 */
Meta.prototype['operational_at'] = undefined;






export default Meta;

