/**
 * The Enlighten Systems API
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConnectionType from './ConnectionType';
import Meta from './Meta';

/**
 * The SystemsResponseSystemsInner model module.
 * @module model/SystemsResponseSystemsInner
 * @version 2.0
 */
class SystemsResponseSystemsInner {
    /**
     * Constructs a new <code>SystemsResponseSystemsInner</code>.
     * @alias module:model/SystemsResponseSystemsInner
     * @param systemId {Number} The Enlighten ID of the system.
     * @param systemName {String} The name of the system. Even if the system owner has indicated their site is anonymous for public lists, the actual system name is returned here for identification purposes.
     * @param systemPublicName {String} The display name of the system. Use this when displaying the system name on a public list or view.
     * @param country {String} The two-letter code for the country where the system is located. See [ISO_3166-1_alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) for reference.
     * @param state {String} The two-letter code for the state where the system is located. See [ISO_3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) for reference.
     * @param city {String} The name of the city where the system is located.
     * @param postalCode {String} The postal code where the system is located.
     * @param timezone {String} The timezone of the system.
     * @param connectionType {module:model/ConnectionType} 
     * @param status {module:model/SystemsResponseSystemsInner.StatusEnum} The current status of the system. You can find this and more in the `meta` property.
     * @param meta {module:model/Meta} 
     */
    constructor(systemId, systemName, systemPublicName, country, state, city, postalCode, timezone, connectionType, status, meta) { 
        
        SystemsResponseSystemsInner.initialize(this, systemId, systemName, systemPublicName, country, state, city, postalCode, timezone, connectionType, status, meta);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, systemId, systemName, systemPublicName, country, state, city, postalCode, timezone, connectionType, status, meta) { 
        obj['system_id'] = systemId;
        obj['system_name'] = systemName;
        obj['system_public_name'] = systemPublicName;
        obj['country'] = country;
        obj['state'] = state;
        obj['city'] = city;
        obj['postal_code'] = postalCode;
        obj['timezone'] = timezone;
        obj['connection_type'] = connectionType;
        obj['status'] = status;
        obj['meta'] = meta;
    }

    /**
     * Constructs a <code>SystemsResponseSystemsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SystemsResponseSystemsInner} obj Optional instance to populate.
     * @return {module:model/SystemsResponseSystemsInner} The populated <code>SystemsResponseSystemsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SystemsResponseSystemsInner();

            if (data.hasOwnProperty('system_id')) {
                obj['system_id'] = ApiClient.convertToType(data['system_id'], 'Number');
            }
            if (data.hasOwnProperty('system_name')) {
                obj['system_name'] = ApiClient.convertToType(data['system_name'], 'String');
            }
            if (data.hasOwnProperty('system_public_name')) {
                obj['system_public_name'] = ApiClient.convertToType(data['system_public_name'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('other_references')) {
                obj['other_references'] = ApiClient.convertToType(data['other_references'], ['String']);
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('postal_code')) {
                obj['postal_code'] = ApiClient.convertToType(data['postal_code'], 'String');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('connection_type')) {
                obj['connection_type'] = ConnectionType.constructFromObject(data['connection_type']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = Meta.constructFromObject(data['meta']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SystemsResponseSystemsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SystemsResponseSystemsInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SystemsResponseSystemsInner.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['system_name'] && !(typeof data['system_name'] === 'string' || data['system_name'] instanceof String)) {
            throw new Error("Expected the field `system_name` to be a primitive type in the JSON string but got " + data['system_name']);
        }
        // ensure the json data is a string
        if (data['system_public_name'] && !(typeof data['system_public_name'] === 'string' || data['system_public_name'] instanceof String)) {
            throw new Error("Expected the field `system_public_name` to be a primitive type in the JSON string but got " + data['system_public_name']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['other_references'])) {
            throw new Error("Expected the field `other_references` to be an array in the JSON data but got " + data['other_references']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['postal_code'] && !(typeof data['postal_code'] === 'string' || data['postal_code'] instanceof String)) {
            throw new Error("Expected the field `postal_code` to be a primitive type in the JSON string but got " + data['postal_code']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `meta`
        if (data['meta']) { // data not null
          Meta.validateJSON(data['meta']);
        }

        return true;
    }


}

SystemsResponseSystemsInner.RequiredProperties = ["system_id", "system_name", "system_public_name", "country", "state", "city", "postal_code", "timezone", "connection_type", "status", "meta"];

/**
 * The Enlighten ID of the system.
 * @member {Number} system_id
 */
SystemsResponseSystemsInner.prototype['system_id'] = undefined;

/**
 * The name of the system. Even if the system owner has indicated their site is anonymous for public lists, the actual system name is returned here for identification purposes.
 * @member {String} system_name
 */
SystemsResponseSystemsInner.prototype['system_name'] = undefined;

/**
 * The display name of the system. Use this when displaying the system name on a public list or view.
 * @member {String} system_public_name
 */
SystemsResponseSystemsInner.prototype['system_public_name'] = undefined;

/**
 * If the calling user belongs to a company and that company has provided its own identifiers for a system, that ID is included here. Otherwise, this attribute is not returned.
 * @member {String} reference
 */
SystemsResponseSystemsInner.prototype['reference'] = undefined;

/**
 * If any other companies have provided their own identifiers for a system, those identifiers are included here. Otherwise, this attribute is not returned.
 * @member {Array.<String>} other_references
 */
SystemsResponseSystemsInner.prototype['other_references'] = undefined;

/**
 * The two-letter code for the country where the system is located. See [ISO_3166-1_alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) for reference.
 * @member {String} country
 */
SystemsResponseSystemsInner.prototype['country'] = undefined;

/**
 * The two-letter code for the state where the system is located. See [ISO_3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) for reference.
 * @member {String} state
 */
SystemsResponseSystemsInner.prototype['state'] = undefined;

/**
 * The name of the city where the system is located.
 * @member {String} city
 */
SystemsResponseSystemsInner.prototype['city'] = undefined;

/**
 * The postal code where the system is located.
 * @member {String} postal_code
 */
SystemsResponseSystemsInner.prototype['postal_code'] = undefined;

/**
 * The timezone of the system.
 * @member {String} timezone
 */
SystemsResponseSystemsInner.prototype['timezone'] = undefined;

/**
 * @member {module:model/ConnectionType} connection_type
 */
SystemsResponseSystemsInner.prototype['connection_type'] = undefined;

/**
 * The current status of the system. You can find this and more in the `meta` property.
 * @member {module:model/SystemsResponseSystemsInner.StatusEnum} status
 */
SystemsResponseSystemsInner.prototype['status'] = undefined;

/**
 * @member {module:model/Meta} meta
 */
SystemsResponseSystemsInner.prototype['meta'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
SystemsResponseSystemsInner['StatusEnum'] = {

    /**
     * value: "comm"
     * @const
     */
    "comm": "comm",

    /**
     * value: "power"
     * @const
     */
    "power": "power",

    /**
     * value: "meter"
     * @const
     */
    "meter": "meter",

    /**
     * value: "meter_issue"
     * @const
     */
    "meter_issue": "meter_issue",

    /**
     * value: "micro"
     * @const
     */
    "micro": "micro",

    /**
     * value: "battery"
     * @const
     */
    "battery": "battery",

    /**
     * value: "storage_idle"
     * @const
     */
    "storage_idle": "storage_idle",

    /**
     * value: "normal"
     * @const
     */
    "normal": "normal"
};



export default SystemsResponseSystemsInner;

