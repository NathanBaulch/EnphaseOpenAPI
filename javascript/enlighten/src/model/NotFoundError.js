/**
 * The Enlighten Systems API
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NotFoundError model module.
 * @module model/NotFoundError
 * @version 2.0
 */
class NotFoundError {
    /**
     * Constructs a new <code>NotFoundError</code>.
     * @alias module:model/NotFoundError
     * @param reason {String} 
     */
    constructor(reason) { 
        
        NotFoundError.initialize(this, reason);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, reason) { 
        obj['reason'] = reason;
    }

    /**
     * Constructs a <code>NotFoundError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotFoundError} obj Optional instance to populate.
     * @return {module:model/NotFoundError} The populated <code>NotFoundError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotFoundError();

            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], ['String']);
            }
            if (data.hasOwnProperty('errorMessages')) {
                obj['errorMessages'] = ApiClient.convertToType(data['errorMessages'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotFoundError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotFoundError</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NotFoundError.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['message'])) {
            throw new Error("Expected the field `message` to be an array in the JSON data but got " + data['message']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['errorMessages'])) {
            throw new Error("Expected the field `errorMessages` to be an array in the JSON data but got " + data['errorMessages']);
        }

        return true;
    }


}

NotFoundError.RequiredProperties = ["reason"];

/**
 * @member {String} reason
 */
NotFoundError.prototype['reason'] = undefined;

/**
 * @member {Array.<String>} message
 */
NotFoundError.prototype['message'] = undefined;

/**
 * @member {Array.<String>} errorMessages
 */
NotFoundError.prototype['errorMessages'] = undefined;






export default NotFoundError;

