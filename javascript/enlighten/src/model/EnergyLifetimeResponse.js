/**
 * The Enlighten Systems API
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Meta from './Meta';

/**
 * The EnergyLifetimeResponse model module.
 * @module model/EnergyLifetimeResponse
 * @version 2.0
 */
class EnergyLifetimeResponse {
    /**
     * Constructs a new <code>EnergyLifetimeResponse</code>.
     * @alias module:model/EnergyLifetimeResponse
     * @param startDate {Date} When no `start_date` parameter is specified on the request, this is the `operational_date` of the system. May be null if system has never produced. When a `start_date` parameter is included in the request, it is included here in the response.
     * @param systemId {Number} The identifier of the system.
     * @param production {Array.<Number>} An array of production measurements, one for each day since the system started producing, or one for each day of the requested period. If the system has never produced energy, the array may be empty.
     * @param meta {module:model/Meta} 
     */
    constructor(startDate, systemId, production, meta) { 
        
        EnergyLifetimeResponse.initialize(this, startDate, systemId, production, meta);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, startDate, systemId, production, meta) { 
        obj['start_date'] = startDate;
        obj['system_id'] = systemId;
        obj['production'] = production;
        obj['meta'] = meta;
    }

    /**
     * Constructs a <code>EnergyLifetimeResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EnergyLifetimeResponse} obj Optional instance to populate.
     * @return {module:model/EnergyLifetimeResponse} The populated <code>EnergyLifetimeResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EnergyLifetimeResponse();

            if (data.hasOwnProperty('start_date')) {
                obj['start_date'] = ApiClient.convertToType(data['start_date'], 'Date');
            }
            if (data.hasOwnProperty('system_id')) {
                obj['system_id'] = ApiClient.convertToType(data['system_id'], 'Number');
            }
            if (data.hasOwnProperty('production')) {
                obj['production'] = ApiClient.convertToType(data['production'], ['Number']);
            }
            if (data.hasOwnProperty('micro_production')) {
                obj['micro_production'] = ApiClient.convertToType(data['micro_production'], ['Number']);
            }
            if (data.hasOwnProperty('meter_production')) {
                obj['meter_production'] = ApiClient.convertToType(data['meter_production'], ['Number']);
            }
            if (data.hasOwnProperty('meter_start_date')) {
                obj['meter_start_date'] = ApiClient.convertToType(data['meter_start_date'], 'Date');
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = Meta.constructFromObject(data['meta']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EnergyLifetimeResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EnergyLifetimeResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EnergyLifetimeResponse.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['production'])) {
            throw new Error("Expected the field `production` to be an array in the JSON data but got " + data['production']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['micro_production'])) {
            throw new Error("Expected the field `micro_production` to be an array in the JSON data but got " + data['micro_production']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['meter_production'])) {
            throw new Error("Expected the field `meter_production` to be an array in the JSON data but got " + data['meter_production']);
        }
        // validate the optional field `meta`
        if (data['meta']) { // data not null
          Meta.validateJSON(data['meta']);
        }

        return true;
    }


}

EnergyLifetimeResponse.RequiredProperties = ["start_date", "system_id", "production", "meta"];

/**
 * When no `start_date` parameter is specified on the request, this is the `operational_date` of the system. May be null if system has never produced. When a `start_date` parameter is included in the request, it is included here in the response.
 * @member {Date} start_date
 */
EnergyLifetimeResponse.prototype['start_date'] = undefined;

/**
 * The identifier of the system.
 * @member {Number} system_id
 */
EnergyLifetimeResponse.prototype['system_id'] = undefined;

/**
 * An array of production measurements, one for each day since the system started producing, or one for each day of the requested period. If the system has never produced energy, the array may be empty.
 * @member {Array.<Number>} production
 */
EnergyLifetimeResponse.prototype['production'] = undefined;

/**
 * @member {Array.<Number>} micro_production
 */
EnergyLifetimeResponse.prototype['micro_production'] = undefined;

/**
 * @member {Array.<Number>} meter_production
 */
EnergyLifetimeResponse.prototype['meter_production'] = undefined;

/**
 * The first day in the time series when measurements are taken from a meter instead of from microinverters. This field is not present unless the system has a meter.
 * @member {Date} meter_start_date
 */
EnergyLifetimeResponse.prototype['meter_start_date'] = undefined;

/**
 * @member {module:model/Meta} meta
 */
EnergyLifetimeResponse.prototype['meta'] = undefined;






export default EnergyLifetimeResponse;

