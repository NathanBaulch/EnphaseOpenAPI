/**
 * The Enlighten Systems API
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Meta from './Meta';
import ProductionMeterReadingsResponseMeterReadingsInner from './ProductionMeterReadingsResponseMeterReadingsInner';

/**
 * The ProductionMeterReadingsResponse model module.
 * @module model/ProductionMeterReadingsResponse
 * @version 2.0
 */
class ProductionMeterReadingsResponse {
    /**
     * Constructs a new <code>ProductionMeterReadingsResponse</code>.
     * @alias module:model/ProductionMeterReadingsResponse
     * @param systemId {Number} 
     * @param meterReadings {Array.<module:model/ProductionMeterReadingsResponseMeterReadingsInner>} 
     * @param meta {module:model/Meta} 
     */
    constructor(systemId, meterReadings, meta) { 
        
        ProductionMeterReadingsResponse.initialize(this, systemId, meterReadings, meta);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, systemId, meterReadings, meta) { 
        obj['system_id'] = systemId;
        obj['meter_readings'] = meterReadings;
        obj['meta'] = meta;
    }

    /**
     * Constructs a <code>ProductionMeterReadingsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductionMeterReadingsResponse} obj Optional instance to populate.
     * @return {module:model/ProductionMeterReadingsResponse} The populated <code>ProductionMeterReadingsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductionMeterReadingsResponse();

            if (data.hasOwnProperty('system_id')) {
                obj['system_id'] = ApiClient.convertToType(data['system_id'], 'Number');
            }
            if (data.hasOwnProperty('meter_readings')) {
                obj['meter_readings'] = ApiClient.convertToType(data['meter_readings'], [ProductionMeterReadingsResponseMeterReadingsInner]);
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = Meta.constructFromObject(data['meta']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductionMeterReadingsResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductionMeterReadingsResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProductionMeterReadingsResponse.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['meter_readings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['meter_readings'])) {
                throw new Error("Expected the field `meter_readings` to be an array in the JSON data but got " + data['meter_readings']);
            }
            // validate the optional field `meter_readings` (array)
            for (const item of data['meter_readings']) {
                ProductionMeterReadingsResponseMeterReadingsInner.validateJSON(item);
            };
        }
        // validate the optional field `meta`
        if (data['meta']) { // data not null
          Meta.validateJSON(data['meta']);
        }

        return true;
    }


}

ProductionMeterReadingsResponse.RequiredProperties = ["system_id", "meter_readings", "meta"];

/**
 * @member {Number} system_id
 */
ProductionMeterReadingsResponse.prototype['system_id'] = undefined;

/**
 * @member {Array.<module:model/ProductionMeterReadingsResponseMeterReadingsInner>} meter_readings
 */
ProductionMeterReadingsResponse.prototype['meter_readings'] = undefined;

/**
 * @member {module:model/Meta} meta
 */
ProductionMeterReadingsResponse.prototype['meta'] = undefined;






export default ProductionMeterReadingsResponse;

