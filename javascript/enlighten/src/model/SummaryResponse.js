/**
 * The Enlighten Systems API
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Status from './Status';

/**
 * The SummaryResponse model module.
 * @module model/SummaryResponse
 * @version 2.0
 */
class SummaryResponse {
    /**
     * Constructs a new <code>SummaryResponse</code>.
     * @alias module:model/SummaryResponse
     * @param currentPower {Number} Current power production, in Watts. For historical requests, returns 0.
     * @param energyLifetime {Number} Energy produced in the lifetime of the system, excluding the requested day, in Watt-hours.
     * @param energyToday {Number} Energy produced on the requested day, in Watt-hours.
     * @param lastIntervalEndAt {Number} The last known time that the system produced energy. When a system has not been communicating for a length of time, the `last_report_at` can be recent, whereas the `last_interval_end_at` may be further back.
     * @param lastReportAt {Number} The last time an Envoy on this system reported. The format is Unix epoch time unless you pass a `datetime_format` parameter as described [here](https://developer.enphase.com/docs#Datetimes).
     * @param modules {Number} Number of active (not retired) modules. For historical requests, returns 0.
     * @param operationalAt {Number} The time at which this system became operational. Corresponds to the system's interconnect time, if one is specified. Otherwise, it is the system's first interval end time. The format is Unix epoch time unless you pass a `datetime_format` parameter as described [here](https://developer.enphase.com/docs#Datetimes).
     * @param sizeW {Number} The size of the system, in Watts. For historical requests, returns 0.
     * @param source {module:model/SummaryResponse.SourceEnum} Indicates whether the production of this system is measured by its microinverters (`microinverters`) or by revenue-grade meters (`meter`) installed on the system.
     * @param status {module:model/Status} 
     * @param summaryDate {Date} Effective date of the response. For historical requests, returns the date requested. For current requests, returns the current date. The format is `YYYY-mm-dd` unless you pass a `datetime_format` parameter as described [here](https://developer.enphase.com/docs#Datetimes).
     * @param systemId {Number} The Enlighten ID of the system.
     */
    constructor(currentPower, energyLifetime, energyToday, lastIntervalEndAt, lastReportAt, modules, operationalAt, sizeW, source, status, summaryDate, systemId) { 
        
        SummaryResponse.initialize(this, currentPower, energyLifetime, energyToday, lastIntervalEndAt, lastReportAt, modules, operationalAt, sizeW, source, status, summaryDate, systemId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currentPower, energyLifetime, energyToday, lastIntervalEndAt, lastReportAt, modules, operationalAt, sizeW, source, status, summaryDate, systemId) { 
        obj['current_power'] = currentPower;
        obj['energy_lifetime'] = energyLifetime;
        obj['energy_today'] = energyToday;
        obj['last_interval_end_at'] = lastIntervalEndAt;
        obj['last_report_at'] = lastReportAt;
        obj['modules'] = modules;
        obj['operational_at'] = operationalAt;
        obj['size_w'] = sizeW;
        obj['source'] = source;
        obj['status'] = status;
        obj['summary_date'] = summaryDate;
        obj['system_id'] = systemId;
    }

    /**
     * Constructs a <code>SummaryResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SummaryResponse} obj Optional instance to populate.
     * @return {module:model/SummaryResponse} The populated <code>SummaryResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SummaryResponse();

            if (data.hasOwnProperty('current_power')) {
                obj['current_power'] = ApiClient.convertToType(data['current_power'], 'Number');
            }
            if (data.hasOwnProperty('energy_lifetime')) {
                obj['energy_lifetime'] = ApiClient.convertToType(data['energy_lifetime'], 'Number');
            }
            if (data.hasOwnProperty('energy_today')) {
                obj['energy_today'] = ApiClient.convertToType(data['energy_today'], 'Number');
            }
            if (data.hasOwnProperty('last_interval_end_at')) {
                obj['last_interval_end_at'] = ApiClient.convertToType(data['last_interval_end_at'], 'Number');
            }
            if (data.hasOwnProperty('last_report_at')) {
                obj['last_report_at'] = ApiClient.convertToType(data['last_report_at'], 'Number');
            }
            if (data.hasOwnProperty('modules')) {
                obj['modules'] = ApiClient.convertToType(data['modules'], 'Number');
            }
            if (data.hasOwnProperty('operational_at')) {
                obj['operational_at'] = ApiClient.convertToType(data['operational_at'], 'Number');
            }
            if (data.hasOwnProperty('size_w')) {
                obj['size_w'] = ApiClient.convertToType(data['size_w'], 'Number');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = Status.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('summary_date')) {
                obj['summary_date'] = ApiClient.convertToType(data['summary_date'], 'Date');
            }
            if (data.hasOwnProperty('system_id')) {
                obj['system_id'] = ApiClient.convertToType(data['system_id'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Current power production, in Watts. For historical requests, returns 0.
 * @member {Number} current_power
 */
SummaryResponse.prototype['current_power'] = undefined;

/**
 * Energy produced in the lifetime of the system, excluding the requested day, in Watt-hours.
 * @member {Number} energy_lifetime
 */
SummaryResponse.prototype['energy_lifetime'] = undefined;

/**
 * Energy produced on the requested day, in Watt-hours.
 * @member {Number} energy_today
 */
SummaryResponse.prototype['energy_today'] = undefined;

/**
 * The last known time that the system produced energy. When a system has not been communicating for a length of time, the `last_report_at` can be recent, whereas the `last_interval_end_at` may be further back.
 * @member {Number} last_interval_end_at
 */
SummaryResponse.prototype['last_interval_end_at'] = undefined;

/**
 * The last time an Envoy on this system reported. The format is Unix epoch time unless you pass a `datetime_format` parameter as described [here](https://developer.enphase.com/docs#Datetimes).
 * @member {Number} last_report_at
 */
SummaryResponse.prototype['last_report_at'] = undefined;

/**
 * Number of active (not retired) modules. For historical requests, returns 0.
 * @member {Number} modules
 */
SummaryResponse.prototype['modules'] = undefined;

/**
 * The time at which this system became operational. Corresponds to the system's interconnect time, if one is specified. Otherwise, it is the system's first interval end time. The format is Unix epoch time unless you pass a `datetime_format` parameter as described [here](https://developer.enphase.com/docs#Datetimes).
 * @member {Number} operational_at
 */
SummaryResponse.prototype['operational_at'] = undefined;

/**
 * The size of the system, in Watts. For historical requests, returns 0.
 * @member {Number} size_w
 */
SummaryResponse.prototype['size_w'] = undefined;

/**
 * Indicates whether the production of this system is measured by its microinverters (`microinverters`) or by revenue-grade meters (`meter`) installed on the system.
 * @member {module:model/SummaryResponse.SourceEnum} source
 */
SummaryResponse.prototype['source'] = undefined;

/**
 * @member {module:model/Status} status
 */
SummaryResponse.prototype['status'] = undefined;

/**
 * Effective date of the response. For historical requests, returns the date requested. For current requests, returns the current date. The format is `YYYY-mm-dd` unless you pass a `datetime_format` parameter as described [here](https://developer.enphase.com/docs#Datetimes).
 * @member {Date} summary_date
 */
SummaryResponse.prototype['summary_date'] = undefined;

/**
 * The Enlighten ID of the system.
 * @member {Number} system_id
 */
SummaryResponse.prototype['system_id'] = undefined;





/**
 * Allowed values for the <code>source</code> property.
 * @enum {String}
 * @readonly
 */
SummaryResponse['SourceEnum'] = {

    /**
     * value: "microinverters"
     * @const
     */
    "microinverters": "microinverters",

    /**
     * value: "meter"
     * @const
     */
    "meter": "meter"
};



export default SummaryResponse;

