/**
 * The Enphase Commissioning API
 * Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SystemParamsAddress model module.
 * @module model/SystemParamsAddress
 * @version 4.0
 */
class SystemParamsAddress {
    /**
     * Constructs a new <code>SystemParamsAddress</code>.
     * Location of the system. Use the ISO 3166-1 2-letter code for the country. Latitude and longitude are calculated by Enlighten, not provided by the client.
     * @alias module:model/SystemParamsAddress
     * @param street1 {String} 
     * @param city {String} 
     * @param state {String} 
     * @param country {String} 
     * @param postalCode {String} 
     */
    constructor(street1, city, state, country, postalCode) { 
        
        SystemParamsAddress.initialize(this, street1, city, state, country, postalCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, street1, city, state, country, postalCode) { 
        obj['street1'] = street1;
        obj['city'] = city;
        obj['state'] = state;
        obj['country'] = country;
        obj['postal_code'] = postalCode;
    }

    /**
     * Constructs a <code>SystemParamsAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SystemParamsAddress} obj Optional instance to populate.
     * @return {module:model/SystemParamsAddress} The populated <code>SystemParamsAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SystemParamsAddress();

            if (data.hasOwnProperty('street1')) {
                obj['street1'] = ApiClient.convertToType(data['street1'], 'String');
            }
            if (data.hasOwnProperty('street2')) {
                obj['street2'] = ApiClient.convertToType(data['street2'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('postal_code')) {
                obj['postal_code'] = ApiClient.convertToType(data['postal_code'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SystemParamsAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SystemParamsAddress</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SystemParamsAddress.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['street1'] && !(typeof data['street1'] === 'string' || data['street1'] instanceof String)) {
            throw new Error("Expected the field `street1` to be a primitive type in the JSON string but got " + data['street1']);
        }
        // ensure the json data is a string
        if (data['street2'] && !(typeof data['street2'] === 'string' || data['street2'] instanceof String)) {
            throw new Error("Expected the field `street2` to be a primitive type in the JSON string but got " + data['street2']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['postal_code'] && !(typeof data['postal_code'] === 'string' || data['postal_code'] instanceof String)) {
            throw new Error("Expected the field `postal_code` to be a primitive type in the JSON string but got " + data['postal_code']);
        }

        return true;
    }


}

SystemParamsAddress.RequiredProperties = ["street1", "city", "state", "country", "postal_code"];

/**
 * @member {String} street1
 */
SystemParamsAddress.prototype['street1'] = undefined;

/**
 * @member {String} street2
 */
SystemParamsAddress.prototype['street2'] = undefined;

/**
 * @member {String} city
 */
SystemParamsAddress.prototype['city'] = undefined;

/**
 * @member {String} state
 */
SystemParamsAddress.prototype['state'] = undefined;

/**
 * @member {String} country
 */
SystemParamsAddress.prototype['country'] = undefined;

/**
 * @member {String} postal_code
 */
SystemParamsAddress.prototype['postal_code'] = undefined;






export default SystemParamsAddress;

