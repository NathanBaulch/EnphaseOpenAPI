/**
 * The Enphase Commissioning API
 * Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Company from './Company';
import UserRoleEnum from './UserRoleEnum';

/**
 * The User model module.
 * @module model/User
 * @version 4.0
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * @alias module:model/User
     */
    constructor() { 
        
        User.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('user_roles')) {
                obj['user_roles'] = ApiClient.convertToType(data['user_roles'], [UserRoleEnum]);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('enlighten_emails')) {
                obj['enlighten_emails'] = ApiClient.convertToType(data['enlighten_emails'], 'Boolean');
            }
            if (data.hasOwnProperty('enlighten_view')) {
                obj['enlighten_view'] = ApiClient.convertToType(data['enlighten_view'], 'String');
            }
            if (data.hasOwnProperty('first_name')) {
                obj['first_name'] = ApiClient.convertToType(data['first_name'], 'String');
            }
            if (data.hasOwnProperty('last_name')) {
                obj['last_name'] = ApiClient.convertToType(data['last_name'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'Number');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Number');
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = Company.constructFromObject(data['company']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['user_roles'])) {
            throw new Error("Expected the field `user_roles` to be an array in the JSON data but got " + data['user_roles']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['enlighten_view'] && !(typeof data['enlighten_view'] === 'string' || data['enlighten_view'] instanceof String)) {
            throw new Error("Expected the field `enlighten_view` to be a primitive type in the JSON string but got " + data['enlighten_view']);
        }
        // ensure the json data is a string
        if (data['first_name'] && !(typeof data['first_name'] === 'string' || data['first_name'] instanceof String)) {
            throw new Error("Expected the field `first_name` to be a primitive type in the JSON string but got " + data['first_name']);
        }
        // ensure the json data is a string
        if (data['last_name'] && !(typeof data['last_name'] === 'string' || data['last_name'] instanceof String)) {
            throw new Error("Expected the field `last_name` to be a primitive type in the JSON string but got " + data['last_name']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }
        // validate the optional field `company`
        if (data['company']) { // data not null
          Company.validateJSON(data['company']);
        }

        return true;
    }


}



/**
 * Whether the user is allowed to log in to Enlighten.
 * @member {Boolean} active
 */
User.prototype['active'] = undefined;

/**
 * What type of user this is in Enlighten. For self installer user user_roles will be ['self_installer']. For other users user_roles will be empty.
 * @member {Array.<module:model/UserRoleEnum>} user_roles
 */
User.prototype['user_roles'] = undefined;

/**
 * Email address of the user.
 * @member {String} email
 */
User.prototype['email'] = undefined;

/**
 * Whether the user receives automated emails from Enlighten.
 * @member {Boolean} enlighten_emails
 */
User.prototype['enlighten_emails'] = undefined;

/**
 * Which view of Enlighten the user has.
 * @member {String} enlighten_view
 */
User.prototype['enlighten_view'] = undefined;

/**
 * User's first name.
 * @member {String} first_name
 */
User.prototype['first_name'] = undefined;

/**
 * User's last name.
 * @member {String} last_name
 */
User.prototype['last_name'] = undefined;

/**
 * Telephone number of the user.
 * @member {String} phone
 */
User.prototype['phone'] = undefined;

/**
 * URI to the show() method for the user. System-generated.
 * @member {String} uri
 */
User.prototype['uri'] = undefined;

/**
 * Enlighten ID of the user. System-generated.
 * @member {Number} user_id
 */
User.prototype['user_id'] = undefined;

/**
 * Last updated date and time in Epoch format.
 * @member {Number} updated_at
 */
User.prototype['updated_at'] = undefined;

/**
 * @member {module:model/Company} company
 */
User.prototype['company'] = undefined;






export default User;

