/**
 * The Enphase Commissioning API
 * Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ArrayParams from '../model/ArrayParams';
import DeleteSystemArrayResponse from '../model/DeleteSystemArrayResponse';
import ServerError from '../model/ServerError';
import SystemArray from '../model/SystemArray';
import SystemArrays from '../model/SystemArrays';
import TooManyRequestsError from '../model/TooManyRequestsError';
import UnprocessableEntityError from '../model/UnprocessableEntityError';
import UpdateSystemArraysRequest from '../model/UpdateSystemArraysRequest';

/**
* Arrays service.
* @module api/ArraysApi
* @version 4.0
*/
export default class ArraysApi {

    /**
    * Constructs a new ArraysApi. 
    * @alias module:api/ArraysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete an array by ID
     * Delete an array by ID.
     * @param {Number} systemId System ID.
     * @param {Number} arrayId Array ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteSystemArrayResponse} and HTTP response
     */
    deleteSystemArrayWithHttpInfo(systemId, arrayId) {
      let postBody = null;
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling deleteSystemArray");
      }
      // verify the required parameter 'arrayId' is set
      if (arrayId === undefined || arrayId === null) {
        throw new Error("Missing the required parameter 'arrayId' when calling deleteSystemArray");
      }

      let pathParams = {
        'system_id': systemId,
        'array_id': arrayId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteSystemArrayResponse;
      return this.apiClient.callApi(
        '/partner/systems/{system_id}/arrays/{array_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an array by ID
     * Delete an array by ID.
     * @param {Number} systemId System ID.
     * @param {Number} arrayId Array ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteSystemArrayResponse}
     */
    deleteSystemArray(systemId, arrayId) {
      return this.deleteSystemArrayWithHttpInfo(systemId, arrayId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch array details by ID
     * Fetch array details by ID.
     * @param {Number} systemId System ID.
     * @param {Number} arrayId Array ID. If an empty value is passed in the Array ID, this endpoint behaves as 'Fetch particular system Array details' endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SystemArray} and HTTP response
     */
    getSystemArrayWithHttpInfo(systemId, arrayId) {
      let postBody = null;
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling getSystemArray");
      }
      // verify the required parameter 'arrayId' is set
      if (arrayId === undefined || arrayId === null) {
        throw new Error("Missing the required parameter 'arrayId' when calling getSystemArray");
      }

      let pathParams = {
        'system_id': systemId,
        'array_id': arrayId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SystemArray;
      return this.apiClient.callApi(
        '/partner/systems/{system_id}/arrays/{array_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch array details by ID
     * Fetch array details by ID.
     * @param {Number} systemId System ID.
     * @param {Number} arrayId Array ID. If an empty value is passed in the Array ID, this endpoint behaves as 'Fetch particular system Array details' endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SystemArray}
     */
    getSystemArray(systemId, arrayId) {
      return this.getSystemArrayWithHttpInfo(systemId, arrayId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch particular system Array details
     * Fetch particular system Array details.
     * @param {Number} systemId System ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SystemArrays} and HTTP response
     */
    getSystemArraysWithHttpInfo(systemId) {
      let postBody = null;
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling getSystemArrays");
      }

      let pathParams = {
        'system_id': systemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SystemArrays;
      return this.apiClient.callApi(
        '/partner/systems/{system_id}/arrays', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch particular system Array details
     * Fetch particular system Array details.
     * @param {Number} systemId System ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SystemArrays}
     */
    getSystemArrays(systemId) {
      return this.getSystemArraysWithHttpInfo(systemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update particular system array details
     * Update particular system array details. The angle, left, and top fields in the request parameter must be of integer type. Enlighten will rearrange the top and left values of the modules to fit the modules properly and avoid overlap. Therefore, the top and left values in the response may be slightly different from the top and left values passed in the request parameters. In array level, top and left is the total size of the modules inside that array. Overall in arrays, the top and left values should not overlap. In the module level, the size of a panel is 100 units long in the x axis and 200 units long in the y axis. Please pass the left and top values in the request parameter in multiples of 100 and 200 respectively.
     * @param {Number} systemId System ID.
     * @param {Number} arrayId Array ID. If an empty value is passed in the Array ID, this endpoint behaves as 'Update all Arrays' endpoint.
     * @param {Object} opts Optional parameters
     * @param {module:model/ArrayParams} [params] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SystemArray} and HTTP response
     */
    updateSystemArrayWithHttpInfo(systemId, arrayId, opts) {
      opts = opts || {};
      let postBody = opts['params'];
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling updateSystemArray");
      }
      // verify the required parameter 'arrayId' is set
      if (arrayId === undefined || arrayId === null) {
        throw new Error("Missing the required parameter 'arrayId' when calling updateSystemArray");
      }

      let pathParams = {
        'system_id': systemId,
        'array_id': arrayId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = ['application/text'];
      let accepts = ['application/json'];
      let returnType = SystemArray;
      return this.apiClient.callApi(
        '/partner/systems/{system_id}/arrays/{array_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update particular system array details
     * Update particular system array details. The angle, left, and top fields in the request parameter must be of integer type. Enlighten will rearrange the top and left values of the modules to fit the modules properly and avoid overlap. Therefore, the top and left values in the response may be slightly different from the top and left values passed in the request parameters. In array level, top and left is the total size of the modules inside that array. Overall in arrays, the top and left values should not overlap. In the module level, the size of a panel is 100 units long in the x axis and 200 units long in the y axis. Please pass the left and top values in the request parameter in multiples of 100 and 200 respectively.
     * @param {Number} systemId System ID.
     * @param {Number} arrayId Array ID. If an empty value is passed in the Array ID, this endpoint behaves as 'Update all Arrays' endpoint.
     * @param {Object} opts Optional parameters
     * @param {module:model/ArrayParams} opts.params 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SystemArray}
     */
    updateSystemArray(systemId, arrayId, opts) {
      return this.updateSystemArrayWithHttpInfo(systemId, arrayId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update all arrays for system
     * Update all arrays for system. The angle, left, and top fields in the request parameter must be of integer type. Enlighten will rearrange the top and left values of the modules to fit the modules properly and avoid overlap. Therefore, the top and left values in the response may be slightly different from the top and left values passed in the request parameters. In array level, top and left is the total size of the modules inside that array. Overall the arrays top and left values should not overlap. In the module level, the size of a panel is 100 units long in the x axis and 200 units long in the y axis. Please pass the left and top values in the request parameter in multiples of 100 and 200 respectively.
     * @param {Number} systemId System ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateSystemArraysRequest} [params] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SystemArrays} and HTTP response
     */
    updateSystemArraysWithHttpInfo(systemId, opts) {
      opts = opts || {};
      let postBody = opts['params'];
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling updateSystemArrays");
      }

      let pathParams = {
        'system_id': systemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = ['application/text'];
      let accepts = ['application/json'];
      let returnType = SystemArrays;
      return this.apiClient.callApi(
        '/partner/systems/{system_id}/arrays', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update all arrays for system
     * Update all arrays for system. The angle, left, and top fields in the request parameter must be of integer type. Enlighten will rearrange the top and left values of the modules to fit the modules properly and avoid overlap. Therefore, the top and left values in the response may be slightly different from the top and left values passed in the request parameters. In array level, top and left is the total size of the modules inside that array. Overall the arrays top and left values should not overlap. In the module level, the size of a panel is 100 units long in the x axis and 200 units long in the y axis. Please pass the left and top values in the request parameter in multiples of 100 and 200 respectively.
     * @param {Number} systemId System ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateSystemArraysRequest} opts.params 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SystemArrays}
     */
    updateSystemArrays(systemId, opts) {
      return this.updateSystemArraysWithHttpInfo(systemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
