/**
 * The Enphase Commissioning API
 * Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetSystemMeterResponse from '../model/GetSystemMeterResponse';
import ServerError from '../model/ServerError';
import SetActivationMeterStatusRequest from '../model/SetActivationMeterStatusRequest';
import SetActivationMeterStatusResponse from '../model/SetActivationMeterStatusResponse';
import TooManyRequestsError from '../model/TooManyRequestsError';
import UnprocessableEntityError from '../model/UnprocessableEntityError';
import UpdateSystemMeterResponse from '../model/UpdateSystemMeterResponse';

/**
* Meters service.
* @module api/MetersApi
* @version 4.0
*/
export default class MetersApi {

    /**
    * Constructs a new MetersApi. 
    * @alias module:api/MetersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns the requested meter detail.
     * Returns the requested meter by serial number. You must have access to the requested system and meter; otherwise a 401 is returned.
     * @param {Number} systemId System ID.
     * @param {String} serialNumber Meter serial number.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSystemMeterResponse} and HTTP response
     */
    getSystemMeterWithHttpInfo(systemId, serialNumber) {
      let postBody = null;
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling getSystemMeter");
      }
      // verify the required parameter 'serialNumber' is set
      if (serialNumber === undefined || serialNumber === null) {
        throw new Error("Missing the required parameter 'serialNumber' when calling getSystemMeter");
      }

      let pathParams = {
        'system_id': systemId,
        'serial_number': serialNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSystemMeterResponse;
      return this.apiClient.callApi(
        '/systems/{system_id}/meters/{serial_number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns the requested meter detail.
     * Returns the requested meter by serial number. You must have access to the requested system and meter; otherwise a 401 is returned.
     * @param {Number} systemId System ID.
     * @param {String} serialNumber Meter serial number.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSystemMeterResponse}
     */
    getSystemMeter(systemId, serialNumber) {
      return this.getSystemMeterWithHttpInfo(systemId, serialNumber)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Enable or Disable the meters.
     * Enable or Disable the meters. You must have access to the requested system and meter; otherwise a 401 is returned.
     * @param {Number} activationId Activation ID.
     * @param {String} serialNumber Meter serial number.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetActivationMeterStatusRequest} [params] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SetActivationMeterStatusResponse} and HTTP response
     */
    setActivationMeterStatusWithHttpInfo(activationId, serialNumber, opts) {
      opts = opts || {};
      let postBody = opts['params'];
      // verify the required parameter 'activationId' is set
      if (activationId === undefined || activationId === null) {
        throw new Error("Missing the required parameter 'activationId' when calling setActivationMeterStatus");
      }
      // verify the required parameter 'serialNumber' is set
      if (serialNumber === undefined || serialNumber === null) {
        throw new Error("Missing the required parameter 'serialNumber' when calling setActivationMeterStatus");
      }

      let pathParams = {
        'activation_id': activationId,
        'serial_number': serialNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SetActivationMeterStatusResponse;
      return this.apiClient.callApi(
        '/activations/{activation_id}/meters/{serial_number}/meter_control', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Enable or Disable the meters.
     * Enable or Disable the meters. You must have access to the requested system and meter; otherwise a 401 is returned.
     * @param {Number} activationId Activation ID.
     * @param {String} serialNumber Meter serial number.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetActivationMeterStatusRequest} opts.params 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SetActivationMeterStatusResponse}
     */
    setActivationMeterStatus(activationId, serialNumber, opts) {
      return this.setActivationMeterStatusWithHttpInfo(activationId, serialNumber, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update the operational date of a meter by serial number.
     * Update the operational date of a meter. You must have access to the requested system and meter; otherwise a 401 is returned.
     * @param {Number} systemId System ID.
     * @param {String} serialNumber Meter serial number.
     * @param {Object} opts Optional parameters
     * @param {Date} [operationalDate] Operational date in the following format YYYY-MM-DD.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateSystemMeterResponse} and HTTP response
     */
    updateSystemMeterWithHttpInfo(systemId, serialNumber, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling updateSystemMeter");
      }
      // verify the required parameter 'serialNumber' is set
      if (serialNumber === undefined || serialNumber === null) {
        throw new Error("Missing the required parameter 'serialNumber' when calling updateSystemMeter");
      }

      let pathParams = {
        'system_id': systemId,
        'serial_number': serialNumber
      };
      let queryParams = {
        'operational_date': opts['operationalDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UpdateSystemMeterResponse;
      return this.apiClient.callApi(
        '/systems/{system_id}/meters/{serial_number}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update the operational date of a meter by serial number.
     * Update the operational date of a meter. You must have access to the requested system and meter; otherwise a 401 is returned.
     * @param {Number} systemId System ID.
     * @param {String} serialNumber Meter serial number.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.operationalDate Operational date in the following format YYYY-MM-DD.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateSystemMeterResponse}
     */
    updateSystemMeter(systemId, serialNumber, opts) {
      return this.updateSystemMeterWithHttpInfo(systemId, serialNumber, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
