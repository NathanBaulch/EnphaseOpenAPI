<?php
/**
 * SystemParams
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EnphaseOpenAPI\Commissioning
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Enphase Commissioning API
 *
 * Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EnphaseOpenAPI\Commissioning\Model;

use \ArrayAccess;
use \EnphaseOpenAPI\Commissioning\ObjectSerializer;

/**
 * SystemParams Class Doc Comment
 *
 * @category Class
 * @package  EnphaseOpenAPI\Commissioning
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SystemParams implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SystemParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'system_name' => 'string',
        'system_type' => '\EnphaseOpenAPI\Commissioning\Model\SystemTypeEnum',
        'internet_connection' => '\EnphaseOpenAPI\Commissioning\Model\SystemInternetConnectionEnum',
        'lease' => 'bool',
        'operational' => 'bool',
        'owner_id' => 'int',
        'host_id' => 'int',
        'installer_id' => 'int',
        'allow_public_access' => 'bool',
        'interconnect_date' => '\DateTime',
        'source' => '\EnphaseOpenAPI\Commissioning\Model\SystemSourceEnum',
        'array_type' => '\EnphaseOpenAPI\Commissioning\Model\SystemArrayTypeEnum',
        'attachment_type' => '\EnphaseOpenAPI\Commissioning\Model\SystemAttachmentTypeEnum',
        'ensemble_envoy' => 'string',
        'grid_profile' => 'string',
        'requested_profile' => 'string',
        'requested_report_freq' => 'string',
        'voltage' => 'string',
        'envoy_serial_numbers' => 'string[]',
        'pv_manufacturer' => 'int',
        'pv_manufacturer_name' => 'string',
        'pv_model' => 'int',
        'pv_model_name' => 'string',
        'pv_module_power_rating' => 'float',
        'pv_module_type' => 'int',
        'expected_envoy_count' => 'int',
        'expected_pcu_count' => 'int',
        'expected_acb_count' => 'int',
        'expected_nsr_count' => 'int',
        'expected_meter_count' => 'int',
        'expected_encharge_count' => 'int',
        'expected_enpower_count' => 'int',
        'reference' => 'string',
        'encharge' => '\EnphaseOpenAPI\Commissioning\Model\SystemParamsEnchargeInner[]',
        'enpower' => '\EnphaseOpenAPI\Commissioning\Model\SystemParamsEnpowerInner[]',
        'address' => '\EnphaseOpenAPI\Commissioning\Model\SystemParamsAddress'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'system_name' => null,
        'system_type' => null,
        'internet_connection' => null,
        'lease' => null,
        'operational' => null,
        'owner_id' => null,
        'host_id' => null,
        'installer_id' => null,
        'allow_public_access' => null,
        'interconnect_date' => 'date',
        'source' => null,
        'array_type' => null,
        'attachment_type' => null,
        'ensemble_envoy' => null,
        'grid_profile' => null,
        'requested_profile' => null,
        'requested_report_freq' => null,
        'voltage' => null,
        'envoy_serial_numbers' => null,
        'pv_manufacturer' => null,
        'pv_manufacturer_name' => null,
        'pv_model' => null,
        'pv_model_name' => null,
        'pv_module_power_rating' => 'float',
        'pv_module_type' => null,
        'expected_envoy_count' => null,
        'expected_pcu_count' => null,
        'expected_acb_count' => null,
        'expected_nsr_count' => null,
        'expected_meter_count' => null,
        'expected_encharge_count' => null,
        'expected_enpower_count' => null,
        'reference' => null,
        'encharge' => null,
        'enpower' => null,
        'address' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'system_name' => false,
		'system_type' => false,
		'internet_connection' => false,
		'lease' => false,
		'operational' => false,
		'owner_id' => false,
		'host_id' => false,
		'installer_id' => false,
		'allow_public_access' => false,
		'interconnect_date' => false,
		'source' => false,
		'array_type' => false,
		'attachment_type' => false,
		'ensemble_envoy' => false,
		'grid_profile' => false,
		'requested_profile' => false,
		'requested_report_freq' => false,
		'voltage' => false,
		'envoy_serial_numbers' => false,
		'pv_manufacturer' => false,
		'pv_manufacturer_name' => false,
		'pv_model' => false,
		'pv_model_name' => false,
		'pv_module_power_rating' => false,
		'pv_module_type' => false,
		'expected_envoy_count' => false,
		'expected_pcu_count' => false,
		'expected_acb_count' => false,
		'expected_nsr_count' => false,
		'expected_meter_count' => false,
		'expected_encharge_count' => false,
		'expected_enpower_count' => false,
		'reference' => false,
		'encharge' => false,
		'enpower' => false,
		'address' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'system_name' => 'system_name',
        'system_type' => 'system_type',
        'internet_connection' => 'internet_connection',
        'lease' => 'lease',
        'operational' => 'operational',
        'owner_id' => 'owner_id',
        'host_id' => 'host_id',
        'installer_id' => 'installer_id',
        'allow_public_access' => 'allow_public_access',
        'interconnect_date' => 'interconnect_date',
        'source' => 'source',
        'array_type' => 'array_type',
        'attachment_type' => 'attachment_type',
        'ensemble_envoy' => 'ensemble_envoy',
        'grid_profile' => 'grid_profile',
        'requested_profile' => 'requested_profile',
        'requested_report_freq' => 'requested_report_freq',
        'voltage' => 'voltage',
        'envoy_serial_numbers' => 'envoy_serial_numbers',
        'pv_manufacturer' => 'pv_manufacturer',
        'pv_manufacturer_name' => 'pv_manufacturer_name',
        'pv_model' => 'pv_model',
        'pv_model_name' => 'pv_model_name',
        'pv_module_power_rating' => 'pv_module_power_rating',
        'pv_module_type' => 'pv_module_type',
        'expected_envoy_count' => 'expected_envoy_count',
        'expected_pcu_count' => 'expected_pcu_count',
        'expected_acb_count' => 'expected_acb_count',
        'expected_nsr_count' => 'expected_nsr_count',
        'expected_meter_count' => 'expected_meter_count',
        'expected_encharge_count' => 'expected_encharge_count',
        'expected_enpower_count' => 'expected_enpower_count',
        'reference' => 'reference',
        'encharge' => 'encharge',
        'enpower' => 'enpower',
        'address' => 'address'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'system_name' => 'setSystemName',
        'system_type' => 'setSystemType',
        'internet_connection' => 'setInternetConnection',
        'lease' => 'setLease',
        'operational' => 'setOperational',
        'owner_id' => 'setOwnerId',
        'host_id' => 'setHostId',
        'installer_id' => 'setInstallerId',
        'allow_public_access' => 'setAllowPublicAccess',
        'interconnect_date' => 'setInterconnectDate',
        'source' => 'setSource',
        'array_type' => 'setArrayType',
        'attachment_type' => 'setAttachmentType',
        'ensemble_envoy' => 'setEnsembleEnvoy',
        'grid_profile' => 'setGridProfile',
        'requested_profile' => 'setRequestedProfile',
        'requested_report_freq' => 'setRequestedReportFreq',
        'voltage' => 'setVoltage',
        'envoy_serial_numbers' => 'setEnvoySerialNumbers',
        'pv_manufacturer' => 'setPvManufacturer',
        'pv_manufacturer_name' => 'setPvManufacturerName',
        'pv_model' => 'setPvModel',
        'pv_model_name' => 'setPvModelName',
        'pv_module_power_rating' => 'setPvModulePowerRating',
        'pv_module_type' => 'setPvModuleType',
        'expected_envoy_count' => 'setExpectedEnvoyCount',
        'expected_pcu_count' => 'setExpectedPcuCount',
        'expected_acb_count' => 'setExpectedAcbCount',
        'expected_nsr_count' => 'setExpectedNsrCount',
        'expected_meter_count' => 'setExpectedMeterCount',
        'expected_encharge_count' => 'setExpectedEnchargeCount',
        'expected_enpower_count' => 'setExpectedEnpowerCount',
        'reference' => 'setReference',
        'encharge' => 'setEncharge',
        'enpower' => 'setEnpower',
        'address' => 'setAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'system_name' => 'getSystemName',
        'system_type' => 'getSystemType',
        'internet_connection' => 'getInternetConnection',
        'lease' => 'getLease',
        'operational' => 'getOperational',
        'owner_id' => 'getOwnerId',
        'host_id' => 'getHostId',
        'installer_id' => 'getInstallerId',
        'allow_public_access' => 'getAllowPublicAccess',
        'interconnect_date' => 'getInterconnectDate',
        'source' => 'getSource',
        'array_type' => 'getArrayType',
        'attachment_type' => 'getAttachmentType',
        'ensemble_envoy' => 'getEnsembleEnvoy',
        'grid_profile' => 'getGridProfile',
        'requested_profile' => 'getRequestedProfile',
        'requested_report_freq' => 'getRequestedReportFreq',
        'voltage' => 'getVoltage',
        'envoy_serial_numbers' => 'getEnvoySerialNumbers',
        'pv_manufacturer' => 'getPvManufacturer',
        'pv_manufacturer_name' => 'getPvManufacturerName',
        'pv_model' => 'getPvModel',
        'pv_model_name' => 'getPvModelName',
        'pv_module_power_rating' => 'getPvModulePowerRating',
        'pv_module_type' => 'getPvModuleType',
        'expected_envoy_count' => 'getExpectedEnvoyCount',
        'expected_pcu_count' => 'getExpectedPcuCount',
        'expected_acb_count' => 'getExpectedAcbCount',
        'expected_nsr_count' => 'getExpectedNsrCount',
        'expected_meter_count' => 'getExpectedMeterCount',
        'expected_encharge_count' => 'getExpectedEnchargeCount',
        'expected_enpower_count' => 'getExpectedEnpowerCount',
        'reference' => 'getReference',
        'encharge' => 'getEncharge',
        'enpower' => 'getEnpower',
        'address' => 'getAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('system_name', $data ?? [], null);
        $this->setIfExists('system_type', $data ?? [], null);
        $this->setIfExists('internet_connection', $data ?? [], null);
        $this->setIfExists('lease', $data ?? [], null);
        $this->setIfExists('operational', $data ?? [], null);
        $this->setIfExists('owner_id', $data ?? [], null);
        $this->setIfExists('host_id', $data ?? [], null);
        $this->setIfExists('installer_id', $data ?? [], null);
        $this->setIfExists('allow_public_access', $data ?? [], null);
        $this->setIfExists('interconnect_date', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('array_type', $data ?? [], null);
        $this->setIfExists('attachment_type', $data ?? [], null);
        $this->setIfExists('ensemble_envoy', $data ?? [], null);
        $this->setIfExists('grid_profile', $data ?? [], null);
        $this->setIfExists('requested_profile', $data ?? [], null);
        $this->setIfExists('requested_report_freq', $data ?? [], null);
        $this->setIfExists('voltage', $data ?? [], null);
        $this->setIfExists('envoy_serial_numbers', $data ?? [], null);
        $this->setIfExists('pv_manufacturer', $data ?? [], null);
        $this->setIfExists('pv_manufacturer_name', $data ?? [], null);
        $this->setIfExists('pv_model', $data ?? [], null);
        $this->setIfExists('pv_model_name', $data ?? [], null);
        $this->setIfExists('pv_module_power_rating', $data ?? [], null);
        $this->setIfExists('pv_module_type', $data ?? [], null);
        $this->setIfExists('expected_envoy_count', $data ?? [], null);
        $this->setIfExists('expected_pcu_count', $data ?? [], null);
        $this->setIfExists('expected_acb_count', $data ?? [], null);
        $this->setIfExists('expected_nsr_count', $data ?? [], null);
        $this->setIfExists('expected_meter_count', $data ?? [], null);
        $this->setIfExists('expected_encharge_count', $data ?? [], null);
        $this->setIfExists('expected_enpower_count', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('encharge', $data ?? [], null);
        $this->setIfExists('enpower', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['system_name'] === null) {
            $invalidProperties[] = "'system_name' can't be null";
        }
        if (!is_null($this->container['pv_module_power_rating']) && ($this->container['pv_module_power_rating'] < 0)) {
            $invalidProperties[] = "invalid value for 'pv_module_power_rating', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets system_name
     *
     * @return string
     */
    public function getSystemName()
    {
        return $this->container['system_name'];
    }

    /**
     * Sets system_name
     *
     * @param string $system_name Name of the system. Limit 255 characters.
     *
     * @return self
     */
    public function setSystemName($system_name)
    {
        if (is_null($system_name)) {
            throw new \InvalidArgumentException('non-nullable system_name cannot be null');
        }
        $this->container['system_name'] = $system_name;

        return $this;
    }

    /**
     * Gets system_type
     *
     * @return \EnphaseOpenAPI\Commissioning\Model\SystemTypeEnum|null
     */
    public function getSystemType()
    {
        return $this->container['system_type'];
    }

    /**
     * Sets system_type
     *
     * @param \EnphaseOpenAPI\Commissioning\Model\SystemTypeEnum|null $system_type system_type
     *
     * @return self
     */
    public function setSystemType($system_type)
    {
        if (is_null($system_type)) {
            throw new \InvalidArgumentException('non-nullable system_type cannot be null');
        }
        $this->container['system_type'] = $system_type;

        return $this;
    }

    /**
     * Gets internet_connection
     *
     * @return \EnphaseOpenAPI\Commissioning\Model\SystemInternetConnectionEnum|null
     */
    public function getInternetConnection()
    {
        return $this->container['internet_connection'];
    }

    /**
     * Sets internet_connection
     *
     * @param \EnphaseOpenAPI\Commissioning\Model\SystemInternetConnectionEnum|null $internet_connection internet_connection
     *
     * @return self
     */
    public function setInternetConnection($internet_connection)
    {
        if (is_null($internet_connection)) {
            throw new \InvalidArgumentException('non-nullable internet_connection cannot be null');
        }
        $this->container['internet_connection'] = $internet_connection;

        return $this;
    }

    /**
     * Gets lease
     *
     * @return bool|null
     */
    public function getLease()
    {
        return $this->container['lease'];
    }

    /**
     * Sets lease
     *
     * @param bool|null $lease Whether the system is leased. Default false.
     *
     * @return self
     */
    public function setLease($lease)
    {
        if (is_null($lease)) {
            throw new \InvalidArgumentException('non-nullable lease cannot be null');
        }
        $this->container['lease'] = $lease;

        return $this;
    }

    /**
     * Gets operational
     *
     * @return bool|null
     */
    public function getOperational()
    {
        return $this->container['operational'];
    }

    /**
     * Sets operational
     *
     * @param bool|null $operational Whether this system is permitted to operate. Default true.
     *
     * @return self
     */
    public function setOperational($operational)
    {
        if (is_null($operational)) {
            throw new \InvalidArgumentException('non-nullable operational cannot be null');
        }
        $this->container['operational'] = $operational;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return int|null
     */
    public function getOwnerId()
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param int|null $owner_id Enlighten ID of the system owner. Owner must be an Enlighten user. Optional. If the user of the API is a self-installer, the owner must be himself. If the user of the API is an installer then use the Search user API to get the owner user ID. If the owner not exist in the enlighten then use Create home owner API to create it newly.
     *
     * @return self
     */
    public function setOwnerId($owner_id)
    {
        if (is_null($owner_id)) {
            throw new \InvalidArgumentException('non-nullable owner_id cannot be null');
        }
        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets host_id
     *
     * @return int|null
     */
    public function getHostId()
    {
        return $this->container['host_id'];
    }

    /**
     * Sets host_id
     *
     * @param int|null $host_id Enlighten ID of the system host. System host must be an Enlighten user. Optional. If the user of the API is an installer then use the Search user API to get the host user ID. If the host not exist in the enlighten then use Create home owner API to create it newly.
     *
     * @return self
     */
    public function setHostId($host_id)
    {
        if (is_null($host_id)) {
            throw new \InvalidArgumentException('non-nullable host_id cannot be null');
        }
        $this->container['host_id'] = $host_id;

        return $this;
    }

    /**
     * Gets installer_id
     *
     * @return int|null
     */
    public function getInstallerId()
    {
        return $this->container['installer_id'];
    }

    /**
     * Sets installer_id
     *
     * @param int|null $installer_id Enlighten ID of the installer of this system. Defaults to current user's company ID.
     *
     * @return self
     */
    public function setInstallerId($installer_id)
    {
        if (is_null($installer_id)) {
            throw new \InvalidArgumentException('non-nullable installer_id cannot be null');
        }
        $this->container['installer_id'] = $installer_id;

        return $this;
    }

    /**
     * Gets allow_public_access
     *
     * @return bool|null
     */
    public function getAllowPublicAccess()
    {
        return $this->container['allow_public_access'];
    }

    /**
     * Sets allow_public_access
     *
     * @param bool|null $allow_public_access When true, the system will be eligible to appear in the public systems lists of Enphase and the system's installer. Default true.
     *
     * @return self
     */
    public function setAllowPublicAccess($allow_public_access)
    {
        if (is_null($allow_public_access)) {
            throw new \InvalidArgumentException('non-nullable allow_public_access cannot be null');
        }
        $this->container['allow_public_access'] = $allow_public_access;

        return $this;
    }

    /**
     * Gets interconnect_date
     *
     * @return \DateTime|null
     */
    public function getInterconnectDate()
    {
        return $this->container['interconnect_date'];
    }

    /**
     * Sets interconnect_date
     *
     * @param \DateTime|null $interconnect_date When the system was approved to connect to the grid.
     *
     * @return self
     */
    public function setInterconnectDate($interconnect_date)
    {
        if (is_null($interconnect_date)) {
            throw new \InvalidArgumentException('non-nullable interconnect_date cannot be null');
        }
        $this->container['interconnect_date'] = $interconnect_date;

        return $this;
    }

    /**
     * Gets source
     *
     * @return \EnphaseOpenAPI\Commissioning\Model\SystemSourceEnum|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \EnphaseOpenAPI\Commissioning\Model\SystemSourceEnum|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets array_type
     *
     * @return \EnphaseOpenAPI\Commissioning\Model\SystemArrayTypeEnum|null
     */
    public function getArrayType()
    {
        return $this->container['array_type'];
    }

    /**
     * Sets array_type
     *
     * @param \EnphaseOpenAPI\Commissioning\Model\SystemArrayTypeEnum|null $array_type array_type
     *
     * @return self
     */
    public function setArrayType($array_type)
    {
        if (is_null($array_type)) {
            throw new \InvalidArgumentException('non-nullable array_type cannot be null');
        }
        $this->container['array_type'] = $array_type;

        return $this;
    }

    /**
     * Gets attachment_type
     *
     * @return \EnphaseOpenAPI\Commissioning\Model\SystemAttachmentTypeEnum|null
     */
    public function getAttachmentType()
    {
        return $this->container['attachment_type'];
    }

    /**
     * Sets attachment_type
     *
     * @param \EnphaseOpenAPI\Commissioning\Model\SystemAttachmentTypeEnum|null $attachment_type attachment_type
     *
     * @return self
     */
    public function setAttachmentType($attachment_type)
    {
        if (is_null($attachment_type)) {
            throw new \InvalidArgumentException('non-nullable attachment_type cannot be null');
        }
        $this->container['attachment_type'] = $attachment_type;

        return $this;
    }

    /**
     * Gets ensemble_envoy
     *
     * @return string|null
     */
    public function getEnsembleEnvoy()
    {
        return $this->container['ensemble_envoy'];
    }

    /**
     * Sets ensemble_envoy
     *
     * @param string|null $ensemble_envoy Specifies serial number of ensemble envoy in multi envoy system.
     *
     * @return self
     */
    public function setEnsembleEnvoy($ensemble_envoy)
    {
        if (is_null($ensemble_envoy)) {
            throw new \InvalidArgumentException('non-nullable ensemble_envoy cannot be null');
        }
        $this->container['ensemble_envoy'] = $ensemble_envoy;

        return $this;
    }

    /**
     * Gets grid_profile
     *
     * @return string|null
     */
    public function getGridProfile()
    {
        return $this->container['grid_profile'];
    }

    /**
     * Sets grid_profile
     *
     * @param string|null $grid_profile Grid profile to set on this system's microinverters. See GridProfiles API for how to retrieve a list of known profiles.
     *
     * @return self
     */
    public function setGridProfile($grid_profile)
    {
        if (is_null($grid_profile)) {
            throw new \InvalidArgumentException('non-nullable grid_profile cannot be null');
        }
        $this->container['grid_profile'] = $grid_profile;

        return $this;
    }

    /**
     * Gets requested_profile
     *
     * @return string|null
     */
    public function getRequestedProfile()
    {
        return $this->container['requested_profile'];
    }

    /**
     * Sets requested_profile
     *
     * @param string|null $requested_profile requested_profile
     *
     * @return self
     */
    public function setRequestedProfile($requested_profile)
    {
        if (is_null($requested_profile)) {
            throw new \InvalidArgumentException('non-nullable requested_profile cannot be null');
        }
        $this->container['requested_profile'] = $requested_profile;

        return $this;
    }

    /**
     * Gets requested_report_freq
     *
     * @return string|null
     */
    public function getRequestedReportFreq()
    {
        return $this->container['requested_report_freq'];
    }

    /**
     * Sets requested_report_freq
     *
     * @param string|null $requested_report_freq requested_report_freq
     *
     * @return self
     */
    public function setRequestedReportFreq($requested_report_freq)
    {
        if (is_null($requested_report_freq)) {
            throw new \InvalidArgumentException('non-nullable requested_report_freq cannot be null');
        }
        $this->container['requested_report_freq'] = $requested_report_freq;

        return $this;
    }

    /**
     * Gets voltage
     *
     * @return string|null
     */
    public function getVoltage()
    {
        return $this->container['voltage'];
    }

    /**
     * Sets voltage
     *
     * @param string|null $voltage Supported voltage/phase associated with a commercial system inside North America. If system type is not commercial, or if the installer exists & installer's country is not inside North America, or if the system's country is not inside North America, then the voltage value would be null.
     *
     * @return self
     */
    public function setVoltage($voltage)
    {
        if (is_null($voltage)) {
            throw new \InvalidArgumentException('non-nullable voltage cannot be null');
        }
        $this->container['voltage'] = $voltage;

        return $this;
    }

    /**
     * Gets envoy_serial_numbers
     *
     * @return string[]|null
     */
    public function getEnvoySerialNumbers()
    {
        return $this->container['envoy_serial_numbers'];
    }

    /**
     * Sets envoy_serial_numbers
     *
     * @param string[]|null $envoy_serial_numbers A list of Envoys installed on this system.
     *
     * @return self
     */
    public function setEnvoySerialNumbers($envoy_serial_numbers)
    {
        if (is_null($envoy_serial_numbers)) {
            throw new \InvalidArgumentException('non-nullable envoy_serial_numbers cannot be null');
        }
        $this->container['envoy_serial_numbers'] = $envoy_serial_numbers;

        return $this;
    }

    /**
     * Gets pv_manufacturer
     *
     * @return int|null
     */
    public function getPvManufacturer()
    {
        return $this->container['pv_manufacturer'];
    }

    /**
     * Sets pv_manufacturer
     *
     * @param int|null $pv_manufacturer Enlighten ID of the PV manufacturer associated with the PV model installed on the system. See PvManufacturers for how to retrieve PV manufacturer IDs.
     *
     * @return self
     */
    public function setPvManufacturer($pv_manufacturer)
    {
        if (is_null($pv_manufacturer)) {
            throw new \InvalidArgumentException('non-nullable pv_manufacturer cannot be null');
        }
        $this->container['pv_manufacturer'] = $pv_manufacturer;

        return $this;
    }

    /**
     * Gets pv_manufacturer_name
     *
     * @return string|null
     */
    public function getPvManufacturerName()
    {
        return $this->container['pv_manufacturer_name'];
    }

    /**
     * Sets pv_manufacturer_name
     *
     * @param string|null $pv_manufacturer_name Name of the Custom PV module manufacturer associated with the system.
     *
     * @return self
     */
    public function setPvManufacturerName($pv_manufacturer_name)
    {
        if (is_null($pv_manufacturer_name)) {
            throw new \InvalidArgumentException('non-nullable pv_manufacturer_name cannot be null');
        }
        $this->container['pv_manufacturer_name'] = $pv_manufacturer_name;

        return $this;
    }

    /**
     * Gets pv_model
     *
     * @return int|null
     */
    public function getPvModel()
    {
        return $this->container['pv_model'];
    }

    /**
     * Sets pv_model
     *
     * @param int|null $pv_model Enlighten ID of the PV model installed on the system. See PvManufacturers and PvModels for how to retrieve PV model IDs.
     *
     * @return self
     */
    public function setPvModel($pv_model)
    {
        if (is_null($pv_model)) {
            throw new \InvalidArgumentException('non-nullable pv_model cannot be null');
        }
        $this->container['pv_model'] = $pv_model;

        return $this;
    }

    /**
     * Gets pv_model_name
     *
     * @return string|null
     */
    public function getPvModelName()
    {
        return $this->container['pv_model_name'];
    }

    /**
     * Sets pv_model_name
     *
     * @param string|null $pv_model_name Name of the Custom PV module model associated with the system.
     *
     * @return self
     */
    public function setPvModelName($pv_model_name)
    {
        if (is_null($pv_model_name)) {
            throw new \InvalidArgumentException('non-nullable pv_model_name cannot be null');
        }
        $this->container['pv_model_name'] = $pv_model_name;

        return $this;
    }

    /**
     * Gets pv_module_power_rating
     *
     * @return float|null
     */
    public function getPvModulePowerRating()
    {
        return $this->container['pv_module_power_rating'];
    }

    /**
     * Sets pv_module_power_rating
     *
     * @param float|null $pv_module_power_rating Power rating (in W) of the PV module installed on the system.
     *
     * @return self
     */
    public function setPvModulePowerRating($pv_module_power_rating)
    {
        if (is_null($pv_module_power_rating)) {
            throw new \InvalidArgumentException('non-nullable pv_module_power_rating cannot be null');
        }

        if (($pv_module_power_rating < 0)) {
            throw new \InvalidArgumentException('invalid value for $pv_module_power_rating when calling SystemParams., must be bigger than or equal to 0.');
        }

        $this->container['pv_module_power_rating'] = $pv_module_power_rating;

        return $this;
    }

    /**
     * Gets pv_module_type
     *
     * @return int|null
     */
    public function getPvModuleType()
    {
        return $this->container['pv_module_type'];
    }

    /**
     * Sets pv_module_type
     *
     * @param int|null $pv_module_type Type ID of the PV module installed on the system. 1 -> 'Mono-facial', 2 -> 'Bi-facial', 3 -> 'Split cell', 4 -> 'Other'.
     *
     * @return self
     */
    public function setPvModuleType($pv_module_type)
    {
        if (is_null($pv_module_type)) {
            throw new \InvalidArgumentException('non-nullable pv_module_type cannot be null');
        }
        $this->container['pv_module_type'] = $pv_module_type;

        return $this;
    }

    /**
     * Gets expected_envoy_count
     *
     * @return int|null
     */
    public function getExpectedEnvoyCount()
    {
        return $this->container['expected_envoy_count'];
    }

    /**
     * Sets expected_envoy_count
     *
     * @param int|null $expected_envoy_count Total envoys the system is supposed to have.
     *
     * @return self
     */
    public function setExpectedEnvoyCount($expected_envoy_count)
    {
        if (is_null($expected_envoy_count)) {
            throw new \InvalidArgumentException('non-nullable expected_envoy_count cannot be null');
        }
        $this->container['expected_envoy_count'] = $expected_envoy_count;

        return $this;
    }

    /**
     * Gets expected_pcu_count
     *
     * @return int|null
     */
    public function getExpectedPcuCount()
    {
        return $this->container['expected_pcu_count'];
    }

    /**
     * Sets expected_pcu_count
     *
     * @param int|null $expected_pcu_count Total PCUs the system is supposed to have.
     *
     * @return self
     */
    public function setExpectedPcuCount($expected_pcu_count)
    {
        if (is_null($expected_pcu_count)) {
            throw new \InvalidArgumentException('non-nullable expected_pcu_count cannot be null');
        }
        $this->container['expected_pcu_count'] = $expected_pcu_count;

        return $this;
    }

    /**
     * Gets expected_acb_count
     *
     * @return int|null
     */
    public function getExpectedAcbCount()
    {
        return $this->container['expected_acb_count'];
    }

    /**
     * Sets expected_acb_count
     *
     * @param int|null $expected_acb_count Total acbs the system is supposed to have.
     *
     * @return self
     */
    public function setExpectedAcbCount($expected_acb_count)
    {
        if (is_null($expected_acb_count)) {
            throw new \InvalidArgumentException('non-nullable expected_acb_count cannot be null');
        }
        $this->container['expected_acb_count'] = $expected_acb_count;

        return $this;
    }

    /**
     * Gets expected_nsr_count
     *
     * @return int|null
     */
    public function getExpectedNsrCount()
    {
        return $this->container['expected_nsr_count'];
    }

    /**
     * Sets expected_nsr_count
     *
     * @param int|null $expected_nsr_count Total nsrs the system is supposed to have.
     *
     * @return self
     */
    public function setExpectedNsrCount($expected_nsr_count)
    {
        if (is_null($expected_nsr_count)) {
            throw new \InvalidArgumentException('non-nullable expected_nsr_count cannot be null');
        }
        $this->container['expected_nsr_count'] = $expected_nsr_count;

        return $this;
    }

    /**
     * Gets expected_meter_count
     *
     * @return int|null
     */
    public function getExpectedMeterCount()
    {
        return $this->container['expected_meter_count'];
    }

    /**
     * Sets expected_meter_count
     *
     * @param int|null $expected_meter_count Total meters the system is supposed to have.
     *
     * @return self
     */
    public function setExpectedMeterCount($expected_meter_count)
    {
        if (is_null($expected_meter_count)) {
            throw new \InvalidArgumentException('non-nullable expected_meter_count cannot be null');
        }
        $this->container['expected_meter_count'] = $expected_meter_count;

        return $this;
    }

    /**
     * Gets expected_encharge_count
     *
     * @return int|null
     */
    public function getExpectedEnchargeCount()
    {
        return $this->container['expected_encharge_count'];
    }

    /**
     * Sets expected_encharge_count
     *
     * @param int|null $expected_encharge_count Total encharges the system is supposed to have.
     *
     * @return self
     */
    public function setExpectedEnchargeCount($expected_encharge_count)
    {
        if (is_null($expected_encharge_count)) {
            throw new \InvalidArgumentException('non-nullable expected_encharge_count cannot be null');
        }
        $this->container['expected_encharge_count'] = $expected_encharge_count;

        return $this;
    }

    /**
     * Gets expected_enpower_count
     *
     * @return int|null
     */
    public function getExpectedEnpowerCount()
    {
        return $this->container['expected_enpower_count'];
    }

    /**
     * Sets expected_enpower_count
     *
     * @param int|null $expected_enpower_count Total enpowers the system is supposed to have.
     *
     * @return self
     */
    public function setExpectedEnpowerCount($expected_enpower_count)
    {
        if (is_null($expected_enpower_count)) {
            throw new \InvalidArgumentException('non-nullable expected_enpower_count cannot be null');
        }
        $this->container['expected_enpower_count'] = $expected_enpower_count;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference Identifier of this system as provided by the calling user's company. This attribute is not present if the calling user's company does not have a reference for this system. This value should be alphanumeric.
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets encharge
     *
     * @return \EnphaseOpenAPI\Commissioning\Model\SystemParamsEnchargeInner[]|null
     */
    public function getEncharge()
    {
        return $this->container['encharge'];
    }

    /**
     * Sets encharge
     *
     * @param \EnphaseOpenAPI\Commissioning\Model\SystemParamsEnchargeInner[]|null $encharge Encharge detail.
     *
     * @return self
     */
    public function setEncharge($encharge)
    {
        if (is_null($encharge)) {
            throw new \InvalidArgumentException('non-nullable encharge cannot be null');
        }
        $this->container['encharge'] = $encharge;

        return $this;
    }

    /**
     * Gets enpower
     *
     * @return \EnphaseOpenAPI\Commissioning\Model\SystemParamsEnpowerInner[]|null
     */
    public function getEnpower()
    {
        return $this->container['enpower'];
    }

    /**
     * Sets enpower
     *
     * @param \EnphaseOpenAPI\Commissioning\Model\SystemParamsEnpowerInner[]|null $enpower Enpower detail.
     *
     * @return self
     */
    public function setEnpower($enpower)
    {
        if (is_null($enpower)) {
            throw new \InvalidArgumentException('non-nullable enpower cannot be null');
        }
        $this->container['enpower'] = $enpower;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \EnphaseOpenAPI\Commissioning\Model\SystemParamsAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \EnphaseOpenAPI\Commissioning\Model\SystemParamsAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


