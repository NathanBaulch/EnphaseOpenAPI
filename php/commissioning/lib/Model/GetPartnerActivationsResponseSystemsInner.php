<?php
/**
 * GetPartnerActivationsResponseSystemsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EnphaseOpenAPI\Commissioning
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Enphase Commissioning API
 *
 * Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EnphaseOpenAPI\Commissioning\Model;

use \ArrayAccess;
use \EnphaseOpenAPI\Commissioning\ObjectSerializer;

/**
 * GetPartnerActivationsResponseSystemsInner Class Doc Comment
 *
 * @category Class
 * @package  EnphaseOpenAPI\Commissioning
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetPartnerActivationsResponseSystemsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetPartnerActivationsResponse_systems_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'system_id' => 'int',
        'system_name' => 'string',
        'system_type' => '\EnphaseOpenAPI\Commissioning\Model\SystemTypeEnum',
        'status' => 'string',
        'timezone' => 'string',
        'stage' => 'int',
        'internet_connection' => '\EnphaseOpenAPI\Commissioning\Model\SystemInternetConnectionEnum',
        'lease' => 'bool',
        'operational' => 'bool',
        'owner' => 'string',
        'owner_id' => 'int',
        'host' => 'string',
        'host_id' => 'int',
        'installer_name' => 'string',
        'installer_id' => 'int',
        'maintainer_name' => 'string',
        'maintainer_id' => 'int',
        'authorized_subcontractors' => '\EnphaseOpenAPI\Commissioning\Model\GetPartnerActivationsResponseSystemsInnerAuthorizedSubcontractorsInner[]',
        'uri' => 'string',
        'updated_at' => 'int',
        'reference' => 'string',
        'other_references' => 'string[]',
        'address' => '\EnphaseOpenAPI\Commissioning\Model\Address'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'system_id' => null,
        'system_name' => null,
        'system_type' => null,
        'status' => null,
        'timezone' => null,
        'stage' => null,
        'internet_connection' => null,
        'lease' => null,
        'operational' => null,
        'owner' => null,
        'owner_id' => null,
        'host' => null,
        'host_id' => null,
        'installer_name' => null,
        'installer_id' => null,
        'maintainer_name' => null,
        'maintainer_id' => null,
        'authorized_subcontractors' => null,
        'uri' => null,
        'updated_at' => 'int64',
        'reference' => null,
        'other_references' => null,
        'address' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'system_id' => false,
		'system_name' => false,
		'system_type' => false,
		'status' => false,
		'timezone' => false,
		'stage' => false,
		'internet_connection' => false,
		'lease' => false,
		'operational' => false,
		'owner' => false,
		'owner_id' => false,
		'host' => false,
		'host_id' => false,
		'installer_name' => false,
		'installer_id' => false,
		'maintainer_name' => false,
		'maintainer_id' => false,
		'authorized_subcontractors' => false,
		'uri' => false,
		'updated_at' => false,
		'reference' => false,
		'other_references' => false,
		'address' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'system_id' => 'system_id',
        'system_name' => 'system_name',
        'system_type' => 'system_type',
        'status' => 'status',
        'timezone' => 'timezone',
        'stage' => 'stage',
        'internet_connection' => 'internet_connection',
        'lease' => 'lease',
        'operational' => 'operational',
        'owner' => 'owner',
        'owner_id' => 'owner_id',
        'host' => 'host',
        'host_id' => 'host_id',
        'installer_name' => 'installer_name',
        'installer_id' => 'installer_id',
        'maintainer_name' => 'maintainer_name',
        'maintainer_id' => 'maintainer_id',
        'authorized_subcontractors' => 'authorized_subcontractors',
        'uri' => 'uri',
        'updated_at' => 'updated_at',
        'reference' => 'reference',
        'other_references' => 'other_references',
        'address' => 'address'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'system_id' => 'setSystemId',
        'system_name' => 'setSystemName',
        'system_type' => 'setSystemType',
        'status' => 'setStatus',
        'timezone' => 'setTimezone',
        'stage' => 'setStage',
        'internet_connection' => 'setInternetConnection',
        'lease' => 'setLease',
        'operational' => 'setOperational',
        'owner' => 'setOwner',
        'owner_id' => 'setOwnerId',
        'host' => 'setHost',
        'host_id' => 'setHostId',
        'installer_name' => 'setInstallerName',
        'installer_id' => 'setInstallerId',
        'maintainer_name' => 'setMaintainerName',
        'maintainer_id' => 'setMaintainerId',
        'authorized_subcontractors' => 'setAuthorizedSubcontractors',
        'uri' => 'setUri',
        'updated_at' => 'setUpdatedAt',
        'reference' => 'setReference',
        'other_references' => 'setOtherReferences',
        'address' => 'setAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'system_id' => 'getSystemId',
        'system_name' => 'getSystemName',
        'system_type' => 'getSystemType',
        'status' => 'getStatus',
        'timezone' => 'getTimezone',
        'stage' => 'getStage',
        'internet_connection' => 'getInternetConnection',
        'lease' => 'getLease',
        'operational' => 'getOperational',
        'owner' => 'getOwner',
        'owner_id' => 'getOwnerId',
        'host' => 'getHost',
        'host_id' => 'getHostId',
        'installer_name' => 'getInstallerName',
        'installer_id' => 'getInstallerId',
        'maintainer_name' => 'getMaintainerName',
        'maintainer_id' => 'getMaintainerId',
        'authorized_subcontractors' => 'getAuthorizedSubcontractors',
        'uri' => 'getUri',
        'updated_at' => 'getUpdatedAt',
        'reference' => 'getReference',
        'other_references' => 'getOtherReferences',
        'address' => 'getAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('system_id', $data ?? [], null);
        $this->setIfExists('system_name', $data ?? [], null);
        $this->setIfExists('system_type', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('stage', $data ?? [], null);
        $this->setIfExists('internet_connection', $data ?? [], null);
        $this->setIfExists('lease', $data ?? [], null);
        $this->setIfExists('operational', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('owner_id', $data ?? [], null);
        $this->setIfExists('host', $data ?? [], null);
        $this->setIfExists('host_id', $data ?? [], null);
        $this->setIfExists('installer_name', $data ?? [], null);
        $this->setIfExists('installer_id', $data ?? [], null);
        $this->setIfExists('maintainer_name', $data ?? [], null);
        $this->setIfExists('maintainer_id', $data ?? [], null);
        $this->setIfExists('authorized_subcontractors', $data ?? [], null);
        $this->setIfExists('uri', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('other_references', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets system_id
     *
     * @return int|null
     */
    public function getSystemId()
    {
        return $this->container['system_id'];
    }

    /**
     * Sets system_id
     *
     * @param int|null $system_id Enlighten ID of this system. System-generated.
     *
     * @return self
     */
    public function setSystemId($system_id)
    {
        if (is_null($system_id)) {
            throw new \InvalidArgumentException('non-nullable system_id cannot be null');
        }
        $this->container['system_id'] = $system_id;

        return $this;
    }

    /**
     * Gets system_name
     *
     * @return string|null
     */
    public function getSystemName()
    {
        return $this->container['system_name'];
    }

    /**
     * Sets system_name
     *
     * @param string|null $system_name Name of the system.
     *
     * @return self
     */
    public function setSystemName($system_name)
    {
        if (is_null($system_name)) {
            throw new \InvalidArgumentException('non-nullable system_name cannot be null');
        }
        $this->container['system_name'] = $system_name;

        return $this;
    }

    /**
     * Gets system_type
     *
     * @return \EnphaseOpenAPI\Commissioning\Model\SystemTypeEnum|null
     */
    public function getSystemType()
    {
        return $this->container['system_type'];
    }

    /**
     * Sets system_type
     *
     * @param \EnphaseOpenAPI\Commissioning\Model\SystemTypeEnum|null $system_type system_type
     *
     * @return self
     */
    public function setSystemType($system_type)
    {
        if (is_null($system_type)) {
            throw new \InvalidArgumentException('non-nullable system_type cannot be null');
        }
        $this->container['system_type'] = $system_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status System's status.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone System's timezone.
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets stage
     *
     * @return int|null
     */
    public function getStage()
    {
        return $this->container['stage'];
    }

    /**
     * Sets stage
     *
     * @param int|null $stage What stage of the activation process this activation is in. System-generated.
     *
     * @return self
     */
    public function setStage($stage)
    {
        if (is_null($stage)) {
            throw new \InvalidArgumentException('non-nullable stage cannot be null');
        }
        $this->container['stage'] = $stage;

        return $this;
    }

    /**
     * Gets internet_connection
     *
     * @return \EnphaseOpenAPI\Commissioning\Model\SystemInternetConnectionEnum|null
     */
    public function getInternetConnection()
    {
        return $this->container['internet_connection'];
    }

    /**
     * Sets internet_connection
     *
     * @param \EnphaseOpenAPI\Commissioning\Model\SystemInternetConnectionEnum|null $internet_connection internet_connection
     *
     * @return self
     */
    public function setInternetConnection($internet_connection)
    {
        if (is_null($internet_connection)) {
            throw new \InvalidArgumentException('non-nullable internet_connection cannot be null');
        }
        $this->container['internet_connection'] = $internet_connection;

        return $this;
    }

    /**
     * Gets lease
     *
     * @return bool|null
     */
    public function getLease()
    {
        return $this->container['lease'];
    }

    /**
     * Sets lease
     *
     * @param bool|null $lease Whether the system is leased. Default false.
     *
     * @return self
     */
    public function setLease($lease)
    {
        if (is_null($lease)) {
            throw new \InvalidArgumentException('non-nullable lease cannot be null');
        }
        $this->container['lease'] = $lease;

        return $this;
    }

    /**
     * Gets operational
     *
     * @return bool|null
     */
    public function getOperational()
    {
        return $this->container['operational'];
    }

    /**
     * Sets operational
     *
     * @param bool|null $operational Whether this system is permitted to operate. Default true.
     *
     * @return self
     */
    public function setOperational($operational)
    {
        if (is_null($operational)) {
            throw new \InvalidArgumentException('non-nullable operational cannot be null');
        }
        $this->container['operational'] = $operational;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string|null $owner Name of the system owner. Owner must be an Enlighten user. If the user of the API is a self-installer, the owner must be himself.
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            throw new \InvalidArgumentException('non-nullable owner cannot be null');
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return int|null
     */
    public function getOwnerId()
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param int|null $owner_id Enlighten ID of this system owner. System-generated.
     *
     * @return self
     */
    public function setOwnerId($owner_id)
    {
        if (is_null($owner_id)) {
            throw new \InvalidArgumentException('non-nullable owner_id cannot be null');
        }
        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets host
     *
     * @return string|null
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param string|null $host Name of the system host.
     *
     * @return self
     */
    public function setHost($host)
    {
        if (is_null($host)) {
            throw new \InvalidArgumentException('non-nullable host cannot be null');
        }
        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets host_id
     *
     * @return int|null
     */
    public function getHostId()
    {
        return $this->container['host_id'];
    }

    /**
     * Sets host_id
     *
     * @param int|null $host_id Enlighten ID of this system host. System-generated.
     *
     * @return self
     */
    public function setHostId($host_id)
    {
        if (is_null($host_id)) {
            throw new \InvalidArgumentException('non-nullable host_id cannot be null');
        }
        $this->container['host_id'] = $host_id;

        return $this;
    }

    /**
     * Gets installer_name
     *
     * @return string|null
     */
    public function getInstallerName()
    {
        return $this->container['installer_name'];
    }

    /**
     * Sets installer_name
     *
     * @param string|null $installer_name Name of the installer.
     *
     * @return self
     */
    public function setInstallerName($installer_name)
    {
        if (is_null($installer_name)) {
            throw new \InvalidArgumentException('non-nullable installer_name cannot be null');
        }
        $this->container['installer_name'] = $installer_name;

        return $this;
    }

    /**
     * Gets installer_id
     *
     * @return int|null
     */
    public function getInstallerId()
    {
        return $this->container['installer_id'];
    }

    /**
     * Sets installer_id
     *
     * @param int|null $installer_id Enlighten ID of the installer of this system.
     *
     * @return self
     */
    public function setInstallerId($installer_id)
    {
        if (is_null($installer_id)) {
            throw new \InvalidArgumentException('non-nullable installer_id cannot be null');
        }
        $this->container['installer_id'] = $installer_id;

        return $this;
    }

    /**
     * Gets maintainer_name
     *
     * @return string|null
     */
    public function getMaintainerName()
    {
        return $this->container['maintainer_name'];
    }

    /**
     * Sets maintainer_name
     *
     * @param string|null $maintainer_name Name of the maintainer.
     *
     * @return self
     */
    public function setMaintainerName($maintainer_name)
    {
        if (is_null($maintainer_name)) {
            throw new \InvalidArgumentException('non-nullable maintainer_name cannot be null');
        }
        $this->container['maintainer_name'] = $maintainer_name;

        return $this;
    }

    /**
     * Gets maintainer_id
     *
     * @return int|null
     */
    public function getMaintainerId()
    {
        return $this->container['maintainer_id'];
    }

    /**
     * Sets maintainer_id
     *
     * @param int|null $maintainer_id Enlighten ID of the maintainer of this system.
     *
     * @return self
     */
    public function setMaintainerId($maintainer_id)
    {
        if (is_null($maintainer_id)) {
            throw new \InvalidArgumentException('non-nullable maintainer_id cannot be null');
        }
        $this->container['maintainer_id'] = $maintainer_id;

        return $this;
    }

    /**
     * Gets authorized_subcontractors
     *
     * @return \EnphaseOpenAPI\Commissioning\Model\GetPartnerActivationsResponseSystemsInnerAuthorizedSubcontractorsInner[]|null
     */
    public function getAuthorizedSubcontractors()
    {
        return $this->container['authorized_subcontractors'];
    }

    /**
     * Sets authorized_subcontractors
     *
     * @param \EnphaseOpenAPI\Commissioning\Model\GetPartnerActivationsResponseSystemsInnerAuthorizedSubcontractorsInner[]|null $authorized_subcontractors List of sub-contractors of this system.
     *
     * @return self
     */
    public function setAuthorizedSubcontractors($authorized_subcontractors)
    {
        if (is_null($authorized_subcontractors)) {
            throw new \InvalidArgumentException('non-nullable authorized_subcontractors cannot be null');
        }
        $this->container['authorized_subcontractors'] = $authorized_subcontractors;

        return $this;
    }

    /**
     * Gets uri
     *
     * @return string|null
     */
    public function getUri()
    {
        return $this->container['uri'];
    }

    /**
     * Sets uri
     *
     * @param string|null $uri URI for this activation.
     *
     * @return self
     */
    public function setUri($uri)
    {
        if (is_null($uri)) {
            throw new \InvalidArgumentException('non-nullable uri cannot be null');
        }
        $this->container['uri'] = $uri;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return int|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param int|null $updated_at Activation last updated timestamp.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference Identifier of this system as provided by the calling user's company. This attribute is not present if the calling user's company does not have a reference for this system.
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets other_references
     *
     * @return string[]|null
     */
    public function getOtherReferences()
    {
        return $this->container['other_references'];
    }

    /**
     * Sets other_references
     *
     * @param string[]|null $other_references Identifiers assigned to this activation by other companies which have access to it. This attribute is not present if there are no other references for this system.
     *
     * @return self
     */
    public function setOtherReferences($other_references)
    {
        if (is_null($other_references)) {
            throw new \InvalidArgumentException('non-nullable other_references cannot be null');
        }
        $this->container['other_references'] = $other_references;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \EnphaseOpenAPI\Commissioning\Model\Address|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \EnphaseOpenAPI\Commissioning\Model\Address|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


