<?php
/**
 * LoadControlSettingsLoadControlDataInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EnphaseOpenAPI\Monitoring
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Enphase Monitoring API
 *
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EnphaseOpenAPI\Monitoring\Model;

use \ArrayAccess;
use \EnphaseOpenAPI\Monitoring\ObjectSerializer;

/**
 * LoadControlSettingsLoadControlDataInner Class Doc Comment
 *
 * @category Class
 * @package  EnphaseOpenAPI\Monitoring
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LoadControlSettingsLoadControlDataInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LoadControlSettings_load_control_data_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'load_name' => 'string',
        'owner_can_override' => 'string',
        'mode' => 'string',
        'soc_low' => 'int',
        'soc_high' => 'int',
        'status' => 'string',
        'essential_start_time' => 'int',
        'essential_end_time' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'load_name' => null,
        'owner_can_override' => null,
        'mode' => null,
        'soc_low' => null,
        'soc_high' => null,
        'status' => null,
        'essential_start_time' => null,
        'essential_end_time' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
		'load_name' => false,
		'owner_can_override' => false,
		'mode' => false,
		'soc_low' => false,
		'soc_high' => false,
		'status' => false,
		'essential_start_time' => false,
		'essential_end_time' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'load_name' => 'load_name',
        'owner_can_override' => 'owner_can_override',
        'mode' => 'mode',
        'soc_low' => 'soc_low',
        'soc_high' => 'soc_high',
        'status' => 'status',
        'essential_start_time' => 'essential_start_time',
        'essential_end_time' => 'essential_end_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'load_name' => 'setLoadName',
        'owner_can_override' => 'setOwnerCanOverride',
        'mode' => 'setMode',
        'soc_low' => 'setSocLow',
        'soc_high' => 'setSocHigh',
        'status' => 'setStatus',
        'essential_start_time' => 'setEssentialStartTime',
        'essential_end_time' => 'setEssentialEndTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'load_name' => 'getLoadName',
        'owner_can_override' => 'getOwnerCanOverride',
        'mode' => 'getMode',
        'soc_low' => 'getSocLow',
        'soc_high' => 'getSocHigh',
        'status' => 'getStatus',
        'essential_start_time' => 'getEssentialStartTime',
        'essential_end_time' => 'getEssentialEndTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('load_name', $data ?? [], null);
        $this->setIfExists('owner_can_override', $data ?? [], null);
        $this->setIfExists('mode', $data ?? [], null);
        $this->setIfExists('soc_low', $data ?? [], null);
        $this->setIfExists('soc_high', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('essential_start_time', $data ?? [], null);
        $this->setIfExists('essential_end_time', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the dry contact.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets load_name
     *
     * @return string|null
     */
    public function getLoadName()
    {
        return $this->container['load_name'];
    }

    /**
     * Sets load_name
     *
     * @param string|null $load_name Name of the load.
     *
     * @return self
     */
    public function setLoadName($load_name)
    {
        if (is_null($load_name)) {
            throw new \InvalidArgumentException('non-nullable load_name cannot be null');
        }
        $this->container['load_name'] = $load_name;

        return $this;
    }

    /**
     * Gets owner_can_override
     *
     * @return string|null
     */
    public function getOwnerCanOverride()
    {
        return $this->container['owner_can_override'];
    }

    /**
     * Sets owner_can_override
     *
     * @param string|null $owner_can_override HOs ability to override the load control settings.
     *
     * @return self
     */
    public function setOwnerCanOverride($owner_can_override)
    {
        if (is_null($owner_can_override)) {
            throw new \InvalidArgumentException('non-nullable owner_can_override cannot be null');
        }
        $this->container['owner_can_override'] = $owner_can_override;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode Current load control configuration.
     *
     * @return self
     */
    public function setMode($mode)
    {
        if (is_null($mode)) {
            throw new \InvalidArgumentException('non-nullable mode cannot be null');
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets soc_low
     *
     * @return int|null
     */
    public function getSocLow()
    {
        return $this->container['soc_low'];
    }

    /**
     * Sets soc_low
     *
     * @param int|null $soc_low Applicable for advanced mode. Load will be powered off when the battery soc reaches this level.
     *
     * @return self
     */
    public function setSocLow($soc_low)
    {
        if (is_null($soc_low)) {
            throw new \InvalidArgumentException('non-nullable soc_low cannot be null');
        }
        $this->container['soc_low'] = $soc_low;

        return $this;
    }

    /**
     * Gets soc_high
     *
     * @return int|null
     */
    public function getSocHigh()
    {
        return $this->container['soc_high'];
    }

    /**
     * Sets soc_high
     *
     * @param int|null $soc_high Applicable for advanced mode. Load powers off when battery reaches soc_low. The load will be powered on when the battery soc reaches soc_high.
     *
     * @return self
     */
    public function setSocHigh($soc_high)
    {
        if (is_null($soc_high)) {
            throw new \InvalidArgumentException('non-nullable soc_high cannot be null');
        }
        $this->container['soc_high'] = $soc_high;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Available values are enabled, disabled.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets essential_start_time
     *
     * @return int|null
     */
    public function getEssentialStartTime()
    {
        return $this->container['essential_start_time'];
    }

    /**
     * Sets essential_start_time
     *
     * @param int|null $essential_start_time Applicable for scheduled mode. Time in seconds. Load will powered on between essential_start_time and essential_end_time.
     *
     * @return self
     */
    public function setEssentialStartTime($essential_start_time)
    {
        if (is_null($essential_start_time)) {
            throw new \InvalidArgumentException('non-nullable essential_start_time cannot be null');
        }
        $this->container['essential_start_time'] = $essential_start_time;

        return $this;
    }

    /**
     * Gets essential_end_time
     *
     * @return int|null
     */
    public function getEssentialEndTime()
    {
        return $this->container['essential_end_time'];
    }

    /**
     * Sets essential_end_time
     *
     * @param int|null $essential_end_time Applicable for scheduled mode. Time in seconds. Load will powered on between essential_start_time and essential_end_time.
     *
     * @return self
     */
    public function setEssentialEndTime($essential_end_time)
    {
        if (is_null($essential_end_time)) {
            throw new \InvalidArgumentException('non-nullable essential_end_time cannot be null');
        }
        $this->container['essential_end_time'] = $essential_end_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


