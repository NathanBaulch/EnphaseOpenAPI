<?php
/**
 * StreamSystemLiveDataResponseDataData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EnphaseOpenAPI\Monitoring
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Enphase Monitoring API
 *
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EnphaseOpenAPI\Monitoring\Model;

use \ArrayAccess;
use \EnphaseOpenAPI\Monitoring\ObjectSerializer;

/**
 * StreamSystemLiveDataResponseDataData Class Doc Comment
 *
 * @category Class
 * @package  EnphaseOpenAPI\Monitoring
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StreamSystemLiveDataResponseDataData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StreamSystemLiveDataResponse_data_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'battery_mode' => 'string',
        'battery_power' => 'int',
        'battery_soc' => 'int',
        'consumption_power' => 'int',
        'envoy_serial_number' => 'string[]',
        'generator_power' => 'int',
        'grid_power' => 'int',
        'grid_status' => 'string',
        'pv_power' => 'int',
        'system_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'battery_mode' => null,
        'battery_power' => null,
        'battery_soc' => null,
        'consumption_power' => null,
        'envoy_serial_number' => null,
        'generator_power' => null,
        'grid_power' => null,
        'grid_status' => null,
        'pv_power' => null,
        'system_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'battery_mode' => false,
		'battery_power' => false,
		'battery_soc' => false,
		'consumption_power' => false,
		'envoy_serial_number' => false,
		'generator_power' => false,
		'grid_power' => false,
		'grid_status' => false,
		'pv_power' => false,
		'system_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'battery_mode' => 'battery_mode',
        'battery_power' => 'battery_power',
        'battery_soc' => 'battery_soc',
        'consumption_power' => 'consumption_power',
        'envoy_serial_number' => 'envoy_serial_number',
        'generator_power' => 'generator_power',
        'grid_power' => 'grid_power',
        'grid_status' => 'grid_status',
        'pv_power' => 'pv_power',
        'system_id' => 'system_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'battery_mode' => 'setBatteryMode',
        'battery_power' => 'setBatteryPower',
        'battery_soc' => 'setBatterySoc',
        'consumption_power' => 'setConsumptionPower',
        'envoy_serial_number' => 'setEnvoySerialNumber',
        'generator_power' => 'setGeneratorPower',
        'grid_power' => 'setGridPower',
        'grid_status' => 'setGridStatus',
        'pv_power' => 'setPvPower',
        'system_id' => 'setSystemId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'battery_mode' => 'getBatteryMode',
        'battery_power' => 'getBatteryPower',
        'battery_soc' => 'getBatterySoc',
        'consumption_power' => 'getConsumptionPower',
        'envoy_serial_number' => 'getEnvoySerialNumber',
        'generator_power' => 'getGeneratorPower',
        'grid_power' => 'getGridPower',
        'grid_status' => 'getGridStatus',
        'pv_power' => 'getPvPower',
        'system_id' => 'getSystemId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('battery_mode', $data ?? [], null);
        $this->setIfExists('battery_power', $data ?? [], null);
        $this->setIfExists('battery_soc', $data ?? [], null);
        $this->setIfExists('consumption_power', $data ?? [], null);
        $this->setIfExists('envoy_serial_number', $data ?? [], null);
        $this->setIfExists('generator_power', $data ?? [], null);
        $this->setIfExists('grid_power', $data ?? [], null);
        $this->setIfExists('grid_status', $data ?? [], null);
        $this->setIfExists('pv_power', $data ?? [], null);
        $this->setIfExists('system_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets battery_mode
     *
     * @return string|null
     */
    public function getBatteryMode()
    {
        return $this->container['battery_mode'];
    }

    /**
     * Sets battery_mode
     *
     * @param string|null $battery_mode Battery mode of the site. Available values are Savings Mode, Full Backup, and Self-consumption.
     *
     * @return self
     */
    public function setBatteryMode($battery_mode)
    {
        if (is_null($battery_mode)) {
            throw new \InvalidArgumentException('non-nullable battery_mode cannot be null');
        }
        $this->container['battery_mode'] = $battery_mode;

        return $this;
    }

    /**
     * Gets battery_power
     *
     * @return int|null
     */
    public function getBatteryPower()
    {
        return $this->container['battery_power'];
    }

    /**
     * Sets battery_power
     *
     * @param int|null $battery_power Battery power in watts; Power will be positive in case of discharge and negative in case of charge.
     *
     * @return self
     */
    public function setBatteryPower($battery_power)
    {
        if (is_null($battery_power)) {
            throw new \InvalidArgumentException('non-nullable battery_power cannot be null');
        }
        $this->container['battery_power'] = $battery_power;

        return $this;
    }

    /**
     * Gets battery_soc
     *
     * @return int|null
     */
    public function getBatterySoc()
    {
        return $this->container['battery_soc'];
    }

    /**
     * Sets battery_soc
     *
     * @param int|null $battery_soc Battery soc in percentage.
     *
     * @return self
     */
    public function setBatterySoc($battery_soc)
    {
        if (is_null($battery_soc)) {
            throw new \InvalidArgumentException('non-nullable battery_soc cannot be null');
        }
        $this->container['battery_soc'] = $battery_soc;

        return $this;
    }

    /**
     * Gets consumption_power
     *
     * @return int|null
     */
    public function getConsumptionPower()
    {
        return $this->container['consumption_power'];
    }

    /**
     * Sets consumption_power
     *
     * @param int|null $consumption_power Consumption power in watts.
     *
     * @return self
     */
    public function setConsumptionPower($consumption_power)
    {
        if (is_null($consumption_power)) {
            throw new \InvalidArgumentException('non-nullable consumption_power cannot be null');
        }
        $this->container['consumption_power'] = $consumption_power;

        return $this;
    }

    /**
     * Gets envoy_serial_number
     *
     * @return string[]|null
     */
    public function getEnvoySerialNumber()
    {
        return $this->container['envoy_serial_number'];
    }

    /**
     * Sets envoy_serial_number
     *
     * @param string[]|null $envoy_serial_number envoy_serial_number
     *
     * @return self
     */
    public function setEnvoySerialNumber($envoy_serial_number)
    {
        if (is_null($envoy_serial_number)) {
            throw new \InvalidArgumentException('non-nullable envoy_serial_number cannot be null');
        }
        $this->container['envoy_serial_number'] = $envoy_serial_number;

        return $this;
    }

    /**
     * Gets generator_power
     *
     * @return int|null
     */
    public function getGeneratorPower()
    {
        return $this->container['generator_power'];
    }

    /**
     * Sets generator_power
     *
     * @param int|null $generator_power Generator power in watts.
     *
     * @return self
     */
    public function setGeneratorPower($generator_power)
    {
        if (is_null($generator_power)) {
            throw new \InvalidArgumentException('non-nullable generator_power cannot be null');
        }
        $this->container['generator_power'] = $generator_power;

        return $this;
    }

    /**
     * Gets grid_power
     *
     * @return int|null
     */
    public function getGridPower()
    {
        return $this->container['grid_power'];
    }

    /**
     * Sets grid_power
     *
     * @param int|null $grid_power Grid power in watts; Power will be negative in case of export and positive in case of import.
     *
     * @return self
     */
    public function setGridPower($grid_power)
    {
        if (is_null($grid_power)) {
            throw new \InvalidArgumentException('non-nullable grid_power cannot be null');
        }
        $this->container['grid_power'] = $grid_power;

        return $this;
    }

    /**
     * Gets grid_status
     *
     * @return string|null
     */
    public function getGridStatus()
    {
        return $this->container['grid_status'];
    }

    /**
     * Sets grid_status
     *
     * @param string|null $grid_status Grid state of the site. Available values are On Grid, Off Grid, Unknown.
     *
     * @return self
     */
    public function setGridStatus($grid_status)
    {
        if (is_null($grid_status)) {
            throw new \InvalidArgumentException('non-nullable grid_status cannot be null');
        }
        $this->container['grid_status'] = $grid_status;

        return $this;
    }

    /**
     * Gets pv_power
     *
     * @return int|null
     */
    public function getPvPower()
    {
        return $this->container['pv_power'];
    }

    /**
     * Sets pv_power
     *
     * @param int|null $pv_power PV power in watts.
     *
     * @return self
     */
    public function setPvPower($pv_power)
    {
        if (is_null($pv_power)) {
            throw new \InvalidArgumentException('non-nullable pv_power cannot be null');
        }
        $this->container['pv_power'] = $pv_power;

        return $this;
    }

    /**
     * Gets system_id
     *
     * @return int|null
     */
    public function getSystemId()
    {
        return $this->container['system_id'];
    }

    /**
     * Sets system_id
     *
     * @param int|null $system_id The unique numeric ID of the system.
     *
     * @return self
     */
    public function setSystemId($system_id)
    {
        if (is_null($system_id)) {
            throw new \InvalidArgumentException('non-nullable system_id cannot be null');
        }
        $this->container['system_id'] = $system_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


