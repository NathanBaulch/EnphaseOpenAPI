# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from monitoring import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from monitoring import schemas  # noqa: F401

from monitoring.model.stream_system_live_data_response import StreamSystemLiveDataResponse
from monitoring.model.stream_system_live_data_error import StreamSystemLiveDataError

# Header params


class DurationSchema(
    schemas.IntSchema
):
    pass
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'duration': typing.Union[DurationSchema, decimal.Decimal, int, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_duration = api_client.HeaderParameter(
    name="duration",
    style=api_client.ParameterStyle.SIMPLE,
    schema=DurationSchema,
)
# Path params
SystemIdSchema = schemas.IntSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'system_id': typing.Union[SystemIdSchema, decimal.Decimal, int, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_system_id = api_client.PathParameter(
    name="system_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=SystemIdSchema,
    required=True,
)
SchemaFor200ResponseBodyTextEventStream = StreamSystemLiveDataResponse


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyTextEventStream,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'text/event-stream': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextEventStream),
    },
)
SchemaFor401ResponseBodyTextEventStream = StreamSystemLiveDataError


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor401ResponseBodyTextEventStream,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    content={
        'text/event-stream': api_client.MediaType(
            schema=SchemaFor401ResponseBodyTextEventStream),
    },
)
SchemaFor403ResponseBodyTextEventStream = StreamSystemLiveDataError


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor403ResponseBodyTextEventStream,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    content={
        'text/event-stream': api_client.MediaType(
            schema=SchemaFor403ResponseBodyTextEventStream),
    },
)
SchemaFor429ResponseBodyTextEventStream = StreamSystemLiveDataError


@dataclass
class ApiResponseFor429(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor429ResponseBodyTextEventStream,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_429 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor429,
    content={
        'text/event-stream': api_client.MediaType(
            schema=SchemaFor429ResponseBodyTextEventStream),
    },
)
SchemaFor461ResponseBodyTextEventStream = StreamSystemLiveDataError


@dataclass
class ApiResponseFor461(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor461ResponseBodyTextEventStream,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_461 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor461,
    content={
        'text/event-stream': api_client.MediaType(
            schema=SchemaFor461ResponseBodyTextEventStream),
    },
)
SchemaFor462ResponseBodyTextEventStream = StreamSystemLiveDataError


@dataclass
class ApiResponseFor462(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor462ResponseBodyTextEventStream,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_462 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor462,
    content={
        'text/event-stream': api_client.MediaType(
            schema=SchemaFor462ResponseBodyTextEventStream),
    },
)
SchemaFor463ResponseBodyTextEventStream = StreamSystemLiveDataError


@dataclass
class ApiResponseFor463(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor463ResponseBodyTextEventStream,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_463 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor463,
    content={
        'text/event-stream': api_client.MediaType(
            schema=SchemaFor463ResponseBodyTextEventStream),
    },
)
SchemaFor466ResponseBodyTextEventStream = StreamSystemLiveDataError


@dataclass
class ApiResponseFor466(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor466ResponseBodyTextEventStream,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_466 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor466,
    content={
        'text/event-stream': api_client.MediaType(
            schema=SchemaFor466ResponseBodyTextEventStream),
    },
)
SchemaFor468ResponseBodyTextEventStream = StreamSystemLiveDataError


@dataclass
class ApiResponseFor468(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor468ResponseBodyTextEventStream,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_468 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor468,
    content={
        'text/event-stream': api_client.MediaType(
            schema=SchemaFor468ResponseBodyTextEventStream),
    },
)
SchemaFor472ResponseBodyTextEventStream = StreamSystemLiveDataError


@dataclass
class ApiResponseFor472(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor472ResponseBodyTextEventStream,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_472 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor472,
    content={
        'text/event-stream': api_client.MediaType(
            schema=SchemaFor472ResponseBodyTextEventStream),
    },
)
SchemaFor550ResponseBodyTextEventStream = StreamSystemLiveDataError


@dataclass
class ApiResponseFor550(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor550ResponseBodyTextEventStream,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_550 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor550,
    content={
        'text/event-stream': api_client.MediaType(
            schema=SchemaFor550ResponseBodyTextEventStream),
    },
)
SchemaFor551ResponseBodyTextEventStream = StreamSystemLiveDataError


@dataclass
class ApiResponseFor551(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor551ResponseBodyTextEventStream,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_551 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor551,
    content={
        'text/event-stream': api_client.MediaType(
            schema=SchemaFor551ResponseBodyTextEventStream),
    },
)
SchemaFor552ResponseBodyTextEventStream = StreamSystemLiveDataError


@dataclass
class ApiResponseFor552(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor552ResponseBodyTextEventStream,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_552 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor552,
    content={
        'text/event-stream': api_client.MediaType(
            schema=SchemaFor552ResponseBodyTextEventStream),
    },
)
_all_accept_content_types = (
    'text/event-stream',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _stream_system_live_data_oapg(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _stream_system_live_data_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _stream_system_live_data_oapg(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _stream_system_live_data_oapg(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        Site Level Live Status
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (
            request_path_system_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)

        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_duration,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class StreamSystemLiveData(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def stream_system_live_data(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def stream_system_live_data(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def stream_system_live_data(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def stream_system_live_data(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._stream_system_live_data_oapg(
            header_params=header_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._stream_system_live_data_oapg(
            header_params=header_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


