# coding: utf-8

"""
    The Enphase Monitoring API

    Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.  # noqa: E501

    The version of the OpenAPI document: 4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from monitoring import schemas  # noqa: F401


class GetSystemLoadControlSettingsResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            system_id = schemas.IntSchema
            
            
            class load_control_data(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                name = schemas.StrSchema
                                load_name = schemas.StrSchema
                                owner_can_override = schemas.StrSchema
                                config = schemas.StrSchema
                                soc_low = schemas.IntSchema
                                soc_high = schemas.IntSchema
                                essential_start_time = schemas.IntSchema
                                essential_end_time = schemas.IntSchema
                                __annotations__ = {
                                    "name": name,
                                    "load_name": load_name,
                                    "owner_can_override": owner_can_override,
                                    "config": config,
                                    "soc_low": soc_low,
                                    "soc_high": soc_high,
                                    "essential_start_time": essential_start_time,
                                    "essential_end_time": essential_end_time,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["load_name"]) -> MetaOapg.properties.load_name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["owner_can_override"]) -> MetaOapg.properties.owner_can_override: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["config"]) -> MetaOapg.properties.config: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["soc_low"]) -> MetaOapg.properties.soc_low: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["soc_high"]) -> MetaOapg.properties.soc_high: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["essential_start_time"]) -> MetaOapg.properties.essential_start_time: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["essential_end_time"]) -> MetaOapg.properties.essential_end_time: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "load_name", "owner_can_override", "config", "soc_low", "soc_high", "essential_start_time", "essential_end_time", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["load_name"]) -> typing.Union[MetaOapg.properties.load_name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["owner_can_override"]) -> typing.Union[MetaOapg.properties.owner_can_override, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["config"]) -> typing.Union[MetaOapg.properties.config, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["soc_low"]) -> typing.Union[MetaOapg.properties.soc_low, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["soc_high"]) -> typing.Union[MetaOapg.properties.soc_high, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["essential_start_time"]) -> typing.Union[MetaOapg.properties.essential_start_time, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["essential_end_time"]) -> typing.Union[MetaOapg.properties.essential_end_time, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "load_name", "owner_can_override", "config", "soc_low", "soc_high", "essential_start_time", "essential_end_time", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                            load_name: typing.Union[MetaOapg.properties.load_name, str, schemas.Unset] = schemas.unset,
                            owner_can_override: typing.Union[MetaOapg.properties.owner_can_override, str, schemas.Unset] = schemas.unset,
                            config: typing.Union[MetaOapg.properties.config, str, schemas.Unset] = schemas.unset,
                            soc_low: typing.Union[MetaOapg.properties.soc_low, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            soc_high: typing.Union[MetaOapg.properties.soc_high, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            essential_start_time: typing.Union[MetaOapg.properties.essential_start_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            essential_end_time: typing.Union[MetaOapg.properties.essential_end_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                name=name,
                                load_name=load_name,
                                owner_can_override=owner_can_override,
                                config=config,
                                soc_low=soc_low,
                                soc_high=soc_high,
                                essential_start_time=essential_start_time,
                                essential_end_time=essential_end_time,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'load_control_data':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "system_id": system_id,
                "load_control_data": load_control_data,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["system_id"]) -> MetaOapg.properties.system_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["load_control_data"]) -> MetaOapg.properties.load_control_data: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["system_id", "load_control_data", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["system_id"]) -> typing.Union[MetaOapg.properties.system_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["load_control_data"]) -> typing.Union[MetaOapg.properties.load_control_data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["system_id", "load_control_data", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        system_id: typing.Union[MetaOapg.properties.system_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        load_control_data: typing.Union[MetaOapg.properties.load_control_data, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GetSystemLoadControlSettingsResponse':
        return super().__new__(
            cls,
            *_args,
            system_id=system_id,
            load_control_data=load_control_data,
            _configuration=_configuration,
            **kwargs,
        )
