# coding: utf-8

"""
    The Enphase Monitoring API

    Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.  # noqa: E501

    The version of the OpenAPI document: 4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from monitoring import schemas  # noqa: F401


class GetSystemDevicesResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            system_id = schemas.IntSchema
            total_devices = schemas.IntSchema
            items = schemas.StrSchema
            
            
            class devices(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class additional_properties(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class items(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    class properties:
                                        id = schemas.IntSchema
                                        last_report_at = schemas.Int64Schema
                                        name = schemas.StrSchema
                                        serial_number = schemas.StrSchema
                                        part_number = schemas.StrSchema
                                        emu_sw_version = schemas.StrSchema
                                        sku = schemas.StrSchema
                                        model = schemas.StrSchema
                                        status = schemas.StrSchema
                                        active = schemas.BoolSchema
                                        state = schemas.StrSchema
                                        config_type = schemas.StrSchema
                                        
                                        
                                        class cellular_modem(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    imei = schemas.StrSchema
                                                    part_num = schemas.StrSchema
                                                    sku = schemas.StrSchema
                                                    plan_start_date = schemas.Int64Schema
                                                    plan_end_date = schemas.Int64Schema
                                                    __annotations__ = {
                                                        "imei": imei,
                                                        "part_num": part_num,
                                                        "sku": sku,
                                                        "plan_start_date": plan_start_date,
                                                        "plan_end_date": plan_end_date,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["imei"]) -> MetaOapg.properties.imei: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["part_num"]) -> MetaOapg.properties.part_num: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["sku"]) -> MetaOapg.properties.sku: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["plan_start_date"]) -> MetaOapg.properties.plan_start_date: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["plan_end_date"]) -> MetaOapg.properties.plan_end_date: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["imei", "part_num", "sku", "plan_start_date", "plan_end_date", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["imei"]) -> typing.Union[MetaOapg.properties.imei, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["part_num"]) -> typing.Union[MetaOapg.properties.part_num, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["sku"]) -> typing.Union[MetaOapg.properties.sku, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["plan_start_date"]) -> typing.Union[MetaOapg.properties.plan_start_date, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["plan_end_date"]) -> typing.Union[MetaOapg.properties.plan_end_date, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["imei", "part_num", "sku", "plan_start_date", "plan_end_date", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                imei: typing.Union[MetaOapg.properties.imei, str, schemas.Unset] = schemas.unset,
                                                part_num: typing.Union[MetaOapg.properties.part_num, str, schemas.Unset] = schemas.unset,
                                                sku: typing.Union[MetaOapg.properties.sku, str, schemas.Unset] = schemas.unset,
                                                plan_start_date: typing.Union[MetaOapg.properties.plan_start_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                plan_end_date: typing.Union[MetaOapg.properties.plan_end_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'cellular_modem':
                                                return super().__new__(
                                                    cls,
                                                    *_args,
                                                    imei=imei,
                                                    part_num=part_num,
                                                    sku=sku,
                                                    plan_start_date=plan_start_date,
                                                    plan_end_date=plan_end_date,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                        __annotations__ = {
                                            "id": id,
                                            "last_report_at": last_report_at,
                                            "name": name,
                                            "serial_number": serial_number,
                                            "part_number": part_number,
                                            "emu_sw_version": emu_sw_version,
                                            "sku": sku,
                                            "model": model,
                                            "status": status,
                                            "active": active,
                                            "state": state,
                                            "config_type": config_type,
                                            "cellular_modem": cellular_modem,
                                        }
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["last_report_at"]) -> MetaOapg.properties.last_report_at: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["serial_number"]) -> MetaOapg.properties.serial_number: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["part_number"]) -> MetaOapg.properties.part_number: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["emu_sw_version"]) -> MetaOapg.properties.emu_sw_version: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["sku"]) -> MetaOapg.properties.sku: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["config_type"]) -> MetaOapg.properties.config_type: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["cellular_modem"]) -> MetaOapg.properties.cellular_modem: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "last_report_at", "name", "serial_number", "part_number", "emu_sw_version", "sku", "model", "status", "active", "state", "config_type", "cellular_modem", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["last_report_at"]) -> typing.Union[MetaOapg.properties.last_report_at, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["serial_number"]) -> typing.Union[MetaOapg.properties.serial_number, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["part_number"]) -> typing.Union[MetaOapg.properties.part_number, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["emu_sw_version"]) -> typing.Union[MetaOapg.properties.emu_sw_version, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["sku"]) -> typing.Union[MetaOapg.properties.sku, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> typing.Union[MetaOapg.properties.model, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union[MetaOapg.properties.active, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["config_type"]) -> typing.Union[MetaOapg.properties.config_type, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["cellular_modem"]) -> typing.Union[MetaOapg.properties.cellular_modem, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "last_report_at", "name", "serial_number", "part_number", "emu_sw_version", "sku", "model", "status", "active", "state", "config_type", "cellular_modem", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                    id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                    last_report_at: typing.Union[MetaOapg.properties.last_report_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                    name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                    serial_number: typing.Union[MetaOapg.properties.serial_number, str, schemas.Unset] = schemas.unset,
                                    part_number: typing.Union[MetaOapg.properties.part_number, str, schemas.Unset] = schemas.unset,
                                    emu_sw_version: typing.Union[MetaOapg.properties.emu_sw_version, str, schemas.Unset] = schemas.unset,
                                    sku: typing.Union[MetaOapg.properties.sku, str, schemas.Unset] = schemas.unset,
                                    model: typing.Union[MetaOapg.properties.model, str, schemas.Unset] = schemas.unset,
                                    status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
                                    active: typing.Union[MetaOapg.properties.active, bool, schemas.Unset] = schemas.unset,
                                    state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
                                    config_type: typing.Union[MetaOapg.properties.config_type, str, schemas.Unset] = schemas.unset,
                                    cellular_modem: typing.Union[MetaOapg.properties.cellular_modem, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'items':
                                    return super().__new__(
                                        cls,
                                        *_args,
                                        id=id,
                                        last_report_at=last_report_at,
                                        name=name,
                                        serial_number=serial_number,
                                        part_number=part_number,
                                        emu_sw_version=emu_sw_version,
                                        sku=sku,
                                        model=model,
                                        status=status,
                                        active=active,
                                        state=state,
                                        config_type=config_type,
                                        cellular_modem=cellular_modem,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'additional_properties':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, list, tuple, ],
                ) -> 'devices':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "system_id": system_id,
                "total_devices": total_devices,
                "items": items,
                "devices": devices,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["system_id"]) -> MetaOapg.properties.system_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_devices"]) -> MetaOapg.properties.total_devices: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["devices"]) -> MetaOapg.properties.devices: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["system_id", "total_devices", "items", "devices", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["system_id"]) -> typing.Union[MetaOapg.properties.system_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_devices"]) -> typing.Union[MetaOapg.properties.total_devices, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> typing.Union[MetaOapg.properties.items, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["devices"]) -> typing.Union[MetaOapg.properties.devices, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["system_id", "total_devices", "items", "devices", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        system_id: typing.Union[MetaOapg.properties.system_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_devices: typing.Union[MetaOapg.properties.total_devices, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        items: typing.Union[MetaOapg.properties.items, str, schemas.Unset] = schemas.unset,
        devices: typing.Union[MetaOapg.properties.devices, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GetSystemDevicesResponse':
        return super().__new__(
            cls,
            *_args,
            system_id=system_id,
            total_devices=total_devices,
            items=items,
            devices=devices,
            _configuration=_configuration,
            **kwargs,
        )
