# coding: utf-8

"""
    The Enphase Monitoring API

    Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.  # noqa: E501

    The version of the OpenAPI document: 4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from monitoring import schemas  # noqa: F401


class GetSystemRgmStatsResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            system_id = schemas.IntSchema
            total_devices = schemas.IntSchema
        
            @staticmethod
            def meta() -> typing.Type['Meta']:
                return Meta
            
            
            class intervals(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                end_at = schemas.Int64Schema
                                devices_reporting = schemas.IntSchema
                                wh_del = schemas.IntSchema
                                __annotations__ = {
                                    "end_at": end_at,
                                    "devices_reporting": devices_reporting,
                                    "wh_del": wh_del,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["end_at"]) -> MetaOapg.properties.end_at: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["devices_reporting"]) -> MetaOapg.properties.devices_reporting: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["wh_del"]) -> MetaOapg.properties.wh_del: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["end_at", "devices_reporting", "wh_del", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["end_at"]) -> typing.Union[MetaOapg.properties.end_at, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["devices_reporting"]) -> typing.Union[MetaOapg.properties.devices_reporting, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["wh_del"]) -> typing.Union[MetaOapg.properties.wh_del, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["end_at", "devices_reporting", "wh_del", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            end_at: typing.Union[MetaOapg.properties.end_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            devices_reporting: typing.Union[MetaOapg.properties.devices_reporting, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            wh_del: typing.Union[MetaOapg.properties.wh_del, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                end_at=end_at,
                                devices_reporting=devices_reporting,
                                wh_del=wh_del,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'intervals':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class meter_intervals(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                meter_serial_number = schemas.StrSchema
                                envoy_serial_number = schemas.StrSchema
                                
                                
                                class intervals(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    channel = schemas.IntSchema
                                                    end_at = schemas.Int64Schema
                                                    wh_del = schemas.Float32Schema
                                                    curr_w = schemas.IntSchema
                                                    __annotations__ = {
                                                        "channel": channel,
                                                        "end_at": end_at,
                                                        "wh_del": wh_del,
                                                        "curr_w": curr_w,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["channel"]) -> MetaOapg.properties.channel: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["end_at"]) -> MetaOapg.properties.end_at: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["wh_del"]) -> MetaOapg.properties.wh_del: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["curr_w"]) -> MetaOapg.properties.curr_w: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["channel", "end_at", "wh_del", "curr_w", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> typing.Union[MetaOapg.properties.channel, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["end_at"]) -> typing.Union[MetaOapg.properties.end_at, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["wh_del"]) -> typing.Union[MetaOapg.properties.wh_del, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["curr_w"]) -> typing.Union[MetaOapg.properties.curr_w, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["channel", "end_at", "wh_del", "curr_w", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                channel: typing.Union[MetaOapg.properties.channel, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                end_at: typing.Union[MetaOapg.properties.end_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                wh_del: typing.Union[MetaOapg.properties.wh_del, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                curr_w: typing.Union[MetaOapg.properties.curr_w, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *_args,
                                                    channel=channel,
                                                    end_at=end_at,
                                                    wh_del=wh_del,
                                                    curr_w=curr_w,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'intervals':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                __annotations__ = {
                                    "meter_serial_number": meter_serial_number,
                                    "envoy_serial_number": envoy_serial_number,
                                    "intervals": intervals,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["meter_serial_number"]) -> MetaOapg.properties.meter_serial_number: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["envoy_serial_number"]) -> MetaOapg.properties.envoy_serial_number: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["intervals"]) -> MetaOapg.properties.intervals: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["meter_serial_number", "envoy_serial_number", "intervals", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["meter_serial_number"]) -> typing.Union[MetaOapg.properties.meter_serial_number, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["envoy_serial_number"]) -> typing.Union[MetaOapg.properties.envoy_serial_number, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["intervals"]) -> typing.Union[MetaOapg.properties.intervals, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["meter_serial_number", "envoy_serial_number", "intervals", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            meter_serial_number: typing.Union[MetaOapg.properties.meter_serial_number, str, schemas.Unset] = schemas.unset,
                            envoy_serial_number: typing.Union[MetaOapg.properties.envoy_serial_number, str, schemas.Unset] = schemas.unset,
                            intervals: typing.Union[MetaOapg.properties.intervals, list, tuple, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                meter_serial_number=meter_serial_number,
                                envoy_serial_number=envoy_serial_number,
                                intervals=intervals,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'meter_intervals':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "system_id": system_id,
                "total_devices": total_devices,
                "meta": meta,
                "intervals": intervals,
                "meter_intervals": meter_intervals,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["system_id"]) -> MetaOapg.properties.system_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_devices"]) -> MetaOapg.properties.total_devices: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meta"]) -> 'Meta': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["intervals"]) -> MetaOapg.properties.intervals: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meter_intervals"]) -> MetaOapg.properties.meter_intervals: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["system_id", "total_devices", "meta", "intervals", "meter_intervals", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["system_id"]) -> typing.Union[MetaOapg.properties.system_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_devices"]) -> typing.Union[MetaOapg.properties.total_devices, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> typing.Union['Meta', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["intervals"]) -> typing.Union[MetaOapg.properties.intervals, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meter_intervals"]) -> typing.Union[MetaOapg.properties.meter_intervals, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["system_id", "total_devices", "meta", "intervals", "meter_intervals", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        system_id: typing.Union[MetaOapg.properties.system_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_devices: typing.Union[MetaOapg.properties.total_devices, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        meta: typing.Union['Meta', schemas.Unset] = schemas.unset,
        intervals: typing.Union[MetaOapg.properties.intervals, list, tuple, schemas.Unset] = schemas.unset,
        meter_intervals: typing.Union[MetaOapg.properties.meter_intervals, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GetSystemRgmStatsResponse':
        return super().__new__(
            cls,
            *_args,
            system_id=system_id,
            total_devices=total_devices,
            meta=meta,
            intervals=intervals,
            meter_intervals=meter_intervals,
            _configuration=_configuration,
            **kwargs,
        )

from monitoring.model.meta import Meta
