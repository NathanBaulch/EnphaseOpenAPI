# coding: utf-8

"""
    The Enphase Monitoring API

    Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.  # noqa: E501

    The version of the OpenAPI document: 4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from monitoring import schemas  # noqa: F401


class BatteryDeviceTelemetry(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            system_id = schemas.IntSchema
            serial_number = schemas.StrSchema
        
            @staticmethod
            def granularity() -> typing.Type['TelemetryGranularityEnum']:
                return TelemetryGranularityEnum
            total_devices = schemas.IntSchema
            start_at = schemas.Int64Schema
            end_at = schemas.Int64Schema
            items = schemas.StrSchema
            
            
            class intervals(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                end_at = schemas.Int64Schema
                                
                                
                                class charge(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            enwh = schemas.IntSchema
                                            __annotations__ = {
                                                "enwh": enwh,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["enwh"]) -> MetaOapg.properties.enwh: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["enwh", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["enwh"]) -> typing.Union[MetaOapg.properties.enwh, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["enwh", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        enwh: typing.Union[MetaOapg.properties.enwh, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'charge':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            enwh=enwh,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                
                                
                                class discharge(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            enwh = schemas.IntSchema
                                            __annotations__ = {
                                                "enwh": enwh,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["enwh"]) -> MetaOapg.properties.enwh: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["enwh", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["enwh"]) -> typing.Union[MetaOapg.properties.enwh, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["enwh", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        enwh: typing.Union[MetaOapg.properties.enwh, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'discharge':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            enwh=enwh,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                
                                
                                class soc(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            percent = schemas.IntSchema
                                            __annotations__ = {
                                                "percent": percent,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["percent"]) -> MetaOapg.properties.percent: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["percent", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["percent"]) -> typing.Union[MetaOapg.properties.percent, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["percent", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        percent: typing.Union[MetaOapg.properties.percent, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'soc':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            percent=percent,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                __annotations__ = {
                                    "end_at": end_at,
                                    "charge": charge,
                                    "discharge": discharge,
                                    "soc": soc,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["end_at"]) -> MetaOapg.properties.end_at: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["charge"]) -> MetaOapg.properties.charge: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["discharge"]) -> MetaOapg.properties.discharge: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["soc"]) -> MetaOapg.properties.soc: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["end_at", "charge", "discharge", "soc", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["end_at"]) -> typing.Union[MetaOapg.properties.end_at, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["charge"]) -> typing.Union[MetaOapg.properties.charge, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["discharge"]) -> typing.Union[MetaOapg.properties.discharge, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["soc"]) -> typing.Union[MetaOapg.properties.soc, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["end_at", "charge", "discharge", "soc", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            end_at: typing.Union[MetaOapg.properties.end_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            charge: typing.Union[MetaOapg.properties.charge, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                            discharge: typing.Union[MetaOapg.properties.discharge, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                            soc: typing.Union[MetaOapg.properties.soc, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                end_at=end_at,
                                charge=charge,
                                discharge=discharge,
                                soc=soc,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'intervals':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            last_reported_time = schemas.IntSchema
            last_reported_soc = schemas.StrSchema
            __annotations__ = {
                "system_id": system_id,
                "serial_number": serial_number,
                "granularity": granularity,
                "total_devices": total_devices,
                "start_at": start_at,
                "end_at": end_at,
                "items": items,
                "intervals": intervals,
                "last_reported_time": last_reported_time,
                "last_reported_soc": last_reported_soc,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["system_id"]) -> MetaOapg.properties.system_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serial_number"]) -> MetaOapg.properties.serial_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["granularity"]) -> 'TelemetryGranularityEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_devices"]) -> MetaOapg.properties.total_devices: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_at"]) -> MetaOapg.properties.start_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_at"]) -> MetaOapg.properties.end_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["intervals"]) -> MetaOapg.properties.intervals: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_reported_time"]) -> MetaOapg.properties.last_reported_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_reported_soc"]) -> MetaOapg.properties.last_reported_soc: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["system_id", "serial_number", "granularity", "total_devices", "start_at", "end_at", "items", "intervals", "last_reported_time", "last_reported_soc", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["system_id"]) -> typing.Union[MetaOapg.properties.system_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serial_number"]) -> typing.Union[MetaOapg.properties.serial_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["granularity"]) -> typing.Union['TelemetryGranularityEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_devices"]) -> typing.Union[MetaOapg.properties.total_devices, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_at"]) -> typing.Union[MetaOapg.properties.start_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_at"]) -> typing.Union[MetaOapg.properties.end_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> typing.Union[MetaOapg.properties.items, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["intervals"]) -> typing.Union[MetaOapg.properties.intervals, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_reported_time"]) -> typing.Union[MetaOapg.properties.last_reported_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_reported_soc"]) -> typing.Union[MetaOapg.properties.last_reported_soc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["system_id", "serial_number", "granularity", "total_devices", "start_at", "end_at", "items", "intervals", "last_reported_time", "last_reported_soc", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        system_id: typing.Union[MetaOapg.properties.system_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        serial_number: typing.Union[MetaOapg.properties.serial_number, str, schemas.Unset] = schemas.unset,
        granularity: typing.Union['TelemetryGranularityEnum', schemas.Unset] = schemas.unset,
        total_devices: typing.Union[MetaOapg.properties.total_devices, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        start_at: typing.Union[MetaOapg.properties.start_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        end_at: typing.Union[MetaOapg.properties.end_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        items: typing.Union[MetaOapg.properties.items, str, schemas.Unset] = schemas.unset,
        intervals: typing.Union[MetaOapg.properties.intervals, list, tuple, schemas.Unset] = schemas.unset,
        last_reported_time: typing.Union[MetaOapg.properties.last_reported_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        last_reported_soc: typing.Union[MetaOapg.properties.last_reported_soc, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BatteryDeviceTelemetry':
        return super().__new__(
            cls,
            *_args,
            system_id=system_id,
            serial_number=serial_number,
            granularity=granularity,
            total_devices=total_devices,
            start_at=start_at,
            end_at=end_at,
            items=items,
            intervals=intervals,
            last_reported_time=last_reported_time,
            last_reported_soc=last_reported_soc,
            _configuration=_configuration,
            **kwargs,
        )

from monitoring.model.telemetry_granularity_enum import TelemetryGranularityEnum
