# coding: utf-8

"""
    The Enphase Monitoring API

    Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.  # noqa: E501

    The version of the OpenAPI document: 4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from monitoring import schemas  # noqa: F401


class SystemDetails(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "system_id",
        }
        
        class properties:
            system_id = schemas.IntSchema
            name = schemas.StrSchema
            public_name = schemas.StrSchema
            timezone = schemas.StrSchema
            
            
            class address(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        city = schemas.StrSchema
                        state = schemas.StrSchema
                        country = schemas.StrSchema
                        postal_code = schemas.StrSchema
                        __annotations__ = {
                            "city": city,
                            "state": state,
                            "country": country,
                            "postal_code": postal_code,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["postal_code"]) -> MetaOapg.properties.postal_code: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["city", "state", "country", "postal_code", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["postal_code"]) -> typing.Union[MetaOapg.properties.postal_code, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["city", "state", "country", "postal_code", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
                    state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
                    country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
                    postal_code: typing.Union[MetaOapg.properties.postal_code, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'address':
                    return super().__new__(
                        cls,
                        *_args,
                        city=city,
                        state=state,
                        country=country,
                        postal_code=postal_code,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def connection_type() -> typing.Type['SystemConnectionTypeEnum']:
                return SystemConnectionTypeEnum
            energy_lifetime = schemas.IntSchema
            energy_today = schemas.IntSchema
            system_size = schemas.IntSchema
        
            @staticmethod
            def status() -> typing.Type['SystemStatusEnum']:
                return SystemStatusEnum
            last_report_at = schemas.Int64Schema
            last_energy_at = schemas.Int64Schema
            operational_at = schemas.Int64Schema
        
            @staticmethod
            def attachment_type() -> typing.Type['SystemAttachmentTypeEnum']:
                return SystemAttachmentTypeEnum
            interconnect_date = schemas.DateSchema
            reference = schemas.StrSchema
            
            
            class other_references(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'other_references':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "system_id": system_id,
                "name": name,
                "public_name": public_name,
                "timezone": timezone,
                "address": address,
                "connection_type": connection_type,
                "energy_lifetime": energy_lifetime,
                "energy_today": energy_today,
                "system_size": system_size,
                "status": status,
                "last_report_at": last_report_at,
                "last_energy_at": last_energy_at,
                "operational_at": operational_at,
                "attachment_type": attachment_type,
                "interconnect_date": interconnect_date,
                "reference": reference,
                "other_references": other_references,
            }
    
    system_id: MetaOapg.properties.system_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["system_id"]) -> MetaOapg.properties.system_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["public_name"]) -> MetaOapg.properties.public_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connection_type"]) -> 'SystemConnectionTypeEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["energy_lifetime"]) -> MetaOapg.properties.energy_lifetime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["energy_today"]) -> MetaOapg.properties.energy_today: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["system_size"]) -> MetaOapg.properties.system_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'SystemStatusEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_report_at"]) -> MetaOapg.properties.last_report_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_energy_at"]) -> MetaOapg.properties.last_energy_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operational_at"]) -> MetaOapg.properties.operational_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachment_type"]) -> 'SystemAttachmentTypeEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interconnect_date"]) -> MetaOapg.properties.interconnect_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reference"]) -> MetaOapg.properties.reference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["other_references"]) -> MetaOapg.properties.other_references: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["system_id", "name", "public_name", "timezone", "address", "connection_type", "energy_lifetime", "energy_today", "system_size", "status", "last_report_at", "last_energy_at", "operational_at", "attachment_type", "interconnect_date", "reference", "other_references", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["system_id"]) -> MetaOapg.properties.system_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["public_name"]) -> typing.Union[MetaOapg.properties.public_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> typing.Union[MetaOapg.properties.timezone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union[MetaOapg.properties.address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connection_type"]) -> typing.Union['SystemConnectionTypeEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["energy_lifetime"]) -> typing.Union[MetaOapg.properties.energy_lifetime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["energy_today"]) -> typing.Union[MetaOapg.properties.energy_today, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["system_size"]) -> typing.Union[MetaOapg.properties.system_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['SystemStatusEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_report_at"]) -> typing.Union[MetaOapg.properties.last_report_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_energy_at"]) -> typing.Union[MetaOapg.properties.last_energy_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operational_at"]) -> typing.Union[MetaOapg.properties.operational_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachment_type"]) -> typing.Union['SystemAttachmentTypeEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interconnect_date"]) -> typing.Union[MetaOapg.properties.interconnect_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reference"]) -> typing.Union[MetaOapg.properties.reference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["other_references"]) -> typing.Union[MetaOapg.properties.other_references, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["system_id", "name", "public_name", "timezone", "address", "connection_type", "energy_lifetime", "energy_today", "system_size", "status", "last_report_at", "last_energy_at", "operational_at", "attachment_type", "interconnect_date", "reference", "other_references", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        system_id: typing.Union[MetaOapg.properties.system_id, decimal.Decimal, int, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        public_name: typing.Union[MetaOapg.properties.public_name, str, schemas.Unset] = schemas.unset,
        timezone: typing.Union[MetaOapg.properties.timezone, str, schemas.Unset] = schemas.unset,
        address: typing.Union[MetaOapg.properties.address, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        connection_type: typing.Union['SystemConnectionTypeEnum', schemas.Unset] = schemas.unset,
        energy_lifetime: typing.Union[MetaOapg.properties.energy_lifetime, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        energy_today: typing.Union[MetaOapg.properties.energy_today, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        system_size: typing.Union[MetaOapg.properties.system_size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        status: typing.Union['SystemStatusEnum', schemas.Unset] = schemas.unset,
        last_report_at: typing.Union[MetaOapg.properties.last_report_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        last_energy_at: typing.Union[MetaOapg.properties.last_energy_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        operational_at: typing.Union[MetaOapg.properties.operational_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        attachment_type: typing.Union['SystemAttachmentTypeEnum', schemas.Unset] = schemas.unset,
        interconnect_date: typing.Union[MetaOapg.properties.interconnect_date, str, date, schemas.Unset] = schemas.unset,
        reference: typing.Union[MetaOapg.properties.reference, str, schemas.Unset] = schemas.unset,
        other_references: typing.Union[MetaOapg.properties.other_references, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SystemDetails':
        return super().__new__(
            cls,
            *_args,
            system_id=system_id,
            name=name,
            public_name=public_name,
            timezone=timezone,
            address=address,
            connection_type=connection_type,
            energy_lifetime=energy_lifetime,
            energy_today=energy_today,
            system_size=system_size,
            status=status,
            last_report_at=last_report_at,
            last_energy_at=last_energy_at,
            operational_at=operational_at,
            attachment_type=attachment_type,
            interconnect_date=interconnect_date,
            reference=reference,
            other_references=other_references,
            _configuration=_configuration,
            **kwargs,
        )

from monitoring.model.system_attachment_type_enum import SystemAttachmentTypeEnum
from monitoring.model.system_connection_type_enum import SystemConnectionTypeEnum
from monitoring.model.system_status_enum import SystemStatusEnum
