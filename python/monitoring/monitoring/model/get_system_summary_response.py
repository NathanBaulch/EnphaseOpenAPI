# coding: utf-8

"""
    The Enphase Monitoring API

    Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.  # noqa: E501

    The version of the OpenAPI document: 4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from monitoring import schemas  # noqa: F401


class GetSystemSummaryResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            system_id = schemas.IntSchema
            current_power = schemas.IntSchema
            energy_lifetime = schemas.IntSchema
            energy_today = schemas.IntSchema
            last_interval_end_at = schemas.Int64Schema
            last_report_at = schemas.Int64Schema
            modules = schemas.IntSchema
            operational_at = schemas.Int64Schema
            size_w = schemas.IntSchema
            source = schemas.StrSchema
        
            @staticmethod
            def status() -> typing.Type['SystemStatusEnum']:
                return SystemStatusEnum
            summary_date = schemas.DateSchema
            __annotations__ = {
                "system_id": system_id,
                "current_power": current_power,
                "energy_lifetime": energy_lifetime,
                "energy_today": energy_today,
                "last_interval_end_at": last_interval_end_at,
                "last_report_at": last_report_at,
                "modules": modules,
                "operational_at": operational_at,
                "size_w": size_w,
                "source": source,
                "status": status,
                "summary_date": summary_date,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["system_id"]) -> MetaOapg.properties.system_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["current_power"]) -> MetaOapg.properties.current_power: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["energy_lifetime"]) -> MetaOapg.properties.energy_lifetime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["energy_today"]) -> MetaOapg.properties.energy_today: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_interval_end_at"]) -> MetaOapg.properties.last_interval_end_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_report_at"]) -> MetaOapg.properties.last_report_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modules"]) -> MetaOapg.properties.modules: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operational_at"]) -> MetaOapg.properties.operational_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size_w"]) -> MetaOapg.properties.size_w: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'SystemStatusEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summary_date"]) -> MetaOapg.properties.summary_date: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["system_id", "current_power", "energy_lifetime", "energy_today", "last_interval_end_at", "last_report_at", "modules", "operational_at", "size_w", "source", "status", "summary_date", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["system_id"]) -> typing.Union[MetaOapg.properties.system_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["current_power"]) -> typing.Union[MetaOapg.properties.current_power, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["energy_lifetime"]) -> typing.Union[MetaOapg.properties.energy_lifetime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["energy_today"]) -> typing.Union[MetaOapg.properties.energy_today, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_interval_end_at"]) -> typing.Union[MetaOapg.properties.last_interval_end_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_report_at"]) -> typing.Union[MetaOapg.properties.last_report_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modules"]) -> typing.Union[MetaOapg.properties.modules, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operational_at"]) -> typing.Union[MetaOapg.properties.operational_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size_w"]) -> typing.Union[MetaOapg.properties.size_w, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['SystemStatusEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summary_date"]) -> typing.Union[MetaOapg.properties.summary_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["system_id", "current_power", "energy_lifetime", "energy_today", "last_interval_end_at", "last_report_at", "modules", "operational_at", "size_w", "source", "status", "summary_date", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        system_id: typing.Union[MetaOapg.properties.system_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        current_power: typing.Union[MetaOapg.properties.current_power, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        energy_lifetime: typing.Union[MetaOapg.properties.energy_lifetime, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        energy_today: typing.Union[MetaOapg.properties.energy_today, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        last_interval_end_at: typing.Union[MetaOapg.properties.last_interval_end_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        last_report_at: typing.Union[MetaOapg.properties.last_report_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        modules: typing.Union[MetaOapg.properties.modules, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        operational_at: typing.Union[MetaOapg.properties.operational_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        size_w: typing.Union[MetaOapg.properties.size_w, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
        status: typing.Union['SystemStatusEnum', schemas.Unset] = schemas.unset,
        summary_date: typing.Union[MetaOapg.properties.summary_date, str, date, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GetSystemSummaryResponse':
        return super().__new__(
            cls,
            *_args,
            system_id=system_id,
            current_power=current_power,
            energy_lifetime=energy_lifetime,
            energy_today=energy_today,
            last_interval_end_at=last_interval_end_at,
            last_report_at=last_report_at,
            modules=modules,
            operational_at=operational_at,
            size_w=size_w,
            source=source,
            status=status,
            summary_date=summary_date,
            _configuration=_configuration,
            **kwargs,
        )

from monitoring.model.system_status_enum import SystemStatusEnum
