# coding: utf-8

"""
    The Enphase Monitoring API

    Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.  # noqa: E501

    The version of the OpenAPI document: 4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from monitoring import schemas  # noqa: F401


class GetInvertersSummaryByEnvoyOrSiteResponse(
    schemas.ListSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class items(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    signal_strength = schemas.IntSchema
                    
                    
                    class micro_inverters(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class items(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    class properties:
                                        id = schemas.IntSchema
                                        serial_number = schemas.StrSchema
                                        model = schemas.StrSchema
                                        part_number = schemas.StrSchema
                                        sku = schemas.StrSchema
                                        status = schemas.StrSchema
                                        
                                        
                                        class power_produced(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    value = schemas.IntSchema
                                                    units = schemas.StrSchema
                                                    precision = schemas.IntSchema
                                                    __annotations__ = {
                                                        "value": value,
                                                        "units": units,
                                                        "precision": precision,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["units"]) -> MetaOapg.properties.units: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["precision"]) -> MetaOapg.properties.precision: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["value", "units", "precision", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["units"]) -> typing.Union[MetaOapg.properties.units, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["precision"]) -> typing.Union[MetaOapg.properties.precision, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["value", "units", "precision", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                value: typing.Union[MetaOapg.properties.value, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                units: typing.Union[MetaOapg.properties.units, str, schemas.Unset] = schemas.unset,
                                                precision: typing.Union[MetaOapg.properties.precision, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'power_produced':
                                                return super().__new__(
                                                    cls,
                                                    *_args,
                                                    value=value,
                                                    units=units,
                                                    precision=precision,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                        proc_load = schemas.StrSchema
                                        param_table = schemas.StrSchema
                                        envoy_serial_number = schemas.StrSchema
                                        
                                        
                                        class energy(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    value = schemas.IntSchema
                                                    units = schemas.StrSchema
                                                    precision = schemas.IntSchema
                                                    __annotations__ = {
                                                        "value": value,
                                                        "units": units,
                                                        "precision": precision,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["units"]) -> MetaOapg.properties.units: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["precision"]) -> MetaOapg.properties.precision: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["value", "units", "precision", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["units"]) -> typing.Union[MetaOapg.properties.units, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["precision"]) -> typing.Union[MetaOapg.properties.precision, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["value", "units", "precision", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                value: typing.Union[MetaOapg.properties.value, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                units: typing.Union[MetaOapg.properties.units, str, schemas.Unset] = schemas.unset,
                                                precision: typing.Union[MetaOapg.properties.precision, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'energy':
                                                return super().__new__(
                                                    cls,
                                                    *_args,
                                                    value=value,
                                                    units=units,
                                                    precision=precision,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                        grid_profile = schemas.StrSchema
                                        last_report_date = schemas.DateTimeSchema
                                        __annotations__ = {
                                            "id": id,
                                            "serial_number": serial_number,
                                            "model": model,
                                            "part_number": part_number,
                                            "sku": sku,
                                            "status": status,
                                            "power_produced": power_produced,
                                            "proc_load": proc_load,
                                            "param_table": param_table,
                                            "envoy_serial_number": envoy_serial_number,
                                            "energy": energy,
                                            "grid_profile": grid_profile,
                                            "last_report_date": last_report_date,
                                        }
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["serial_number"]) -> MetaOapg.properties.serial_number: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["part_number"]) -> MetaOapg.properties.part_number: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["sku"]) -> MetaOapg.properties.sku: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["power_produced"]) -> MetaOapg.properties.power_produced: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["proc_load"]) -> MetaOapg.properties.proc_load: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["param_table"]) -> MetaOapg.properties.param_table: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["envoy_serial_number"]) -> MetaOapg.properties.envoy_serial_number: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["energy"]) -> MetaOapg.properties.energy: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["grid_profile"]) -> MetaOapg.properties.grid_profile: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["last_report_date"]) -> MetaOapg.properties.last_report_date: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "serial_number", "model", "part_number", "sku", "status", "power_produced", "proc_load", "param_table", "envoy_serial_number", "energy", "grid_profile", "last_report_date", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["serial_number"]) -> typing.Union[MetaOapg.properties.serial_number, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> typing.Union[MetaOapg.properties.model, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["part_number"]) -> typing.Union[MetaOapg.properties.part_number, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["sku"]) -> typing.Union[MetaOapg.properties.sku, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["power_produced"]) -> typing.Union[MetaOapg.properties.power_produced, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["proc_load"]) -> typing.Union[MetaOapg.properties.proc_load, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["param_table"]) -> typing.Union[MetaOapg.properties.param_table, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["envoy_serial_number"]) -> typing.Union[MetaOapg.properties.envoy_serial_number, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["energy"]) -> typing.Union[MetaOapg.properties.energy, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["grid_profile"]) -> typing.Union[MetaOapg.properties.grid_profile, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["last_report_date"]) -> typing.Union[MetaOapg.properties.last_report_date, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "serial_number", "model", "part_number", "sku", "status", "power_produced", "proc_load", "param_table", "envoy_serial_number", "energy", "grid_profile", "last_report_date", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                    id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                    serial_number: typing.Union[MetaOapg.properties.serial_number, str, schemas.Unset] = schemas.unset,
                                    model: typing.Union[MetaOapg.properties.model, str, schemas.Unset] = schemas.unset,
                                    part_number: typing.Union[MetaOapg.properties.part_number, str, schemas.Unset] = schemas.unset,
                                    sku: typing.Union[MetaOapg.properties.sku, str, schemas.Unset] = schemas.unset,
                                    status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
                                    power_produced: typing.Union[MetaOapg.properties.power_produced, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                    proc_load: typing.Union[MetaOapg.properties.proc_load, str, schemas.Unset] = schemas.unset,
                                    param_table: typing.Union[MetaOapg.properties.param_table, str, schemas.Unset] = schemas.unset,
                                    envoy_serial_number: typing.Union[MetaOapg.properties.envoy_serial_number, str, schemas.Unset] = schemas.unset,
                                    energy: typing.Union[MetaOapg.properties.energy, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                    grid_profile: typing.Union[MetaOapg.properties.grid_profile, str, schemas.Unset] = schemas.unset,
                                    last_report_date: typing.Union[MetaOapg.properties.last_report_date, str, datetime, schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'items':
                                    return super().__new__(
                                        cls,
                                        *_args,
                                        id=id,
                                        serial_number=serial_number,
                                        model=model,
                                        part_number=part_number,
                                        sku=sku,
                                        status=status,
                                        power_produced=power_produced,
                                        proc_load=proc_load,
                                        param_table=param_table,
                                        envoy_serial_number=envoy_serial_number,
                                        energy=energy,
                                        grid_profile=grid_profile,
                                        last_report_date=last_report_date,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'micro_inverters':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    __annotations__ = {
                        "signal_strength": signal_strength,
                        "micro_inverters": micro_inverters,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["signal_strength"]) -> MetaOapg.properties.signal_strength: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["micro_inverters"]) -> MetaOapg.properties.micro_inverters: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["signal_strength", "micro_inverters", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["signal_strength"]) -> typing.Union[MetaOapg.properties.signal_strength, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["micro_inverters"]) -> typing.Union[MetaOapg.properties.micro_inverters, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["signal_strength", "micro_inverters", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                signal_strength: typing.Union[MetaOapg.properties.signal_strength, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                micro_inverters: typing.Union[MetaOapg.properties.micro_inverters, list, tuple, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'items':
                return super().__new__(
                    cls,
                    *_args,
                    signal_strength=signal_strength,
                    micro_inverters=micro_inverters,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'GetInvertersSummaryByEnvoyOrSiteResponse':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
