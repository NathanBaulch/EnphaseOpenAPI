# coding: utf-8

"""
    The Enphase Monitoring API

    Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.  # noqa: E501

    The version of the OpenAPI document: 4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from monitoring import schemas  # noqa: F401


class UpdateSystemLoadControlSettingsRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
            load_name = schemas.StrSchema
            mode = schemas.StrSchema
            
            
            class soc_low(
                schemas.IntSchema
            ):
                pass
            essential_start_time = schemas.IntSchema
            essential_end_time = schemas.IntSchema
            __annotations__ = {
                "name": name,
                "load_name": load_name,
                "mode": mode,
                "soc_low": soc_low,
                "essential_start_time": essential_start_time,
                "essential_end_time": essential_end_time,
            }
    
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["load_name"]) -> MetaOapg.properties.load_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mode"]) -> MetaOapg.properties.mode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["soc_low"]) -> MetaOapg.properties.soc_low: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["essential_start_time"]) -> MetaOapg.properties.essential_start_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["essential_end_time"]) -> MetaOapg.properties.essential_end_time: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "load_name", "mode", "soc_low", "essential_start_time", "essential_end_time", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["load_name"]) -> typing.Union[MetaOapg.properties.load_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mode"]) -> typing.Union[MetaOapg.properties.mode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["soc_low"]) -> typing.Union[MetaOapg.properties.soc_low, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["essential_start_time"]) -> typing.Union[MetaOapg.properties.essential_start_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["essential_end_time"]) -> typing.Union[MetaOapg.properties.essential_end_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "load_name", "mode", "soc_low", "essential_start_time", "essential_end_time", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        load_name: typing.Union[MetaOapg.properties.load_name, str, schemas.Unset] = schemas.unset,
        mode: typing.Union[MetaOapg.properties.mode, str, schemas.Unset] = schemas.unset,
        soc_low: typing.Union[MetaOapg.properties.soc_low, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        essential_start_time: typing.Union[MetaOapg.properties.essential_start_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        essential_end_time: typing.Union[MetaOapg.properties.essential_end_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UpdateSystemLoadControlSettingsRequest':
        return super().__new__(
            cls,
            *_args,
            name=name,
            load_name=load_name,
            mode=mode,
            soc_low=soc_low,
            essential_start_time=essential_start_time,
            essential_end_time=essential_end_time,
            _configuration=_configuration,
            **kwargs,
        )
