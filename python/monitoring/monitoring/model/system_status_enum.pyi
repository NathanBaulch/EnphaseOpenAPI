# coding: utf-8

"""
    The Enphase Monitoring API

    Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.  # noqa: E501

    The version of the OpenAPI document: 4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from monitoring import schemas  # noqa: F401


class SystemStatusEnum(
    schemas.EnumBase,
    schemas.StrSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    
    @schemas.classproperty
    def DEACTIVATED(cls):
        return cls("deactivated")
    
    @schemas.classproperty
    def NORMAL(cls):
        return cls("normal")
    
    @schemas.classproperty
    def COMM(cls):
        return cls("comm")
    
    @schemas.classproperty
    def MICRO(cls):
        return cls("micro")
    
    @schemas.classproperty
    def POWER(cls):
        return cls("power")
    
    @schemas.classproperty
    def METER(cls):
        return cls("meter")
    
    @schemas.classproperty
    def METER_ISSUE(cls):
        return cls("meter_issue")
    
    @schemas.classproperty
    def BATTERY(cls):
        return cls("battery")
    
    @schemas.classproperty
    def STORAGE_IDLE(cls):
        return cls("storage_idle")
    
    @schemas.classproperty
    def ENCHARGE(cls):
        return cls("encharge")
    
    @schemas.classproperty
    def ENCHARGE_ISSUE(cls):
        return cls("encharge_issue")
    
    @schemas.classproperty
    def ENPOWER(cls):
        return cls("enpower")
    
    @schemas.classproperty
    def ENPOWER_ISSUE(cls):
        return cls("enpower_issue")
    
    @schemas.classproperty
    def RETIRED(cls):
        return cls("retired")
    
    @schemas.classproperty
    def NOT_MONITORED(cls):
        return cls("not_monitored")
    
    @schemas.classproperty
    def UNUSED(cls):
        return cls("unused")
    
    @schemas.classproperty
    def DISABLED(cls):
        return cls("disabled")
    
    @schemas.classproperty
    def DEBUG(cls):
        return cls("debug")
    
    @schemas.classproperty
    def INFO(cls):
        return cls("info")
    
    @schemas.classproperty
    def MONITORED(cls):
        return cls("monitored")
    
    @schemas.classproperty
    def MUTED(cls):
        return cls("muted")
    
    @schemas.classproperty
    def WARNING(cls):
        return cls("warning")
    
    @schemas.classproperty
    def ERROR(cls):
        return cls("error")
    
    @schemas.classproperty
    def NO_DATA(cls):
        return cls("no_data")
    
    @schemas.classproperty
    def RMA(cls):
        return cls("rma")
    
    @schemas.classproperty
    def UNKNOWN(cls):
        return cls("unknown")
    
    @schemas.classproperty
    def NSR(cls):
        return cls("nsr")
    
    @schemas.classproperty
    def ANY(cls):
        return cls("any")
    
    @schemas.classproperty
    def DATA_UPLOAD(cls):
        return cls("data_upload")
    
    @schemas.classproperty
    def ON_GRID(cls):
        return cls("on_grid")
    
    @schemas.classproperty
    def OFF_GRID(cls):
        return cls("off_grid")
    
    @schemas.classproperty
    def GRID_UNKNOWN(cls):
        return cls("grid_unknown")
