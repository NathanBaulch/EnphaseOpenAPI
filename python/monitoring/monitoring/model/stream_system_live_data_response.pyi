# coding: utf-8

"""
    The Enphase Monitoring API

    Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.  # noqa: E501

    The version of the OpenAPI document: 4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from monitoring import schemas  # noqa: F401


class StreamSystemLiveDataResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class data(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class data(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    battery_mode = schemas.StrSchema
                                    battery_power = schemas.IntSchema
                                    battery_soc = schemas.IntSchema
                                    consumption_power = schemas.IntSchema
                                    
                                    
                                    class envoy_serial_number(
                                        schemas.ListSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            items = schemas.StrSchema
                                    
                                        def __new__(
                                            cls,
                                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'envoy_serial_number':
                                            return super().__new__(
                                                cls,
                                                _arg,
                                                _configuration=_configuration,
                                            )
                                    
                                        def __getitem__(self, i: int) -> MetaOapg.items:
                                            return super().__getitem__(i)
                                    generator_power = schemas.IntSchema
                                    grid_power = schemas.IntSchema
                                    grid_status = schemas.StrSchema
                                    pv_power = schemas.IntSchema
                                    system_id = schemas.IntSchema
                                    __annotations__ = {
                                        "battery_mode": battery_mode,
                                        "battery_power": battery_power,
                                        "battery_soc": battery_soc,
                                        "consumption_power": consumption_power,
                                        "envoy_serial_number": envoy_serial_number,
                                        "generator_power": generator_power,
                                        "grid_power": grid_power,
                                        "grid_status": grid_status,
                                        "pv_power": pv_power,
                                        "system_id": system_id,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["battery_mode"]) -> MetaOapg.properties.battery_mode: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["battery_power"]) -> MetaOapg.properties.battery_power: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["battery_soc"]) -> MetaOapg.properties.battery_soc: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["consumption_power"]) -> MetaOapg.properties.consumption_power: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["envoy_serial_number"]) -> MetaOapg.properties.envoy_serial_number: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["generator_power"]) -> MetaOapg.properties.generator_power: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["grid_power"]) -> MetaOapg.properties.grid_power: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["grid_status"]) -> MetaOapg.properties.grid_status: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["pv_power"]) -> MetaOapg.properties.pv_power: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["system_id"]) -> MetaOapg.properties.system_id: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["battery_mode", "battery_power", "battery_soc", "consumption_power", "envoy_serial_number", "generator_power", "grid_power", "grid_status", "pv_power", "system_id", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["battery_mode"]) -> typing.Union[MetaOapg.properties.battery_mode, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["battery_power"]) -> typing.Union[MetaOapg.properties.battery_power, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["battery_soc"]) -> typing.Union[MetaOapg.properties.battery_soc, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["consumption_power"]) -> typing.Union[MetaOapg.properties.consumption_power, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["envoy_serial_number"]) -> typing.Union[MetaOapg.properties.envoy_serial_number, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["generator_power"]) -> typing.Union[MetaOapg.properties.generator_power, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["grid_power"]) -> typing.Union[MetaOapg.properties.grid_power, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["grid_status"]) -> typing.Union[MetaOapg.properties.grid_status, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["pv_power"]) -> typing.Union[MetaOapg.properties.pv_power, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["system_id"]) -> typing.Union[MetaOapg.properties.system_id, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["battery_mode", "battery_power", "battery_soc", "consumption_power", "envoy_serial_number", "generator_power", "grid_power", "grid_status", "pv_power", "system_id", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                battery_mode: typing.Union[MetaOapg.properties.battery_mode, str, schemas.Unset] = schemas.unset,
                                battery_power: typing.Union[MetaOapg.properties.battery_power, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                battery_soc: typing.Union[MetaOapg.properties.battery_soc, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                consumption_power: typing.Union[MetaOapg.properties.consumption_power, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                envoy_serial_number: typing.Union[MetaOapg.properties.envoy_serial_number, list, tuple, schemas.Unset] = schemas.unset,
                                generator_power: typing.Union[MetaOapg.properties.generator_power, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                grid_power: typing.Union[MetaOapg.properties.grid_power, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                grid_status: typing.Union[MetaOapg.properties.grid_status, str, schemas.Unset] = schemas.unset,
                                pv_power: typing.Union[MetaOapg.properties.pv_power, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                system_id: typing.Union[MetaOapg.properties.system_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'data':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    battery_mode=battery_mode,
                                    battery_power=battery_power,
                                    battery_soc=battery_soc,
                                    consumption_power=consumption_power,
                                    envoy_serial_number=envoy_serial_number,
                                    generator_power=generator_power,
                                    grid_power=grid_power,
                                    grid_status=grid_status,
                                    pv_power=pv_power,
                                    system_id=system_id,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        timestamp_epoch = schemas.IntSchema
                        timestamp_utc = schemas.StrSchema
                        type = schemas.StrSchema
                        __annotations__ = {
                            "data": data,
                            "timestamp_epoch": timestamp_epoch,
                            "timestamp_utc": timestamp_utc,
                            "type": type,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["timestamp_epoch"]) -> MetaOapg.properties.timestamp_epoch: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["timestamp_utc"]) -> MetaOapg.properties.timestamp_utc: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["data", "timestamp_epoch", "timestamp_utc", "type", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["timestamp_epoch"]) -> typing.Union[MetaOapg.properties.timestamp_epoch, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["timestamp_utc"]) -> typing.Union[MetaOapg.properties.timestamp_utc, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["data", "timestamp_epoch", "timestamp_utc", "type", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    timestamp_epoch: typing.Union[MetaOapg.properties.timestamp_epoch, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    timestamp_utc: typing.Union[MetaOapg.properties.timestamp_utc, str, schemas.Unset] = schemas.unset,
                    type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'data':
                    return super().__new__(
                        cls,
                        *_args,
                        data=data,
                        timestamp_epoch=timestamp_epoch,
                        timestamp_utc=timestamp_utc,
                        type=type,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "data": data,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["data", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["data", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StreamSystemLiveDataResponse':
        return super().__new__(
            cls,
            *_args,
            data=data,
            _configuration=_configuration,
            **kwargs,
        )
