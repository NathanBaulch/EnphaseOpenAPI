# coding: utf-8

"""
    The Enphase Monitoring API

    Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.  # noqa: E501

    The version of the OpenAPI document: 4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from monitoring import schemas  # noqa: F401


class SearchSystemsRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "system",
        }
        
        class properties:
            
            
            class system(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class ids(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.IntSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'ids':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        name = schemas.StrSchema
                    
                        @staticmethod
                        def public_name() -> typing.Type['SystemPublicNameEnum']:
                            return SystemPublicNameEnum
                        
                        
                        class statuses(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                @staticmethod
                                def items() -> typing.Type['SystemStatusEnum']:
                                    return SystemStatusEnum
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple['SystemStatusEnum'], typing.List['SystemStatusEnum']],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'statuses':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> 'SystemStatusEnum':
                                return super().__getitem__(i)
                    
                        @staticmethod
                        def connection_type() -> typing.Type['SystemConnectionTypeEnum']:
                            return SystemConnectionTypeEnum
                        __annotations__ = {
                            "ids": ids,
                            "name": name,
                            "public_name": public_name,
                            "statuses": statuses,
                            "connection_type": connection_type,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["ids"]) -> MetaOapg.properties.ids: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["public_name"]) -> 'SystemPublicNameEnum': ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["statuses"]) -> MetaOapg.properties.statuses: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["connection_type"]) -> 'SystemConnectionTypeEnum': ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["ids", "name", "public_name", "statuses", "connection_type", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["ids"]) -> typing.Union[MetaOapg.properties.ids, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["public_name"]) -> typing.Union['SystemPublicNameEnum', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["statuses"]) -> typing.Union[MetaOapg.properties.statuses, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["connection_type"]) -> typing.Union['SystemConnectionTypeEnum', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ids", "name", "public_name", "statuses", "connection_type", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    ids: typing.Union[MetaOapg.properties.ids, list, tuple, schemas.Unset] = schemas.unset,
                    name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                    public_name: typing.Union['SystemPublicNameEnum', schemas.Unset] = schemas.unset,
                    statuses: typing.Union[MetaOapg.properties.statuses, list, tuple, schemas.Unset] = schemas.unset,
                    connection_type: typing.Union['SystemConnectionTypeEnum', schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'system':
                    return super().__new__(
                        cls,
                        *_args,
                        ids=ids,
                        name=name,
                        public_name=public_name,
                        statuses=statuses,
                        connection_type=connection_type,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def sort_by() -> typing.Type['SystemSortByEnum']:
                return SystemSortByEnum
            __annotations__ = {
                "system": system,
                "sort_by": sort_by,
            }
    
    system: MetaOapg.properties.system
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["system"]) -> MetaOapg.properties.system: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sort_by"]) -> 'SystemSortByEnum': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["system", "sort_by", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["system"]) -> MetaOapg.properties.system: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sort_by"]) -> typing.Union['SystemSortByEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["system", "sort_by", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        system: typing.Union[MetaOapg.properties.system, dict, frozendict.frozendict, ],
        sort_by: typing.Union['SystemSortByEnum', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SearchSystemsRequest':
        return super().__new__(
            cls,
            *_args,
            system=system,
            sort_by=sort_by,
            _configuration=_configuration,
            **kwargs,
        )

from monitoring.model.system_connection_type_enum import SystemConnectionTypeEnum
from monitoring.model.system_public_name_enum import SystemPublicNameEnum
from monitoring.model.system_sort_by_enum import SystemSortByEnum
from monitoring.model.system_status_enum import SystemStatusEnum
