# coding: utf-8

"""
    The Enphase Monitoring API

    Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.  # noqa: E501

    The version of the OpenAPI document: 4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from monitoring import schemas  # noqa: F401


class UpdateSystemBatterySettingsRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            battery_mode = schemas.StrSchema
            reserve_soc = schemas.IntSchema
            energy_independence = schemas.StrSchema
            __annotations__ = {
                "battery_mode": battery_mode,
                "reserve_soc": reserve_soc,
                "energy_independence": energy_independence,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["battery_mode"]) -> MetaOapg.properties.battery_mode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reserve_soc"]) -> MetaOapg.properties.reserve_soc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["energy_independence"]) -> MetaOapg.properties.energy_independence: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["battery_mode", "reserve_soc", "energy_independence", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["battery_mode"]) -> typing.Union[MetaOapg.properties.battery_mode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reserve_soc"]) -> typing.Union[MetaOapg.properties.reserve_soc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["energy_independence"]) -> typing.Union[MetaOapg.properties.energy_independence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["battery_mode", "reserve_soc", "energy_independence", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        battery_mode: typing.Union[MetaOapg.properties.battery_mode, str, schemas.Unset] = schemas.unset,
        reserve_soc: typing.Union[MetaOapg.properties.reserve_soc, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        energy_independence: typing.Union[MetaOapg.properties.energy_independence, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UpdateSystemBatterySettingsRequest':
        return super().__new__(
            cls,
            *_args,
            battery_mode=battery_mode,
            reserve_soc=reserve_soc,
            energy_independence=energy_independence,
            _configuration=_configuration,
            **kwargs,
        )
