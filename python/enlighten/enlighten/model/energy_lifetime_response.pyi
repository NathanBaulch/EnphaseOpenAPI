# coding: utf-8

"""
    The Enlighten Systems API

    The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from enlighten import schemas  # noqa: F401


class EnergyLifetimeResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "production",
            "meta",
            "system_id",
            "start_date",
        }
        
        class properties:
            start_date = schemas.DateSchema
            system_id = schemas.IntSchema
            
            
            class production(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.IntSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'production':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def meta() -> typing.Type['Meta']:
                return Meta
            
            
            class micro_production(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.IntSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'micro_production':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class meter_production(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.IntSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'meter_production':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            meter_start_date = schemas.DateSchema
            __annotations__ = {
                "start_date": start_date,
                "system_id": system_id,
                "production": production,
                "meta": meta,
                "micro_production": micro_production,
                "meter_production": meter_production,
                "meter_start_date": meter_start_date,
            }
    
    production: MetaOapg.properties.production
    meta: 'Meta'
    system_id: MetaOapg.properties.system_id
    start_date: MetaOapg.properties.start_date
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["system_id"]) -> MetaOapg.properties.system_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["production"]) -> MetaOapg.properties.production: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meta"]) -> 'Meta': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["micro_production"]) -> MetaOapg.properties.micro_production: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meter_production"]) -> MetaOapg.properties.meter_production: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meter_start_date"]) -> MetaOapg.properties.meter_start_date: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["start_date", "system_id", "production", "meta", "micro_production", "meter_production", "meter_start_date", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["system_id"]) -> MetaOapg.properties.system_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["production"]) -> MetaOapg.properties.production: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> 'Meta': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["micro_production"]) -> typing.Union[MetaOapg.properties.micro_production, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meter_production"]) -> typing.Union[MetaOapg.properties.meter_production, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meter_start_date"]) -> typing.Union[MetaOapg.properties.meter_start_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["start_date", "system_id", "production", "meta", "micro_production", "meter_production", "meter_start_date", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        production: typing.Union[MetaOapg.properties.production, list, tuple, ],
        meta: 'Meta',
        system_id: typing.Union[MetaOapg.properties.system_id, decimal.Decimal, int, ],
        start_date: typing.Union[MetaOapg.properties.start_date, str, date, ],
        micro_production: typing.Union[MetaOapg.properties.micro_production, list, tuple, schemas.Unset] = schemas.unset,
        meter_production: typing.Union[MetaOapg.properties.meter_production, list, tuple, schemas.Unset] = schemas.unset,
        meter_start_date: typing.Union[MetaOapg.properties.meter_start_date, str, date, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EnergyLifetimeResponse':
        return super().__new__(
            cls,
            *args,
            production=production,
            meta=meta,
            system_id=system_id,
            start_date=start_date,
            micro_production=micro_production,
            meter_production=meter_production,
            meter_start_date=meter_start_date,
            _configuration=_configuration,
            **kwargs,
        )

from enlighten.model.meta import Meta
