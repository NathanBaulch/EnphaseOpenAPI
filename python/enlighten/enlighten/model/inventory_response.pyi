# coding: utf-8

"""
    The Enlighten Systems API

    The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from enlighten import schemas  # noqa: F401


class InventoryResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "meta",
            "system_id",
            "inverters",
            "meters",
        }
        
        class properties:
            system_id = schemas.IntSchema
            
            
            class inverters(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "model",
                                "sn",
                                "sku",
                            }
                            
                            class properties:
                                sn = schemas.StrSchema
                                model = schemas.StrSchema
                                sku = schemas.StrSchema
                                __annotations__ = {
                                    "sn": sn,
                                    "model": model,
                                    "sku": sku,
                                }
                        
                        model: MetaOapg.properties.model
                        sn: MetaOapg.properties.sn
                        sku: MetaOapg.properties.sku
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["sn"]) -> MetaOapg.properties.sn: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["sku"]) -> MetaOapg.properties.sku: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["sn", "model", "sku", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["sn"]) -> MetaOapg.properties.sn: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["sku"]) -> MetaOapg.properties.sku: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sn", "model", "sku", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            model: typing.Union[MetaOapg.properties.model, str, ],
                            sn: typing.Union[MetaOapg.properties.sn, str, ],
                            sku: typing.Union[MetaOapg.properties.sku, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                model=model,
                                sn=sn,
                                sku=sku,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'inverters':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class meters(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "model",
                                "sn",
                                "manufacturer",
                            }
                            
                            class properties:
                                sn = schemas.StrSchema
                                manufacturer = schemas.StrSchema
                                model = schemas.StrSchema
                                status = schemas.StrSchema
                                state = schemas.StrSchema
                                __annotations__ = {
                                    "sn": sn,
                                    "manufacturer": manufacturer,
                                    "model": model,
                                    "status": status,
                                    "state": state,
                                }
                        
                        model: MetaOapg.properties.model
                        sn: MetaOapg.properties.sn
                        manufacturer: MetaOapg.properties.manufacturer
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["sn"]) -> MetaOapg.properties.sn: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["manufacturer"]) -> MetaOapg.properties.manufacturer: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["sn", "manufacturer", "model", "status", "state", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["sn"]) -> MetaOapg.properties.sn: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["manufacturer"]) -> MetaOapg.properties.manufacturer: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sn", "manufacturer", "model", "status", "state", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            model: typing.Union[MetaOapg.properties.model, str, ],
                            sn: typing.Union[MetaOapg.properties.sn, str, ],
                            manufacturer: typing.Union[MetaOapg.properties.manufacturer, str, ],
                            status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
                            state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                model=model,
                                sn=sn,
                                manufacturer=manufacturer,
                                status=status,
                                state=state,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'meters':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def meta() -> typing.Type['Meta']:
                return Meta
            
            
            class envoys(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "model",
                                "sn",
                                "sku",
                            }
                            
                            class properties:
                                sn = schemas.StrSchema
                                model = schemas.StrSchema
                                sku = schemas.StrSchema
                                __annotations__ = {
                                    "sn": sn,
                                    "model": model,
                                    "sku": sku,
                                }
                        
                        model: MetaOapg.properties.model
                        sn: MetaOapg.properties.sn
                        sku: MetaOapg.properties.sku
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["sn"]) -> MetaOapg.properties.sn: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["sku"]) -> MetaOapg.properties.sku: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["sn", "model", "sku", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["sn"]) -> MetaOapg.properties.sn: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["sku"]) -> MetaOapg.properties.sku: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sn", "model", "sku", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            model: typing.Union[MetaOapg.properties.model, str, ],
                            sn: typing.Union[MetaOapg.properties.sn, str, ],
                            sku: typing.Union[MetaOapg.properties.sku, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                model=model,
                                sn=sn,
                                sku=sku,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'envoys':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "system_id": system_id,
                "inverters": inverters,
                "meters": meters,
                "meta": meta,
                "envoys": envoys,
            }
    
    meta: 'Meta'
    system_id: MetaOapg.properties.system_id
    inverters: MetaOapg.properties.inverters
    meters: MetaOapg.properties.meters
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["system_id"]) -> MetaOapg.properties.system_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inverters"]) -> MetaOapg.properties.inverters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meters"]) -> MetaOapg.properties.meters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meta"]) -> 'Meta': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["envoys"]) -> MetaOapg.properties.envoys: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["system_id", "inverters", "meters", "meta", "envoys", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["system_id"]) -> MetaOapg.properties.system_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inverters"]) -> MetaOapg.properties.inverters: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meters"]) -> MetaOapg.properties.meters: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> 'Meta': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["envoys"]) -> typing.Union[MetaOapg.properties.envoys, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["system_id", "inverters", "meters", "meta", "envoys", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        meta: 'Meta',
        system_id: typing.Union[MetaOapg.properties.system_id, decimal.Decimal, int, ],
        inverters: typing.Union[MetaOapg.properties.inverters, list, tuple, ],
        meters: typing.Union[MetaOapg.properties.meters, list, tuple, ],
        envoys: typing.Union[MetaOapg.properties.envoys, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InventoryResponse':
        return super().__new__(
            cls,
            *args,
            meta=meta,
            system_id=system_id,
            inverters=inverters,
            meters=meters,
            envoys=envoys,
            _configuration=_configuration,
            **kwargs,
        )

from enlighten.model.meta import Meta
