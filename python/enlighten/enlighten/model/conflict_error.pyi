# coding: utf-8

"""
    The Enlighten Systems API

    The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from enlighten import schemas  # noqa: F401


class ConflictError(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "period_end",
            "reason",
            "period",
            "period_start",
            "limit",
            "message",
        }
        
        class properties:
            reason = schemas.StrSchema
            
            
            class message(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'message':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class period(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def HOUR(cls):
                    return cls("hour")
                
                @schemas.classproperty
                def MINUTE(cls):
                    return cls("minute")
                
                @schemas.classproperty
                def SECOND(cls):
                    return cls("second")
            period_start = schemas.IntSchema
            period_end = schemas.IntSchema
            limit = schemas.IntSchema
            __annotations__ = {
                "reason": reason,
                "message": message,
                "period": period,
                "period_start": period_start,
                "period_end": period_end,
                "limit": limit,
            }
    
    period_end: MetaOapg.properties.period_end
    reason: MetaOapg.properties.reason
    period: MetaOapg.properties.period
    period_start: MetaOapg.properties.period_start
    limit: MetaOapg.properties.limit
    message: MetaOapg.properties.message
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["period"]) -> MetaOapg.properties.period: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["period_start"]) -> MetaOapg.properties.period_start: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["period_end"]) -> MetaOapg.properties.period_end: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["limit"]) -> MetaOapg.properties.limit: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["reason", "message", "period", "period_start", "period_end", "limit", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["period"]) -> MetaOapg.properties.period: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["period_start"]) -> MetaOapg.properties.period_start: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["period_end"]) -> MetaOapg.properties.period_end: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["limit"]) -> MetaOapg.properties.limit: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["reason", "message", "period", "period_start", "period_end", "limit", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        period_end: typing.Union[MetaOapg.properties.period_end, decimal.Decimal, int, ],
        reason: typing.Union[MetaOapg.properties.reason, str, ],
        period: typing.Union[MetaOapg.properties.period, str, ],
        period_start: typing.Union[MetaOapg.properties.period_start, decimal.Decimal, int, ],
        limit: typing.Union[MetaOapg.properties.limit, decimal.Decimal, int, ],
        message: typing.Union[MetaOapg.properties.message, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ConflictError':
        return super().__new__(
            cls,
            *_args,
            period_end=period_end,
            reason=reason,
            period=period,
            period_start=period_start,
            limit=limit,
            message=message,
            _configuration=_configuration,
            **kwargs,
        )
