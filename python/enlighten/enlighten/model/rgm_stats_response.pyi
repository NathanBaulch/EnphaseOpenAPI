# coding: utf-8

"""
    The Enlighten Systems API

    The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from enlighten import schemas  # noqa: F401


class RgmStatsResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "intervals",
            "total_devices",
            "meta",
            "system_id",
            "meter_intervals",
        }
        
        class properties:
            system_id = schemas.IntSchema
            total_devices = schemas.IntSchema
        
            @staticmethod
            def meta() -> typing.Type['Meta']:
                return Meta
            
            
            class intervals(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "end_at",
                                "wh_del",
                                "devices_reporting",
                            }
                            
                            class properties:
                                end_at = schemas.Int64Schema
                                wh_del = schemas.IntSchema
                                devices_reporting = schemas.IntSchema
                                __annotations__ = {
                                    "end_at": end_at,
                                    "wh_del": wh_del,
                                    "devices_reporting": devices_reporting,
                                }
                        
                        end_at: MetaOapg.properties.end_at
                        wh_del: MetaOapg.properties.wh_del
                        devices_reporting: MetaOapg.properties.devices_reporting
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["end_at"]) -> MetaOapg.properties.end_at: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["wh_del"]) -> MetaOapg.properties.wh_del: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["devices_reporting"]) -> MetaOapg.properties.devices_reporting: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["end_at", "wh_del", "devices_reporting", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["end_at"]) -> MetaOapg.properties.end_at: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["wh_del"]) -> MetaOapg.properties.wh_del: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["devices_reporting"]) -> MetaOapg.properties.devices_reporting: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["end_at", "wh_del", "devices_reporting", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            end_at: typing.Union[MetaOapg.properties.end_at, decimal.Decimal, int, ],
                            wh_del: typing.Union[MetaOapg.properties.wh_del, decimal.Decimal, int, ],
                            devices_reporting: typing.Union[MetaOapg.properties.devices_reporting, decimal.Decimal, int, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                end_at=end_at,
                                wh_del=wh_del,
                                devices_reporting=devices_reporting,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'intervals':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class meter_intervals(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "intervals",
                                "envoy_serial_number",
                                "meter_serial_number",
                            }
                            
                            class properties:
                                meter_serial_number = schemas.StrSchema
                                envoy_serial_number = schemas.StrSchema
                                
                                
                                class intervals(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                required = {
                                                    "end_at",
                                                    "channel",
                                                    "wh_del",
                                                    "curr_w",
                                                }
                                                
                                                class properties:
                                                    channel = schemas.IntSchema
                                                    end_at = schemas.Int64Schema
                                                    
                                                    
                                                    class wh_del(
                                                        schemas.Float32Base,
                                                        schemas.NumberBase,
                                                        schemas.NoneBase,
                                                        schemas.Schema,
                                                        schemas.NoneDecimalMixin
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            format = 'float'
                                                    
                                                    
                                                        def __new__(
                                                            cls,
                                                            *_args: typing.Union[None, decimal.Decimal, int, float, ],
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                        ) -> 'wh_del':
                                                            return super().__new__(
                                                                cls,
                                                                *_args,
                                                                _configuration=_configuration,
                                                            )
                                                    
                                                    
                                                    class curr_w(
                                                        schemas.IntBase,
                                                        schemas.NoneBase,
                                                        schemas.Schema,
                                                        schemas.NoneDecimalMixin
                                                    ):
                                                    
                                                    
                                                        def __new__(
                                                            cls,
                                                            *_args: typing.Union[None, decimal.Decimal, int, ],
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                        ) -> 'curr_w':
                                                            return super().__new__(
                                                                cls,
                                                                *_args,
                                                                _configuration=_configuration,
                                                            )
                                                    __annotations__ = {
                                                        "channel": channel,
                                                        "end_at": end_at,
                                                        "wh_del": wh_del,
                                                        "curr_w": curr_w,
                                                    }
                                            
                                            end_at: MetaOapg.properties.end_at
                                            channel: MetaOapg.properties.channel
                                            wh_del: MetaOapg.properties.wh_del
                                            curr_w: MetaOapg.properties.curr_w
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["channel"]) -> MetaOapg.properties.channel: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["end_at"]) -> MetaOapg.properties.end_at: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["wh_del"]) -> MetaOapg.properties.wh_del: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["curr_w"]) -> MetaOapg.properties.curr_w: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["channel", "end_at", "wh_del", "curr_w", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> MetaOapg.properties.channel: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["end_at"]) -> MetaOapg.properties.end_at: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["wh_del"]) -> MetaOapg.properties.wh_del: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["curr_w"]) -> MetaOapg.properties.curr_w: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["channel", "end_at", "wh_del", "curr_w", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                end_at: typing.Union[MetaOapg.properties.end_at, decimal.Decimal, int, ],
                                                channel: typing.Union[MetaOapg.properties.channel, decimal.Decimal, int, ],
                                                wh_del: typing.Union[MetaOapg.properties.wh_del, None, decimal.Decimal, int, float, ],
                                                curr_w: typing.Union[MetaOapg.properties.curr_w, None, decimal.Decimal, int, ],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *_args,
                                                    end_at=end_at,
                                                    channel=channel,
                                                    wh_del=wh_del,
                                                    curr_w=curr_w,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'intervals':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                __annotations__ = {
                                    "meter_serial_number": meter_serial_number,
                                    "envoy_serial_number": envoy_serial_number,
                                    "intervals": intervals,
                                }
                        
                        intervals: MetaOapg.properties.intervals
                        envoy_serial_number: MetaOapg.properties.envoy_serial_number
                        meter_serial_number: MetaOapg.properties.meter_serial_number
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["meter_serial_number"]) -> MetaOapg.properties.meter_serial_number: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["envoy_serial_number"]) -> MetaOapg.properties.envoy_serial_number: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["intervals"]) -> MetaOapg.properties.intervals: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["meter_serial_number", "envoy_serial_number", "intervals", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["meter_serial_number"]) -> MetaOapg.properties.meter_serial_number: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["envoy_serial_number"]) -> MetaOapg.properties.envoy_serial_number: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["intervals"]) -> MetaOapg.properties.intervals: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["meter_serial_number", "envoy_serial_number", "intervals", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            intervals: typing.Union[MetaOapg.properties.intervals, list, tuple, ],
                            envoy_serial_number: typing.Union[MetaOapg.properties.envoy_serial_number, str, ],
                            meter_serial_number: typing.Union[MetaOapg.properties.meter_serial_number, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                intervals=intervals,
                                envoy_serial_number=envoy_serial_number,
                                meter_serial_number=meter_serial_number,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'meter_intervals':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "system_id": system_id,
                "total_devices": total_devices,
                "meta": meta,
                "intervals": intervals,
                "meter_intervals": meter_intervals,
            }
    
    intervals: MetaOapg.properties.intervals
    total_devices: MetaOapg.properties.total_devices
    meta: 'Meta'
    system_id: MetaOapg.properties.system_id
    meter_intervals: MetaOapg.properties.meter_intervals
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["system_id"]) -> MetaOapg.properties.system_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_devices"]) -> MetaOapg.properties.total_devices: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meta"]) -> 'Meta': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["intervals"]) -> MetaOapg.properties.intervals: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meter_intervals"]) -> MetaOapg.properties.meter_intervals: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["system_id", "total_devices", "meta", "intervals", "meter_intervals", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["system_id"]) -> MetaOapg.properties.system_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_devices"]) -> MetaOapg.properties.total_devices: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> 'Meta': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["intervals"]) -> MetaOapg.properties.intervals: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meter_intervals"]) -> MetaOapg.properties.meter_intervals: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["system_id", "total_devices", "meta", "intervals", "meter_intervals", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        intervals: typing.Union[MetaOapg.properties.intervals, list, tuple, ],
        total_devices: typing.Union[MetaOapg.properties.total_devices, decimal.Decimal, int, ],
        meta: 'Meta',
        system_id: typing.Union[MetaOapg.properties.system_id, decimal.Decimal, int, ],
        meter_intervals: typing.Union[MetaOapg.properties.meter_intervals, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RgmStatsResponse':
        return super().__new__(
            cls,
            *_args,
            intervals=intervals,
            total_devices=total_devices,
            meta=meta,
            system_id=system_id,
            meter_intervals=meter_intervals,
            _configuration=_configuration,
            **kwargs,
        )

from enlighten.model.meta import Meta
