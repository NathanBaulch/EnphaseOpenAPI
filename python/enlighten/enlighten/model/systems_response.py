# coding: utf-8

"""
    The Enlighten Systems API

    The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from enlighten import schemas  # noqa: F401


class SystemsResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "systems",
        }
        
        class properties:
            
            
            class systems(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "country",
                                "connection_type",
                                "city",
                                "meta",
                                "system_id",
                                "timezone",
                                "system_name",
                                "system_public_name",
                                "state",
                                "postal_code",
                                "status",
                            }
                            
                            class properties:
                                system_id = schemas.IntSchema
                                system_name = schemas.StrSchema
                                system_public_name = schemas.StrSchema
                                reference = schemas.StrSchema
                                
                                
                                class other_references(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'other_references':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class country(
                                    schemas.StrSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        max_length = 2
                                        min_length = 2
                                
                                
                                class state(
                                    schemas.StrSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        min_length = 2
                                city = schemas.StrSchema
                                postal_code = schemas.StrSchema
                                timezone = schemas.StrSchema
                            
                                @staticmethod
                                def connection_type() -> typing.Type['ConnectionType']:
                                    return ConnectionType
                                
                                
                                class status(
                                    schemas.EnumBase,
                                    schemas.StrSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        enum_value_to_name = {
                                            "comm": "COMM",
                                            "power": "POWER",
                                            "meter": "METER",
                                            "meter_issue": "METER_ISSUE",
                                            "micro": "MICRO",
                                            "battery": "BATTERY",
                                            "storage_idle": "STORAGE_IDLE",
                                            "normal": "NORMAL",
                                        }
                                    
                                    @schemas.classproperty
                                    def COMM(cls):
                                        return cls("comm")
                                    
                                    @schemas.classproperty
                                    def POWER(cls):
                                        return cls("power")
                                    
                                    @schemas.classproperty
                                    def METER(cls):
                                        return cls("meter")
                                    
                                    @schemas.classproperty
                                    def METER_ISSUE(cls):
                                        return cls("meter_issue")
                                    
                                    @schemas.classproperty
                                    def MICRO(cls):
                                        return cls("micro")
                                    
                                    @schemas.classproperty
                                    def BATTERY(cls):
                                        return cls("battery")
                                    
                                    @schemas.classproperty
                                    def STORAGE_IDLE(cls):
                                        return cls("storage_idle")
                                    
                                    @schemas.classproperty
                                    def NORMAL(cls):
                                        return cls("normal")
                            
                                @staticmethod
                                def meta() -> typing.Type['Meta']:
                                    return Meta
                                __annotations__ = {
                                    "system_id": system_id,
                                    "system_name": system_name,
                                    "system_public_name": system_public_name,
                                    "reference": reference,
                                    "other_references": other_references,
                                    "country": country,
                                    "state": state,
                                    "city": city,
                                    "postal_code": postal_code,
                                    "timezone": timezone,
                                    "connection_type": connection_type,
                                    "status": status,
                                    "meta": meta,
                                }
                        
                        country: MetaOapg.properties.country
                        connection_type: 'ConnectionType'
                        city: MetaOapg.properties.city
                        meta: 'Meta'
                        system_id: MetaOapg.properties.system_id
                        timezone: MetaOapg.properties.timezone
                        system_name: MetaOapg.properties.system_name
                        system_public_name: MetaOapg.properties.system_public_name
                        state: MetaOapg.properties.state
                        postal_code: MetaOapg.properties.postal_code
                        status: MetaOapg.properties.status
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["system_id"]) -> MetaOapg.properties.system_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["system_name"]) -> MetaOapg.properties.system_name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["system_public_name"]) -> MetaOapg.properties.system_public_name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["reference"]) -> MetaOapg.properties.reference: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["other_references"]) -> MetaOapg.properties.other_references: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["postal_code"]) -> MetaOapg.properties.postal_code: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["connection_type"]) -> 'ConnectionType': ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["meta"]) -> 'Meta': ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["system_id", "system_name", "system_public_name", "reference", "other_references", "country", "state", "city", "postal_code", "timezone", "connection_type", "status", "meta", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["system_id"]) -> MetaOapg.properties.system_id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["system_name"]) -> MetaOapg.properties.system_name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["system_public_name"]) -> MetaOapg.properties.system_public_name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["reference"]) -> typing.Union[MetaOapg.properties.reference, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["other_references"]) -> typing.Union[MetaOapg.properties.other_references, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["postal_code"]) -> MetaOapg.properties.postal_code: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["connection_type"]) -> 'ConnectionType': ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> 'Meta': ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["system_id", "system_name", "system_public_name", "reference", "other_references", "country", "state", "city", "postal_code", "timezone", "connection_type", "status", "meta", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            country: typing.Union[MetaOapg.properties.country, str, ],
                            connection_type: 'ConnectionType',
                            city: typing.Union[MetaOapg.properties.city, str, ],
                            meta: 'Meta',
                            system_id: typing.Union[MetaOapg.properties.system_id, decimal.Decimal, int, ],
                            timezone: typing.Union[MetaOapg.properties.timezone, str, ],
                            system_name: typing.Union[MetaOapg.properties.system_name, str, ],
                            system_public_name: typing.Union[MetaOapg.properties.system_public_name, str, ],
                            state: typing.Union[MetaOapg.properties.state, str, ],
                            postal_code: typing.Union[MetaOapg.properties.postal_code, str, ],
                            status: typing.Union[MetaOapg.properties.status, str, ],
                            reference: typing.Union[MetaOapg.properties.reference, str, schemas.Unset] = schemas.unset,
                            other_references: typing.Union[MetaOapg.properties.other_references, list, tuple, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                country=country,
                                connection_type=connection_type,
                                city=city,
                                meta=meta,
                                system_id=system_id,
                                timezone=timezone,
                                system_name=system_name,
                                system_public_name=system_public_name,
                                state=state,
                                postal_code=postal_code,
                                status=status,
                                reference=reference,
                                other_references=other_references,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'systems':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            next = schemas.StrSchema
            __annotations__ = {
                "systems": systems,
                "next": next,
            }
    
    systems: MetaOapg.properties.systems
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systems"]) -> MetaOapg.properties.systems: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["next"]) -> MetaOapg.properties.next: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["systems", "next", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systems"]) -> MetaOapg.properties.systems: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["next"]) -> typing.Union[MetaOapg.properties.next, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["systems", "next", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        systems: typing.Union[MetaOapg.properties.systems, list, tuple, ],
        next: typing.Union[MetaOapg.properties.next, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SystemsResponse':
        return super().__new__(
            cls,
            *args,
            systems=systems,
            next=next,
            _configuration=_configuration,
            **kwargs,
        )

from enlighten.model.connection_type import ConnectionType
from enlighten.model.meta import Meta
