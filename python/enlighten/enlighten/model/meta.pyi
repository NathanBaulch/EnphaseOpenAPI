# coding: utf-8

"""
    The Enlighten Systems API

    The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from enlighten import schemas  # noqa: F401


class Meta(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Information about the system that you can use to ascertain the timeliness of the production data included in the response.
    """


    class MetaOapg:
        required = {
            "last_report_at",
            "last_energy_at",
            "operational_at",
            "status",
        }
        
        class properties:
        
            @staticmethod
            def status() -> typing.Type['Status']:
                return Status
            last_report_at = schemas.Int64Schema
            last_energy_at = schemas.Int64Schema
            operational_at = schemas.Int64Schema
            __annotations__ = {
                "status": status,
                "last_report_at": last_report_at,
                "last_energy_at": last_energy_at,
                "operational_at": operational_at,
            }
    
    last_report_at: MetaOapg.properties.last_report_at
    last_energy_at: MetaOapg.properties.last_energy_at
    operational_at: MetaOapg.properties.operational_at
    status: 'Status'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'Status': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_report_at"]) -> MetaOapg.properties.last_report_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_energy_at"]) -> MetaOapg.properties.last_energy_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operational_at"]) -> MetaOapg.properties.operational_at: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["status", "last_report_at", "last_energy_at", "operational_at", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'Status': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_report_at"]) -> MetaOapg.properties.last_report_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_energy_at"]) -> MetaOapg.properties.last_energy_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operational_at"]) -> MetaOapg.properties.operational_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["status", "last_report_at", "last_energy_at", "operational_at", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        last_report_at: typing.Union[MetaOapg.properties.last_report_at, decimal.Decimal, int, ],
        last_energy_at: typing.Union[MetaOapg.properties.last_energy_at, decimal.Decimal, int, ],
        operational_at: typing.Union[MetaOapg.properties.operational_at, decimal.Decimal, int, ],
        status: 'Status',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Meta':
        return super().__new__(
            cls,
            *args,
            last_report_at=last_report_at,
            last_energy_at=last_energy_at,
            operational_at=operational_at,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from enlighten.model.status import Status
