# coding: utf-8

"""
    The Enlighten Systems API

    The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from enlighten import schemas  # noqa: F401


class InvertersSummaryByEnvoyOrSiteResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "micro_inverters",
            "signal_strength",
        }
        
        class properties:
            signal_strength = schemas.IntSchema
            
            
            class micro_inverters(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "proc_load",
                                "serial_number",
                                "last_report_date",
                                "power_produced",
                                "envoy_serial_number",
                                "part_number",
                                "grid_profile",
                                "model",
                                "id",
                                "sku",
                                "param_table",
                                "energy",
                                "status",
                            }
                            
                            class properties:
                                id = schemas.IntSchema
                                model = schemas.StrSchema
                                part_number = schemas.StrSchema
                                serial_number = schemas.StrSchema
                                sku = schemas.StrSchema
                                
                                
                                class status(
                                    schemas.EnumBase,
                                    schemas.StrSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        enum_value_to_name = {
                                            "normal": "NORMAL",
                                            "power": "POWER",
                                            "micro": "MICRO",
                                            "retired": "RETIRED",
                                        }
                                    
                                    @schemas.classproperty
                                    def NORMAL(cls):
                                        return cls("normal")
                                    
                                    @schemas.classproperty
                                    def POWER(cls):
                                        return cls("power")
                                    
                                    @schemas.classproperty
                                    def MICRO(cls):
                                        return cls("micro")
                                    
                                    @schemas.classproperty
                                    def RETIRED(cls):
                                        return cls("retired")
                                
                                
                                class power_produced(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "precision",
                                            "units",
                                            "value",
                                        }
                                        
                                        class properties:
                                            value = schemas.IntSchema
                                            
                                            
                                            class units(
                                                schemas.EnumBase,
                                                schemas.StrSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    enum_value_to_name = {
                                                        "W": "W",
                                                    }
                                                
                                                @schemas.classproperty
                                                def W(cls):
                                                    return cls("W")
                                            precision = schemas.IntSchema
                                            __annotations__ = {
                                                "value": value,
                                                "units": units,
                                                "precision": precision,
                                            }
                                    
                                    precision: MetaOapg.properties.precision
                                    units: MetaOapg.properties.units
                                    value: MetaOapg.properties.value
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["units"]) -> MetaOapg.properties.units: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["precision"]) -> MetaOapg.properties.precision: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["value", "units", "precision", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["units"]) -> MetaOapg.properties.units: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["precision"]) -> MetaOapg.properties.precision: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["value", "units", "precision", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        precision: typing.Union[MetaOapg.properties.precision, decimal.Decimal, int, ],
                                        units: typing.Union[MetaOapg.properties.units, str, ],
                                        value: typing.Union[MetaOapg.properties.value, decimal.Decimal, int, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'power_produced':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            precision=precision,
                                            units=units,
                                            value=value,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                proc_load = schemas.StrSchema
                                param_table = schemas.StrSchema
                                envoy_serial_number = schemas.StrSchema
                                
                                
                                class energy(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "precision",
                                            "units",
                                            "value",
                                        }
                                        
                                        class properties:
                                            value = schemas.IntSchema
                                            
                                            
                                            class units(
                                                schemas.EnumBase,
                                                schemas.StrSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    enum_value_to_name = {
                                                        "Wh": "WH",
                                                        "kJ": "K_J",
                                                    }
                                                
                                                @schemas.classproperty
                                                def WH(cls):
                                                    return cls("Wh")
                                                
                                                @schemas.classproperty
                                                def K_J(cls):
                                                    return cls("kJ")
                                            precision = schemas.IntSchema
                                            __annotations__ = {
                                                "value": value,
                                                "units": units,
                                                "precision": precision,
                                            }
                                    
                                    precision: MetaOapg.properties.precision
                                    units: MetaOapg.properties.units
                                    value: MetaOapg.properties.value
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["units"]) -> MetaOapg.properties.units: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["precision"]) -> MetaOapg.properties.precision: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["value", "units", "precision", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["units"]) -> MetaOapg.properties.units: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["precision"]) -> MetaOapg.properties.precision: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["value", "units", "precision", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        precision: typing.Union[MetaOapg.properties.precision, decimal.Decimal, int, ],
                                        units: typing.Union[MetaOapg.properties.units, str, ],
                                        value: typing.Union[MetaOapg.properties.value, decimal.Decimal, int, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'energy':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            precision=precision,
                                            units=units,
                                            value=value,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                grid_profile = schemas.StrSchema
                                last_report_date = schemas.DateSchema
                                __annotations__ = {
                                    "id": id,
                                    "model": model,
                                    "part_number": part_number,
                                    "serial_number": serial_number,
                                    "sku": sku,
                                    "status": status,
                                    "power_produced": power_produced,
                                    "proc_load": proc_load,
                                    "param_table": param_table,
                                    "envoy_serial_number": envoy_serial_number,
                                    "energy": energy,
                                    "grid_profile": grid_profile,
                                    "last_report_date": last_report_date,
                                }
                        
                        proc_load: MetaOapg.properties.proc_load
                        serial_number: MetaOapg.properties.serial_number
                        last_report_date: MetaOapg.properties.last_report_date
                        power_produced: MetaOapg.properties.power_produced
                        envoy_serial_number: MetaOapg.properties.envoy_serial_number
                        part_number: MetaOapg.properties.part_number
                        grid_profile: MetaOapg.properties.grid_profile
                        model: MetaOapg.properties.model
                        id: MetaOapg.properties.id
                        sku: MetaOapg.properties.sku
                        param_table: MetaOapg.properties.param_table
                        energy: MetaOapg.properties.energy
                        status: MetaOapg.properties.status
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["part_number"]) -> MetaOapg.properties.part_number: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["serial_number"]) -> MetaOapg.properties.serial_number: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["sku"]) -> MetaOapg.properties.sku: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["power_produced"]) -> MetaOapg.properties.power_produced: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["proc_load"]) -> MetaOapg.properties.proc_load: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["param_table"]) -> MetaOapg.properties.param_table: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["envoy_serial_number"]) -> MetaOapg.properties.envoy_serial_number: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["energy"]) -> MetaOapg.properties.energy: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["grid_profile"]) -> MetaOapg.properties.grid_profile: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["last_report_date"]) -> MetaOapg.properties.last_report_date: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "model", "part_number", "serial_number", "sku", "status", "power_produced", "proc_load", "param_table", "envoy_serial_number", "energy", "grid_profile", "last_report_date", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["part_number"]) -> MetaOapg.properties.part_number: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["serial_number"]) -> MetaOapg.properties.serial_number: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["sku"]) -> MetaOapg.properties.sku: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["power_produced"]) -> MetaOapg.properties.power_produced: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["proc_load"]) -> MetaOapg.properties.proc_load: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["param_table"]) -> MetaOapg.properties.param_table: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["envoy_serial_number"]) -> MetaOapg.properties.envoy_serial_number: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["energy"]) -> MetaOapg.properties.energy: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["grid_profile"]) -> MetaOapg.properties.grid_profile: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["last_report_date"]) -> MetaOapg.properties.last_report_date: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "model", "part_number", "serial_number", "sku", "status", "power_produced", "proc_load", "param_table", "envoy_serial_number", "energy", "grid_profile", "last_report_date", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            proc_load: typing.Union[MetaOapg.properties.proc_load, str, ],
                            serial_number: typing.Union[MetaOapg.properties.serial_number, str, ],
                            last_report_date: typing.Union[MetaOapg.properties.last_report_date, str, date, ],
                            power_produced: typing.Union[MetaOapg.properties.power_produced, dict, frozendict.frozendict, ],
                            envoy_serial_number: typing.Union[MetaOapg.properties.envoy_serial_number, str, ],
                            part_number: typing.Union[MetaOapg.properties.part_number, str, ],
                            grid_profile: typing.Union[MetaOapg.properties.grid_profile, str, ],
                            model: typing.Union[MetaOapg.properties.model, str, ],
                            id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
                            sku: typing.Union[MetaOapg.properties.sku, str, ],
                            param_table: typing.Union[MetaOapg.properties.param_table, str, ],
                            energy: typing.Union[MetaOapg.properties.energy, dict, frozendict.frozendict, ],
                            status: typing.Union[MetaOapg.properties.status, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                proc_load=proc_load,
                                serial_number=serial_number,
                                last_report_date=last_report_date,
                                power_produced=power_produced,
                                envoy_serial_number=envoy_serial_number,
                                part_number=part_number,
                                grid_profile=grid_profile,
                                model=model,
                                id=id,
                                sku=sku,
                                param_table=param_table,
                                energy=energy,
                                status=status,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'micro_inverters':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "signal_strength": signal_strength,
                "micro_inverters": micro_inverters,
            }
    
    micro_inverters: MetaOapg.properties.micro_inverters
    signal_strength: MetaOapg.properties.signal_strength
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signal_strength"]) -> MetaOapg.properties.signal_strength: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["micro_inverters"]) -> MetaOapg.properties.micro_inverters: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["signal_strength", "micro_inverters", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signal_strength"]) -> MetaOapg.properties.signal_strength: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["micro_inverters"]) -> MetaOapg.properties.micro_inverters: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["signal_strength", "micro_inverters", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        micro_inverters: typing.Union[MetaOapg.properties.micro_inverters, list, tuple, ],
        signal_strength: typing.Union[MetaOapg.properties.signal_strength, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InvertersSummaryByEnvoyOrSiteResponse':
        return super().__new__(
            cls,
            *_args,
            micro_inverters=micro_inverters,
            signal_strength=signal_strength,
            _configuration=_configuration,
            **kwargs,
        )
