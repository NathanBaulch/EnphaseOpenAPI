# coding: utf-8

"""
    The Enphase Commissioning API

    Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.  # noqa: E501

    The version of the OpenAPI document: 4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from commissioning import schemas  # noqa: F401


class Array(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.IntSchema
            label = schemas.StrSchema
            angle = schemas.IntSchema
            tilt = schemas.StrSchema
            
            
            class reporting_envoys(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reporting_envoys':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            provisioned_envoy = schemas.StrSchema
            updated_at = schemas.Int64Schema
            left = schemas.IntSchema
            top = schemas.IntSchema
            
            
            class modules(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                id = schemas.IntSchema
                                left = schemas.IntSchema
                                top = schemas.IntSchema
                                angle = schemas.IntSchema
                                serial_num = schemas.StrSchema
                                __annotations__ = {
                                    "id": id,
                                    "left": left,
                                    "top": top,
                                    "angle": angle,
                                    "serial_num": serial_num,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["left"]) -> MetaOapg.properties.left: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["top"]) -> MetaOapg.properties.top: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["angle"]) -> MetaOapg.properties.angle: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["serial_num"]) -> MetaOapg.properties.serial_num: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "left", "top", "angle", "serial_num", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["left"]) -> typing.Union[MetaOapg.properties.left, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["top"]) -> typing.Union[MetaOapg.properties.top, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["angle"]) -> typing.Union[MetaOapg.properties.angle, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["serial_num"]) -> typing.Union[MetaOapg.properties.serial_num, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "left", "top", "angle", "serial_num", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            left: typing.Union[MetaOapg.properties.left, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            top: typing.Union[MetaOapg.properties.top, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            angle: typing.Union[MetaOapg.properties.angle, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            serial_num: typing.Union[MetaOapg.properties.serial_num, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                id=id,
                                left=left,
                                top=top,
                                angle=angle,
                                serial_num=serial_num,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'modules':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "label": label,
                "angle": angle,
                "tilt": tilt,
                "reporting_envoys": reporting_envoys,
                "provisioned_envoy": provisioned_envoy,
                "updated_at": updated_at,
                "left": left,
                "top": top,
                "modules": modules,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["angle"]) -> MetaOapg.properties.angle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tilt"]) -> MetaOapg.properties.tilt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reporting_envoys"]) -> MetaOapg.properties.reporting_envoys: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provisioned_envoy"]) -> MetaOapg.properties.provisioned_envoy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["left"]) -> MetaOapg.properties.left: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["top"]) -> MetaOapg.properties.top: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modules"]) -> MetaOapg.properties.modules: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "label", "angle", "tilt", "reporting_envoys", "provisioned_envoy", "updated_at", "left", "top", "modules", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["angle"]) -> typing.Union[MetaOapg.properties.angle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tilt"]) -> typing.Union[MetaOapg.properties.tilt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reporting_envoys"]) -> typing.Union[MetaOapg.properties.reporting_envoys, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provisioned_envoy"]) -> typing.Union[MetaOapg.properties.provisioned_envoy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["left"]) -> typing.Union[MetaOapg.properties.left, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["top"]) -> typing.Union[MetaOapg.properties.top, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modules"]) -> typing.Union[MetaOapg.properties.modules, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "label", "angle", "tilt", "reporting_envoys", "provisioned_envoy", "updated_at", "left", "top", "modules", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        angle: typing.Union[MetaOapg.properties.angle, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tilt: typing.Union[MetaOapg.properties.tilt, str, schemas.Unset] = schemas.unset,
        reporting_envoys: typing.Union[MetaOapg.properties.reporting_envoys, list, tuple, schemas.Unset] = schemas.unset,
        provisioned_envoy: typing.Union[MetaOapg.properties.provisioned_envoy, str, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        left: typing.Union[MetaOapg.properties.left, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        top: typing.Union[MetaOapg.properties.top, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        modules: typing.Union[MetaOapg.properties.modules, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Array':
        return super().__new__(
            cls,
            *_args,
            id=id,
            label=label,
            angle=angle,
            tilt=tilt,
            reporting_envoys=reporting_envoys,
            provisioned_envoy=provisioned_envoy,
            updated_at=updated_at,
            left=left,
            top=top,
            modules=modules,
            _configuration=_configuration,
            **kwargs,
        )
