# coding: utf-8

"""
    The Enphase Commissioning API

    Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.  # noqa: E501

    The version of the OpenAPI document: 4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from commissioning import schemas  # noqa: F401


class SystemParams(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "system_name",
        }
        
        class properties:
            system_name = schemas.StrSchema
        
            @staticmethod
            def system_type() -> typing.Type['SystemTypeEnum']:
                return SystemTypeEnum
        
            @staticmethod
            def internet_connection() -> typing.Type['SystemInternetConnectionEnum']:
                return SystemInternetConnectionEnum
            lease = schemas.BoolSchema
            operational = schemas.BoolSchema
            owner_id = schemas.IntSchema
            host_id = schemas.IntSchema
            authorized_subcontractor_id = schemas.IntSchema
            installer_id = schemas.IntSchema
            maintainer_name = schemas.StrSchema
            maintainer_id = schemas.IntSchema
            
            
            class authorized_subcontractors(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                authorized_subcontractor_id = schemas.IntSchema
                                authorized_subcontractor_name = schemas.StrSchema
                                status = schemas.StrSchema
                                __annotations__ = {
                                    "authorized_subcontractor_id": authorized_subcontractor_id,
                                    "authorized_subcontractor_name": authorized_subcontractor_name,
                                    "status": status,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["authorized_subcontractor_id"]) -> MetaOapg.properties.authorized_subcontractor_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["authorized_subcontractor_name"]) -> MetaOapg.properties.authorized_subcontractor_name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["authorized_subcontractor_id", "authorized_subcontractor_name", "status", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["authorized_subcontractor_id"]) -> typing.Union[MetaOapg.properties.authorized_subcontractor_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["authorized_subcontractor_name"]) -> typing.Union[MetaOapg.properties.authorized_subcontractor_name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["authorized_subcontractor_id", "authorized_subcontractor_name", "status", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            authorized_subcontractor_id: typing.Union[MetaOapg.properties.authorized_subcontractor_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            authorized_subcontractor_name: typing.Union[MetaOapg.properties.authorized_subcontractor_name, str, schemas.Unset] = schemas.unset,
                            status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                authorized_subcontractor_id=authorized_subcontractor_id,
                                authorized_subcontractor_name=authorized_subcontractor_name,
                                status=status,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'authorized_subcontractors':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            allow_public_access = schemas.BoolSchema
            interconnect_date = schemas.DateSchema
        
            @staticmethod
            def source() -> typing.Type['SystemSourceEnum']:
                return SystemSourceEnum
        
            @staticmethod
            def array_type() -> typing.Type['SystemArrayTypeEnum']:
                return SystemArrayTypeEnum
        
            @staticmethod
            def attachment_type() -> typing.Type['SystemAttachmentTypeEnum']:
                return SystemAttachmentTypeEnum
            ensemble_envoy = schemas.StrSchema
            grid_profile = schemas.StrSchema
            requested_profile = schemas.StrSchema
            requested_report_freq = schemas.StrSchema
            voltage = schemas.StrSchema
            
            
            class envoy_serial_numbers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'envoy_serial_numbers':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            pv_manufacturer = schemas.IntSchema
            pv_manufacturer_name = schemas.StrSchema
            pv_model = schemas.IntSchema
            pv_model_name = schemas.StrSchema
            
            
            class pv_module_power_rating(
                schemas.Float32Schema
            ):
            
            
                class MetaOapg:
                    format = 'float'
                    inclusive_minimum = 0
            pv_module_type = schemas.IntSchema
            expected_envoy_count = schemas.IntSchema
            expected_pcu_count = schemas.IntSchema
            expected_acb_count = schemas.IntSchema
            expected_nsr_count = schemas.IntSchema
            expected_meter_count = schemas.IntSchema
            expected_encharge_count = schemas.IntSchema
            expected_enpower_count = schemas.IntSchema
            reference = schemas.StrSchema
            
            
            class encharge(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                envoy_serial_number = schemas.StrSchema
                                
                                
                                class encharge_serial_numbers(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'encharge_serial_numbers':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                __annotations__ = {
                                    "envoy_serial_number": envoy_serial_number,
                                    "encharge_serial_numbers": encharge_serial_numbers,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["envoy_serial_number"]) -> MetaOapg.properties.envoy_serial_number: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["encharge_serial_numbers"]) -> MetaOapg.properties.encharge_serial_numbers: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["envoy_serial_number", "encharge_serial_numbers", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["envoy_serial_number"]) -> typing.Union[MetaOapg.properties.envoy_serial_number, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["encharge_serial_numbers"]) -> typing.Union[MetaOapg.properties.encharge_serial_numbers, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["envoy_serial_number", "encharge_serial_numbers", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            envoy_serial_number: typing.Union[MetaOapg.properties.envoy_serial_number, str, schemas.Unset] = schemas.unset,
                            encharge_serial_numbers: typing.Union[MetaOapg.properties.encharge_serial_numbers, list, tuple, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                envoy_serial_number=envoy_serial_number,
                                encharge_serial_numbers=encharge_serial_numbers,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'encharge':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class enpower(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                envoy_serial_number = schemas.StrSchema
                                
                                
                                class enpower_serial_numbers(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'enpower_serial_numbers':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                __annotations__ = {
                                    "envoy_serial_number": envoy_serial_number,
                                    "enpower_serial_numbers": enpower_serial_numbers,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["envoy_serial_number"]) -> MetaOapg.properties.envoy_serial_number: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["enpower_serial_numbers"]) -> MetaOapg.properties.enpower_serial_numbers: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["envoy_serial_number", "enpower_serial_numbers", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["envoy_serial_number"]) -> typing.Union[MetaOapg.properties.envoy_serial_number, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["enpower_serial_numbers"]) -> typing.Union[MetaOapg.properties.enpower_serial_numbers, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["envoy_serial_number", "enpower_serial_numbers", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            envoy_serial_number: typing.Union[MetaOapg.properties.envoy_serial_number, str, schemas.Unset] = schemas.unset,
                            enpower_serial_numbers: typing.Union[MetaOapg.properties.enpower_serial_numbers, list, tuple, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                envoy_serial_number=envoy_serial_number,
                                enpower_serial_numbers=enpower_serial_numbers,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'enpower':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class address(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "country",
                        "city",
                        "street1",
                        "state",
                        "postal_code",
                    }
                    
                    class properties:
                        street1 = schemas.StrSchema
                        street2 = schemas.StrSchema
                        city = schemas.StrSchema
                        state = schemas.StrSchema
                        country = schemas.StrSchema
                        postal_code = schemas.StrSchema
                        __annotations__ = {
                            "street1": street1,
                            "street2": street2,
                            "city": city,
                            "state": state,
                            "country": country,
                            "postal_code": postal_code,
                        }
                
                country: MetaOapg.properties.country
                city: MetaOapg.properties.city
                street1: MetaOapg.properties.street1
                state: MetaOapg.properties.state
                postal_code: MetaOapg.properties.postal_code
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["street1"]) -> MetaOapg.properties.street1: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["street2"]) -> MetaOapg.properties.street2: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["postal_code"]) -> MetaOapg.properties.postal_code: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["street1", "street2", "city", "state", "country", "postal_code", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["street1"]) -> MetaOapg.properties.street1: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["street2"]) -> typing.Union[MetaOapg.properties.street2, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["postal_code"]) -> MetaOapg.properties.postal_code: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["street1", "street2", "city", "state", "country", "postal_code", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    country: typing.Union[MetaOapg.properties.country, str, ],
                    city: typing.Union[MetaOapg.properties.city, str, ],
                    street1: typing.Union[MetaOapg.properties.street1, str, ],
                    state: typing.Union[MetaOapg.properties.state, str, ],
                    postal_code: typing.Union[MetaOapg.properties.postal_code, str, ],
                    street2: typing.Union[MetaOapg.properties.street2, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'address':
                    return super().__new__(
                        cls,
                        *_args,
                        country=country,
                        city=city,
                        street1=street1,
                        state=state,
                        postal_code=postal_code,
                        street2=street2,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "system_name": system_name,
                "system_type": system_type,
                "internet_connection": internet_connection,
                "lease": lease,
                "operational": operational,
                "owner_id": owner_id,
                "host_id": host_id,
                "authorized_subcontractor_id": authorized_subcontractor_id,
                "installer_id": installer_id,
                "maintainer_name": maintainer_name,
                "maintainer_id": maintainer_id,
                "authorized_subcontractors": authorized_subcontractors,
                "allow_public_access": allow_public_access,
                "interconnect_date": interconnect_date,
                "source": source,
                "array_type": array_type,
                "attachment_type": attachment_type,
                "ensemble_envoy": ensemble_envoy,
                "grid_profile": grid_profile,
                "requested_profile": requested_profile,
                "requested_report_freq": requested_report_freq,
                "voltage": voltage,
                "envoy_serial_numbers": envoy_serial_numbers,
                "pv_manufacturer": pv_manufacturer,
                "pv_manufacturer_name": pv_manufacturer_name,
                "pv_model": pv_model,
                "pv_model_name": pv_model_name,
                "pv_module_power_rating": pv_module_power_rating,
                "pv_module_type": pv_module_type,
                "expected_envoy_count": expected_envoy_count,
                "expected_pcu_count": expected_pcu_count,
                "expected_acb_count": expected_acb_count,
                "expected_nsr_count": expected_nsr_count,
                "expected_meter_count": expected_meter_count,
                "expected_encharge_count": expected_encharge_count,
                "expected_enpower_count": expected_enpower_count,
                "reference": reference,
                "encharge": encharge,
                "enpower": enpower,
                "address": address,
            }
    
    system_name: MetaOapg.properties.system_name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["system_name"]) -> MetaOapg.properties.system_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["system_type"]) -> 'SystemTypeEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["internet_connection"]) -> 'SystemInternetConnectionEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lease"]) -> MetaOapg.properties.lease: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operational"]) -> MetaOapg.properties.operational: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner_id"]) -> MetaOapg.properties.owner_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["host_id"]) -> MetaOapg.properties.host_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorized_subcontractor_id"]) -> MetaOapg.properties.authorized_subcontractor_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["installer_id"]) -> MetaOapg.properties.installer_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maintainer_name"]) -> MetaOapg.properties.maintainer_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maintainer_id"]) -> MetaOapg.properties.maintainer_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorized_subcontractors"]) -> MetaOapg.properties.authorized_subcontractors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_public_access"]) -> MetaOapg.properties.allow_public_access: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interconnect_date"]) -> MetaOapg.properties.interconnect_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> 'SystemSourceEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["array_type"]) -> 'SystemArrayTypeEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachment_type"]) -> 'SystemAttachmentTypeEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ensemble_envoy"]) -> MetaOapg.properties.ensemble_envoy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grid_profile"]) -> MetaOapg.properties.grid_profile: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requested_profile"]) -> MetaOapg.properties.requested_profile: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requested_report_freq"]) -> MetaOapg.properties.requested_report_freq: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voltage"]) -> MetaOapg.properties.voltage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["envoy_serial_numbers"]) -> MetaOapg.properties.envoy_serial_numbers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pv_manufacturer"]) -> MetaOapg.properties.pv_manufacturer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pv_manufacturer_name"]) -> MetaOapg.properties.pv_manufacturer_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pv_model"]) -> MetaOapg.properties.pv_model: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pv_model_name"]) -> MetaOapg.properties.pv_model_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pv_module_power_rating"]) -> MetaOapg.properties.pv_module_power_rating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pv_module_type"]) -> MetaOapg.properties.pv_module_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expected_envoy_count"]) -> MetaOapg.properties.expected_envoy_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expected_pcu_count"]) -> MetaOapg.properties.expected_pcu_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expected_acb_count"]) -> MetaOapg.properties.expected_acb_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expected_nsr_count"]) -> MetaOapg.properties.expected_nsr_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expected_meter_count"]) -> MetaOapg.properties.expected_meter_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expected_encharge_count"]) -> MetaOapg.properties.expected_encharge_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expected_enpower_count"]) -> MetaOapg.properties.expected_enpower_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reference"]) -> MetaOapg.properties.reference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encharge"]) -> MetaOapg.properties.encharge: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enpower"]) -> MetaOapg.properties.enpower: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["system_name", "system_type", "internet_connection", "lease", "operational", "owner_id", "host_id", "authorized_subcontractor_id", "installer_id", "maintainer_name", "maintainer_id", "authorized_subcontractors", "allow_public_access", "interconnect_date", "source", "array_type", "attachment_type", "ensemble_envoy", "grid_profile", "requested_profile", "requested_report_freq", "voltage", "envoy_serial_numbers", "pv_manufacturer", "pv_manufacturer_name", "pv_model", "pv_model_name", "pv_module_power_rating", "pv_module_type", "expected_envoy_count", "expected_pcu_count", "expected_acb_count", "expected_nsr_count", "expected_meter_count", "expected_encharge_count", "expected_enpower_count", "reference", "encharge", "enpower", "address", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["system_name"]) -> MetaOapg.properties.system_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["system_type"]) -> typing.Union['SystemTypeEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["internet_connection"]) -> typing.Union['SystemInternetConnectionEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lease"]) -> typing.Union[MetaOapg.properties.lease, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operational"]) -> typing.Union[MetaOapg.properties.operational, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner_id"]) -> typing.Union[MetaOapg.properties.owner_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["host_id"]) -> typing.Union[MetaOapg.properties.host_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorized_subcontractor_id"]) -> typing.Union[MetaOapg.properties.authorized_subcontractor_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["installer_id"]) -> typing.Union[MetaOapg.properties.installer_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maintainer_name"]) -> typing.Union[MetaOapg.properties.maintainer_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maintainer_id"]) -> typing.Union[MetaOapg.properties.maintainer_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorized_subcontractors"]) -> typing.Union[MetaOapg.properties.authorized_subcontractors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_public_access"]) -> typing.Union[MetaOapg.properties.allow_public_access, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interconnect_date"]) -> typing.Union[MetaOapg.properties.interconnect_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union['SystemSourceEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["array_type"]) -> typing.Union['SystemArrayTypeEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachment_type"]) -> typing.Union['SystemAttachmentTypeEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ensemble_envoy"]) -> typing.Union[MetaOapg.properties.ensemble_envoy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grid_profile"]) -> typing.Union[MetaOapg.properties.grid_profile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requested_profile"]) -> typing.Union[MetaOapg.properties.requested_profile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requested_report_freq"]) -> typing.Union[MetaOapg.properties.requested_report_freq, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voltage"]) -> typing.Union[MetaOapg.properties.voltage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["envoy_serial_numbers"]) -> typing.Union[MetaOapg.properties.envoy_serial_numbers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pv_manufacturer"]) -> typing.Union[MetaOapg.properties.pv_manufacturer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pv_manufacturer_name"]) -> typing.Union[MetaOapg.properties.pv_manufacturer_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pv_model"]) -> typing.Union[MetaOapg.properties.pv_model, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pv_model_name"]) -> typing.Union[MetaOapg.properties.pv_model_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pv_module_power_rating"]) -> typing.Union[MetaOapg.properties.pv_module_power_rating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pv_module_type"]) -> typing.Union[MetaOapg.properties.pv_module_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expected_envoy_count"]) -> typing.Union[MetaOapg.properties.expected_envoy_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expected_pcu_count"]) -> typing.Union[MetaOapg.properties.expected_pcu_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expected_acb_count"]) -> typing.Union[MetaOapg.properties.expected_acb_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expected_nsr_count"]) -> typing.Union[MetaOapg.properties.expected_nsr_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expected_meter_count"]) -> typing.Union[MetaOapg.properties.expected_meter_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expected_encharge_count"]) -> typing.Union[MetaOapg.properties.expected_encharge_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expected_enpower_count"]) -> typing.Union[MetaOapg.properties.expected_enpower_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reference"]) -> typing.Union[MetaOapg.properties.reference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encharge"]) -> typing.Union[MetaOapg.properties.encharge, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enpower"]) -> typing.Union[MetaOapg.properties.enpower, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union[MetaOapg.properties.address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["system_name", "system_type", "internet_connection", "lease", "operational", "owner_id", "host_id", "authorized_subcontractor_id", "installer_id", "maintainer_name", "maintainer_id", "authorized_subcontractors", "allow_public_access", "interconnect_date", "source", "array_type", "attachment_type", "ensemble_envoy", "grid_profile", "requested_profile", "requested_report_freq", "voltage", "envoy_serial_numbers", "pv_manufacturer", "pv_manufacturer_name", "pv_model", "pv_model_name", "pv_module_power_rating", "pv_module_type", "expected_envoy_count", "expected_pcu_count", "expected_acb_count", "expected_nsr_count", "expected_meter_count", "expected_encharge_count", "expected_enpower_count", "reference", "encharge", "enpower", "address", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        system_name: typing.Union[MetaOapg.properties.system_name, str, ],
        system_type: typing.Union['SystemTypeEnum', schemas.Unset] = schemas.unset,
        internet_connection: typing.Union['SystemInternetConnectionEnum', schemas.Unset] = schemas.unset,
        lease: typing.Union[MetaOapg.properties.lease, bool, schemas.Unset] = schemas.unset,
        operational: typing.Union[MetaOapg.properties.operational, bool, schemas.Unset] = schemas.unset,
        owner_id: typing.Union[MetaOapg.properties.owner_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        host_id: typing.Union[MetaOapg.properties.host_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        authorized_subcontractor_id: typing.Union[MetaOapg.properties.authorized_subcontractor_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        installer_id: typing.Union[MetaOapg.properties.installer_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        maintainer_name: typing.Union[MetaOapg.properties.maintainer_name, str, schemas.Unset] = schemas.unset,
        maintainer_id: typing.Union[MetaOapg.properties.maintainer_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        authorized_subcontractors: typing.Union[MetaOapg.properties.authorized_subcontractors, list, tuple, schemas.Unset] = schemas.unset,
        allow_public_access: typing.Union[MetaOapg.properties.allow_public_access, bool, schemas.Unset] = schemas.unset,
        interconnect_date: typing.Union[MetaOapg.properties.interconnect_date, str, date, schemas.Unset] = schemas.unset,
        source: typing.Union['SystemSourceEnum', schemas.Unset] = schemas.unset,
        array_type: typing.Union['SystemArrayTypeEnum', schemas.Unset] = schemas.unset,
        attachment_type: typing.Union['SystemAttachmentTypeEnum', schemas.Unset] = schemas.unset,
        ensemble_envoy: typing.Union[MetaOapg.properties.ensemble_envoy, str, schemas.Unset] = schemas.unset,
        grid_profile: typing.Union[MetaOapg.properties.grid_profile, str, schemas.Unset] = schemas.unset,
        requested_profile: typing.Union[MetaOapg.properties.requested_profile, str, schemas.Unset] = schemas.unset,
        requested_report_freq: typing.Union[MetaOapg.properties.requested_report_freq, str, schemas.Unset] = schemas.unset,
        voltage: typing.Union[MetaOapg.properties.voltage, str, schemas.Unset] = schemas.unset,
        envoy_serial_numbers: typing.Union[MetaOapg.properties.envoy_serial_numbers, list, tuple, schemas.Unset] = schemas.unset,
        pv_manufacturer: typing.Union[MetaOapg.properties.pv_manufacturer, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pv_manufacturer_name: typing.Union[MetaOapg.properties.pv_manufacturer_name, str, schemas.Unset] = schemas.unset,
        pv_model: typing.Union[MetaOapg.properties.pv_model, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pv_model_name: typing.Union[MetaOapg.properties.pv_model_name, str, schemas.Unset] = schemas.unset,
        pv_module_power_rating: typing.Union[MetaOapg.properties.pv_module_power_rating, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        pv_module_type: typing.Union[MetaOapg.properties.pv_module_type, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        expected_envoy_count: typing.Union[MetaOapg.properties.expected_envoy_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        expected_pcu_count: typing.Union[MetaOapg.properties.expected_pcu_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        expected_acb_count: typing.Union[MetaOapg.properties.expected_acb_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        expected_nsr_count: typing.Union[MetaOapg.properties.expected_nsr_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        expected_meter_count: typing.Union[MetaOapg.properties.expected_meter_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        expected_encharge_count: typing.Union[MetaOapg.properties.expected_encharge_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        expected_enpower_count: typing.Union[MetaOapg.properties.expected_enpower_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        reference: typing.Union[MetaOapg.properties.reference, str, schemas.Unset] = schemas.unset,
        encharge: typing.Union[MetaOapg.properties.encharge, list, tuple, schemas.Unset] = schemas.unset,
        enpower: typing.Union[MetaOapg.properties.enpower, list, tuple, schemas.Unset] = schemas.unset,
        address: typing.Union[MetaOapg.properties.address, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SystemParams':
        return super().__new__(
            cls,
            *_args,
            system_name=system_name,
            system_type=system_type,
            internet_connection=internet_connection,
            lease=lease,
            operational=operational,
            owner_id=owner_id,
            host_id=host_id,
            authorized_subcontractor_id=authorized_subcontractor_id,
            installer_id=installer_id,
            maintainer_name=maintainer_name,
            maintainer_id=maintainer_id,
            authorized_subcontractors=authorized_subcontractors,
            allow_public_access=allow_public_access,
            interconnect_date=interconnect_date,
            source=source,
            array_type=array_type,
            attachment_type=attachment_type,
            ensemble_envoy=ensemble_envoy,
            grid_profile=grid_profile,
            requested_profile=requested_profile,
            requested_report_freq=requested_report_freq,
            voltage=voltage,
            envoy_serial_numbers=envoy_serial_numbers,
            pv_manufacturer=pv_manufacturer,
            pv_manufacturer_name=pv_manufacturer_name,
            pv_model=pv_model,
            pv_model_name=pv_model_name,
            pv_module_power_rating=pv_module_power_rating,
            pv_module_type=pv_module_type,
            expected_envoy_count=expected_envoy_count,
            expected_pcu_count=expected_pcu_count,
            expected_acb_count=expected_acb_count,
            expected_nsr_count=expected_nsr_count,
            expected_meter_count=expected_meter_count,
            expected_encharge_count=expected_encharge_count,
            expected_enpower_count=expected_enpower_count,
            reference=reference,
            encharge=encharge,
            enpower=enpower,
            address=address,
            _configuration=_configuration,
            **kwargs,
        )

from commissioning.model.system_array_type_enum import SystemArrayTypeEnum
from commissioning.model.system_attachment_type_enum import SystemAttachmentTypeEnum
from commissioning.model.system_internet_connection_enum import SystemInternetConnectionEnum
from commissioning.model.system_source_enum import SystemSourceEnum
from commissioning.model.system_type_enum import SystemTypeEnum
