# coding: utf-8

"""
    The Enphase Commissioning API

    Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.  # noqa: E501

    The version of the OpenAPI document: 4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from commissioning import schemas  # noqa: F401


class TariffSettings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class tariff(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class currency_type(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    code = schemas.StrSchema
                                    __annotations__ = {
                                        "code": code,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["code", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["code", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                code: typing.Union[MetaOapg.properties.code, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'currency_type':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    code=code,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class single_rate(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    rate = schemas.StrSchema
                                    sell = schemas.StrSchema
                                    __annotations__ = {
                                        "rate": rate,
                                        "sell": sell,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["rate"]) -> MetaOapg.properties.rate: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["sell"]) -> MetaOapg.properties.sell: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["rate", "sell", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["rate"]) -> typing.Union[MetaOapg.properties.rate, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["sell"]) -> typing.Union[MetaOapg.properties.sell, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["rate", "sell", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                rate: typing.Union[MetaOapg.properties.rate, str, schemas.Unset] = schemas.unset,
                                sell: typing.Union[MetaOapg.properties.sell, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'single_rate':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    rate=rate,
                                    sell=sell,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                    
                        @staticmethod
                        def seasons() -> typing.Type['TariffSeasons']:
                            return TariffSeasons
                    
                        @staticmethod
                        def seasons_sell() -> typing.Type['TariffSeasons']:
                            return TariffSeasons
                        __annotations__ = {
                            "currency_type": currency_type,
                            "single_rate": single_rate,
                            "seasons": seasons,
                            "seasons_sell": seasons_sell,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["currency_type"]) -> MetaOapg.properties.currency_type: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["single_rate"]) -> MetaOapg.properties.single_rate: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["seasons"]) -> 'TariffSeasons': ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["seasons_sell"]) -> 'TariffSeasons': ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["currency_type", "single_rate", "seasons", "seasons_sell", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["currency_type"]) -> typing.Union[MetaOapg.properties.currency_type, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["single_rate"]) -> typing.Union[MetaOapg.properties.single_rate, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["seasons"]) -> typing.Union['TariffSeasons', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["seasons_sell"]) -> typing.Union['TariffSeasons', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["currency_type", "single_rate", "seasons", "seasons_sell", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    currency_type: typing.Union[MetaOapg.properties.currency_type, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    single_rate: typing.Union[MetaOapg.properties.single_rate, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    seasons: typing.Union['TariffSeasons', schemas.Unset] = schemas.unset,
                    seasons_sell: typing.Union['TariffSeasons', schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'tariff':
                    return super().__new__(
                        cls,
                        *_args,
                        currency_type=currency_type,
                        single_rate=single_rate,
                        seasons=seasons,
                        seasons_sell=seasons_sell,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class task(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        status = schemas.StrSchema
                        created_at = schemas.StrSchema
                        __annotations__ = {
                            "status": status,
                            "created_at": created_at,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["status", "created_at", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["status", "created_at", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
                    created_at: typing.Union[MetaOapg.properties.created_at, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'task':
                    return super().__new__(
                        cls,
                        *_args,
                        status=status,
                        created_at=created_at,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "tariff": tariff,
                "task": task,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tariff"]) -> MetaOapg.properties.tariff: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["task"]) -> MetaOapg.properties.task: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tariff", "task", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tariff"]) -> typing.Union[MetaOapg.properties.tariff, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["task"]) -> typing.Union[MetaOapg.properties.task, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tariff", "task", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        tariff: typing.Union[MetaOapg.properties.tariff, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        task: typing.Union[MetaOapg.properties.task, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TariffSettings':
        return super().__new__(
            cls,
            *_args,
            tariff=tariff,
            task=task,
            _configuration=_configuration,
            **kwargs,
        )

from commissioning.model.tariff_seasons import TariffSeasons
