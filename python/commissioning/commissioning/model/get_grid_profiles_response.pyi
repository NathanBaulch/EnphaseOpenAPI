# coding: utf-8

"""
    The Enphase Commissioning API

    Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.  # noqa: E501

    The version of the OpenAPI document: 4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from commissioning import schemas  # noqa: F401


class GetGridProfilesResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class grid_profiles(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                id = schemas.StrSchema
                                profile_id = schemas.StrSchema
                                created = schemas.DateTimeSchema
                                updated = schemas.DateTimeSchema
                                name = schemas.StrSchema
                                description = schemas.StrSchema
                                version = schemas.StrSchema
                                envoy_type = schemas.StrSchema
                                
                                
                                class countries(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'countries':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class states(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'states':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class state_names(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'state_names':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                ensemble_1_compatible = schemas.BoolSchema
                                __annotations__ = {
                                    "id": id,
                                    "profile_id": profile_id,
                                    "created": created,
                                    "updated": updated,
                                    "name": name,
                                    "description": description,
                                    "version": version,
                                    "envoy_type": envoy_type,
                                    "countries": countries,
                                    "states": states,
                                    "state_names": state_names,
                                    "ensemble_1_compatible": ensemble_1_compatible,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["profile_id"]) -> MetaOapg.properties.profile_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["envoy_type"]) -> MetaOapg.properties.envoy_type: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["countries"]) -> MetaOapg.properties.countries: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["states"]) -> MetaOapg.properties.states: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["state_names"]) -> MetaOapg.properties.state_names: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["ensemble_1_compatible"]) -> MetaOapg.properties.ensemble_1_compatible: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "profile_id", "created", "updated", "name", "description", "version", "envoy_type", "countries", "states", "state_names", "ensemble_1_compatible", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["profile_id"]) -> typing.Union[MetaOapg.properties.profile_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["updated"]) -> typing.Union[MetaOapg.properties.updated, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["envoy_type"]) -> typing.Union[MetaOapg.properties.envoy_type, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["countries"]) -> typing.Union[MetaOapg.properties.countries, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["states"]) -> typing.Union[MetaOapg.properties.states, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["state_names"]) -> typing.Union[MetaOapg.properties.state_names, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["ensemble_1_compatible"]) -> typing.Union[MetaOapg.properties.ensemble_1_compatible, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "profile_id", "created", "updated", "name", "description", "version", "envoy_type", "countries", "states", "state_names", "ensemble_1_compatible", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                            profile_id: typing.Union[MetaOapg.properties.profile_id, str, schemas.Unset] = schemas.unset,
                            created: typing.Union[MetaOapg.properties.created, str, datetime, schemas.Unset] = schemas.unset,
                            updated: typing.Union[MetaOapg.properties.updated, str, datetime, schemas.Unset] = schemas.unset,
                            name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                            description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
                            version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
                            envoy_type: typing.Union[MetaOapg.properties.envoy_type, str, schemas.Unset] = schemas.unset,
                            countries: typing.Union[MetaOapg.properties.countries, list, tuple, schemas.Unset] = schemas.unset,
                            states: typing.Union[MetaOapg.properties.states, list, tuple, schemas.Unset] = schemas.unset,
                            state_names: typing.Union[MetaOapg.properties.state_names, list, tuple, schemas.Unset] = schemas.unset,
                            ensemble_1_compatible: typing.Union[MetaOapg.properties.ensemble_1_compatible, bool, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                id=id,
                                profile_id=profile_id,
                                created=created,
                                updated=updated,
                                name=name,
                                description=description,
                                version=version,
                                envoy_type=envoy_type,
                                countries=countries,
                                states=states,
                                state_names=state_names,
                                ensemble_1_compatible=ensemble_1_compatible,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'grid_profiles':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "grid_profiles": grid_profiles,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grid_profiles"]) -> MetaOapg.properties.grid_profiles: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["grid_profiles", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grid_profiles"]) -> typing.Union[MetaOapg.properties.grid_profiles, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["grid_profiles", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        grid_profiles: typing.Union[MetaOapg.properties.grid_profiles, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GetGridProfilesResponse':
        return super().__new__(
            cls,
            *_args,
            grid_profiles=grid_profiles,
            _configuration=_configuration,
            **kwargs,
        )
