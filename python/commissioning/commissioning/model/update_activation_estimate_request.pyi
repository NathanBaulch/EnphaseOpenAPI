# coding: utf-8

"""
    The Enphase Commissioning API

    Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.  # noqa: E501

    The version of the OpenAPI document: 4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from commissioning import schemas  # noqa: F401


class UpdateActivationEstimateRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "degrade_factor",
            "month_estimates",
        }
        
        class properties:
            degrade_factor = schemas.StrSchema
            
            
            class month_estimates(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'month_estimates':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "degrade_factor": degrade_factor,
                "month_estimates": month_estimates,
            }
    
    degrade_factor: MetaOapg.properties.degrade_factor
    month_estimates: MetaOapg.properties.month_estimates
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["degrade_factor"]) -> MetaOapg.properties.degrade_factor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["month_estimates"]) -> MetaOapg.properties.month_estimates: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["degrade_factor", "month_estimates", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["degrade_factor"]) -> MetaOapg.properties.degrade_factor: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["month_estimates"]) -> MetaOapg.properties.month_estimates: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["degrade_factor", "month_estimates", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        degrade_factor: typing.Union[MetaOapg.properties.degrade_factor, str, ],
        month_estimates: typing.Union[MetaOapg.properties.month_estimates, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UpdateActivationEstimateRequest':
        return super().__new__(
            cls,
            *_args,
            degrade_factor=degrade_factor,
            month_estimates=month_estimates,
            _configuration=_configuration,
            **kwargs,
        )
