# coding: utf-8

"""
    The Enphase Commissioning API

    Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.  # noqa: E501

    The version of the OpenAPI document: 4.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from commissioning import schemas  # noqa: F401


class GetActivationOpsProductionModeResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            mode = schemas.StrSchema
            total_micros = schemas.IntSchema
            energy_producing_micros = schemas.IntSchema
            __annotations__ = {
                "mode": mode,
                "total_micros": total_micros,
                "energy_producing_micros": energy_producing_micros,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mode"]) -> MetaOapg.properties.mode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_micros"]) -> MetaOapg.properties.total_micros: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["energy_producing_micros"]) -> MetaOapg.properties.energy_producing_micros: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["mode", "total_micros", "energy_producing_micros", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mode"]) -> typing.Union[MetaOapg.properties.mode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_micros"]) -> typing.Union[MetaOapg.properties.total_micros, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["energy_producing_micros"]) -> typing.Union[MetaOapg.properties.energy_producing_micros, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["mode", "total_micros", "energy_producing_micros", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        mode: typing.Union[MetaOapg.properties.mode, str, schemas.Unset] = schemas.unset,
        total_micros: typing.Union[MetaOapg.properties.total_micros, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        energy_producing_micros: typing.Union[MetaOapg.properties.energy_producing_micros, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GetActivationOpsProductionModeResponse':
        return super().__new__(
            cls,
            *_args,
            mode=mode,
            total_micros=total_micros,
            energy_producing_micros=energy_producing_micros,
            _configuration=_configuration,
            **kwargs,
        )
