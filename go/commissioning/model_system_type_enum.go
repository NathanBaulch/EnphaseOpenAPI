/*
The Enphase Commissioning API

Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package commissioning

import (
	"encoding/json"
	"fmt"
)

// SystemTypeEnum Type of the system. Default 'residential'.
type SystemTypeEnum string

// List of SystemTypeEnum
const (
	SYSTEMTYPEENUM_RESIDENTIAL SystemTypeEnum = "residential"
	SYSTEMTYPEENUM_COMMERCIAL SystemTypeEnum = "commercial"
	SYSTEMTYPEENUM_OTHER SystemTypeEnum = "other"
)

// All allowed values of SystemTypeEnum enum
var AllowedSystemTypeEnumEnumValues = []SystemTypeEnum{
	"residential",
	"commercial",
	"other",
}

func (v *SystemTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SystemTypeEnum(value)
	for _, existing := range AllowedSystemTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SystemTypeEnum", value)
}

// NewSystemTypeEnumFromValue returns a pointer to a valid SystemTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSystemTypeEnumFromValue(v string) (*SystemTypeEnum, error) {
	ev := SystemTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SystemTypeEnum: valid values are %v", v, AllowedSystemTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SystemTypeEnum) IsValid() bool {
	for _, existing := range AllowedSystemTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SystemTypeEnum value
func (v SystemTypeEnum) Ptr() *SystemTypeEnum {
	return &v
}

type NullableSystemTypeEnum struct {
	value *SystemTypeEnum
	isSet bool
}

func (v NullableSystemTypeEnum) Get() *SystemTypeEnum {
	return v.value
}

func (v *NullableSystemTypeEnum) Set(val *SystemTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemTypeEnum(val *SystemTypeEnum) *NullableSystemTypeEnum {
	return &NullableSystemTypeEnum{value: val, isSet: true}
}

func (v NullableSystemTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

