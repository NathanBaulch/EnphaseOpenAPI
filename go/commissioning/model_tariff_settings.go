/*
The Enphase Commissioning API

Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package commissioning

import (
	"encoding/json"
)

// checks if the TariffSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TariffSettings{}

// TariffSettings struct for TariffSettings
type TariffSettings struct {
	Tariff *TariffSettingsTariff `json:"tariff,omitempty"`
	Task *UpdateSystemTariffSettingsResponseTask `json:"task,omitempty"`
}

// NewTariffSettings instantiates a new TariffSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTariffSettings() *TariffSettings {
	this := TariffSettings{}
	return &this
}

// NewTariffSettingsWithDefaults instantiates a new TariffSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTariffSettingsWithDefaults() *TariffSettings {
	this := TariffSettings{}
	return &this
}

// GetTariff returns the Tariff field value if set, zero value otherwise.
func (o *TariffSettings) GetTariff() TariffSettingsTariff {
	if o == nil || IsNil(o.Tariff) {
		var ret TariffSettingsTariff
		return ret
	}
	return *o.Tariff
}

// GetTariffOk returns a tuple with the Tariff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TariffSettings) GetTariffOk() (*TariffSettingsTariff, bool) {
	if o == nil || IsNil(o.Tariff) {
		return nil, false
	}
	return o.Tariff, true
}

// HasTariff returns a boolean if a field has been set.
func (o *TariffSettings) HasTariff() bool {
	if o != nil && !IsNil(o.Tariff) {
		return true
	}

	return false
}

// SetTariff gets a reference to the given TariffSettingsTariff and assigns it to the Tariff field.
func (o *TariffSettings) SetTariff(v TariffSettingsTariff) {
	o.Tariff = &v
}

// GetTask returns the Task field value if set, zero value otherwise.
func (o *TariffSettings) GetTask() UpdateSystemTariffSettingsResponseTask {
	if o == nil || IsNil(o.Task) {
		var ret UpdateSystemTariffSettingsResponseTask
		return ret
	}
	return *o.Task
}

// GetTaskOk returns a tuple with the Task field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TariffSettings) GetTaskOk() (*UpdateSystemTariffSettingsResponseTask, bool) {
	if o == nil || IsNil(o.Task) {
		return nil, false
	}
	return o.Task, true
}

// HasTask returns a boolean if a field has been set.
func (o *TariffSettings) HasTask() bool {
	if o != nil && !IsNil(o.Task) {
		return true
	}

	return false
}

// SetTask gets a reference to the given UpdateSystemTariffSettingsResponseTask and assigns it to the Task field.
func (o *TariffSettings) SetTask(v UpdateSystemTariffSettingsResponseTask) {
	o.Task = &v
}

func (o TariffSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TariffSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tariff) {
		toSerialize["tariff"] = o.Tariff
	}
	if !IsNil(o.Task) {
		toSerialize["task"] = o.Task
	}
	return toSerialize, nil
}

type NullableTariffSettings struct {
	value *TariffSettings
	isSet bool
}

func (v NullableTariffSettings) Get() *TariffSettings {
	return v.value
}

func (v *NullableTariffSettings) Set(val *TariffSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableTariffSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableTariffSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTariffSettings(val *TariffSettings) *NullableTariffSettings {
	return &NullableTariffSettings{value: val, isSet: true}
}

func (v NullableTariffSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTariffSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


