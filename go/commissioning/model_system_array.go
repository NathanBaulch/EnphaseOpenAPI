/*
The Enphase Commissioning API

Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package commissioning

import (
	"encoding/json"
)

// checks if the SystemArray type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SystemArray{}

// SystemArray struct for SystemArray
type SystemArray struct {
	// ID of the array.
	Id *int32 `json:"id,omitempty"`
	// Name of the array.
	Label *string `json:"label,omitempty"`
	// Angle of the array.
	Angle *int32 `json:"angle,omitempty"`
	// Tilt of the array.
	Tilt *string `json:"tilt,omitempty"`
	// List of envoys serial numbers.
	ReportingEnvoys []string `json:"reporting_envoys,omitempty"`
	// Provisioned envoy.
	ProvisionedEnvoy *string `json:"provisioned_envoy,omitempty"`
	// Last updated Epoch time.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
	// Left axis position of array.
	Left *int32 `json:"left,omitempty"`
	// Top axis position of array.
	Top *int32 `json:"top,omitempty"`
	Modules []SystemArrayModulesInner `json:"modules,omitempty"`
}

// NewSystemArray instantiates a new SystemArray object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystemArray() *SystemArray {
	this := SystemArray{}
	return &this
}

// NewSystemArrayWithDefaults instantiates a new SystemArray object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemArrayWithDefaults() *SystemArray {
	this := SystemArray{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SystemArray) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemArray) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SystemArray) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SystemArray) SetId(v int32) {
	o.Id = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *SystemArray) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemArray) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *SystemArray) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *SystemArray) SetLabel(v string) {
	o.Label = &v
}

// GetAngle returns the Angle field value if set, zero value otherwise.
func (o *SystemArray) GetAngle() int32 {
	if o == nil || IsNil(o.Angle) {
		var ret int32
		return ret
	}
	return *o.Angle
}

// GetAngleOk returns a tuple with the Angle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemArray) GetAngleOk() (*int32, bool) {
	if o == nil || IsNil(o.Angle) {
		return nil, false
	}
	return o.Angle, true
}

// HasAngle returns a boolean if a field has been set.
func (o *SystemArray) HasAngle() bool {
	if o != nil && !IsNil(o.Angle) {
		return true
	}

	return false
}

// SetAngle gets a reference to the given int32 and assigns it to the Angle field.
func (o *SystemArray) SetAngle(v int32) {
	o.Angle = &v
}

// GetTilt returns the Tilt field value if set, zero value otherwise.
func (o *SystemArray) GetTilt() string {
	if o == nil || IsNil(o.Tilt) {
		var ret string
		return ret
	}
	return *o.Tilt
}

// GetTiltOk returns a tuple with the Tilt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemArray) GetTiltOk() (*string, bool) {
	if o == nil || IsNil(o.Tilt) {
		return nil, false
	}
	return o.Tilt, true
}

// HasTilt returns a boolean if a field has been set.
func (o *SystemArray) HasTilt() bool {
	if o != nil && !IsNil(o.Tilt) {
		return true
	}

	return false
}

// SetTilt gets a reference to the given string and assigns it to the Tilt field.
func (o *SystemArray) SetTilt(v string) {
	o.Tilt = &v
}

// GetReportingEnvoys returns the ReportingEnvoys field value if set, zero value otherwise.
func (o *SystemArray) GetReportingEnvoys() []string {
	if o == nil || IsNil(o.ReportingEnvoys) {
		var ret []string
		return ret
	}
	return o.ReportingEnvoys
}

// GetReportingEnvoysOk returns a tuple with the ReportingEnvoys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemArray) GetReportingEnvoysOk() ([]string, bool) {
	if o == nil || IsNil(o.ReportingEnvoys) {
		return nil, false
	}
	return o.ReportingEnvoys, true
}

// HasReportingEnvoys returns a boolean if a field has been set.
func (o *SystemArray) HasReportingEnvoys() bool {
	if o != nil && !IsNil(o.ReportingEnvoys) {
		return true
	}

	return false
}

// SetReportingEnvoys gets a reference to the given []string and assigns it to the ReportingEnvoys field.
func (o *SystemArray) SetReportingEnvoys(v []string) {
	o.ReportingEnvoys = v
}

// GetProvisionedEnvoy returns the ProvisionedEnvoy field value if set, zero value otherwise.
func (o *SystemArray) GetProvisionedEnvoy() string {
	if o == nil || IsNil(o.ProvisionedEnvoy) {
		var ret string
		return ret
	}
	return *o.ProvisionedEnvoy
}

// GetProvisionedEnvoyOk returns a tuple with the ProvisionedEnvoy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemArray) GetProvisionedEnvoyOk() (*string, bool) {
	if o == nil || IsNil(o.ProvisionedEnvoy) {
		return nil, false
	}
	return o.ProvisionedEnvoy, true
}

// HasProvisionedEnvoy returns a boolean if a field has been set.
func (o *SystemArray) HasProvisionedEnvoy() bool {
	if o != nil && !IsNil(o.ProvisionedEnvoy) {
		return true
	}

	return false
}

// SetProvisionedEnvoy gets a reference to the given string and assigns it to the ProvisionedEnvoy field.
func (o *SystemArray) SetProvisionedEnvoy(v string) {
	o.ProvisionedEnvoy = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *SystemArray) GetUpdatedAt() int64 {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret int64
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemArray) GetUpdatedAtOk() (*int64, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *SystemArray) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int64 and assigns it to the UpdatedAt field.
func (o *SystemArray) SetUpdatedAt(v int64) {
	o.UpdatedAt = &v
}

// GetLeft returns the Left field value if set, zero value otherwise.
func (o *SystemArray) GetLeft() int32 {
	if o == nil || IsNil(o.Left) {
		var ret int32
		return ret
	}
	return *o.Left
}

// GetLeftOk returns a tuple with the Left field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemArray) GetLeftOk() (*int32, bool) {
	if o == nil || IsNil(o.Left) {
		return nil, false
	}
	return o.Left, true
}

// HasLeft returns a boolean if a field has been set.
func (o *SystemArray) HasLeft() bool {
	if o != nil && !IsNil(o.Left) {
		return true
	}

	return false
}

// SetLeft gets a reference to the given int32 and assigns it to the Left field.
func (o *SystemArray) SetLeft(v int32) {
	o.Left = &v
}

// GetTop returns the Top field value if set, zero value otherwise.
func (o *SystemArray) GetTop() int32 {
	if o == nil || IsNil(o.Top) {
		var ret int32
		return ret
	}
	return *o.Top
}

// GetTopOk returns a tuple with the Top field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemArray) GetTopOk() (*int32, bool) {
	if o == nil || IsNil(o.Top) {
		return nil, false
	}
	return o.Top, true
}

// HasTop returns a boolean if a field has been set.
func (o *SystemArray) HasTop() bool {
	if o != nil && !IsNil(o.Top) {
		return true
	}

	return false
}

// SetTop gets a reference to the given int32 and assigns it to the Top field.
func (o *SystemArray) SetTop(v int32) {
	o.Top = &v
}

// GetModules returns the Modules field value if set, zero value otherwise.
func (o *SystemArray) GetModules() []SystemArrayModulesInner {
	if o == nil || IsNil(o.Modules) {
		var ret []SystemArrayModulesInner
		return ret
	}
	return o.Modules
}

// GetModulesOk returns a tuple with the Modules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemArray) GetModulesOk() ([]SystemArrayModulesInner, bool) {
	if o == nil || IsNil(o.Modules) {
		return nil, false
	}
	return o.Modules, true
}

// HasModules returns a boolean if a field has been set.
func (o *SystemArray) HasModules() bool {
	if o != nil && !IsNil(o.Modules) {
		return true
	}

	return false
}

// SetModules gets a reference to the given []SystemArrayModulesInner and assigns it to the Modules field.
func (o *SystemArray) SetModules(v []SystemArrayModulesInner) {
	o.Modules = v
}

func (o SystemArray) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SystemArray) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Angle) {
		toSerialize["angle"] = o.Angle
	}
	if !IsNil(o.Tilt) {
		toSerialize["tilt"] = o.Tilt
	}
	if !IsNil(o.ReportingEnvoys) {
		toSerialize["reporting_envoys"] = o.ReportingEnvoys
	}
	if !IsNil(o.ProvisionedEnvoy) {
		toSerialize["provisioned_envoy"] = o.ProvisionedEnvoy
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Left) {
		toSerialize["left"] = o.Left
	}
	if !IsNil(o.Top) {
		toSerialize["top"] = o.Top
	}
	if !IsNil(o.Modules) {
		toSerialize["modules"] = o.Modules
	}
	return toSerialize, nil
}

type NullableSystemArray struct {
	value *SystemArray
	isSet bool
}

func (v NullableSystemArray) Get() *SystemArray {
	return v.value
}

func (v *NullableSystemArray) Set(val *SystemArray) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemArray) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemArray) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemArray(val *SystemArray) *NullableSystemArray {
	return &NullableSystemArray{value: val, isSet: true}
}

func (v NullableSystemArray) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemArray) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


