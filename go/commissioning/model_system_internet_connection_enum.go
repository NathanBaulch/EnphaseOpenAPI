/*
The Enphase Commissioning API

Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package commissioning

import (
	"encoding/json"
	"fmt"
)

// SystemInternetConnectionEnum How the system's Envoys connect to the Internet. Use 'dialup' if the Internet connection is satellite or dial-up.
type SystemInternetConnectionEnum string

// List of SystemInternetConnectionEnum
const (
	SYSTEMINTERNETCONNECTIONENUM_NONE SystemInternetConnectionEnum = "none"
	SYSTEMINTERNETCONNECTIONENUM_CELLULAR SystemInternetConnectionEnum = "cellular"
	SYSTEMINTERNETCONNECTIONENUM_BROADBAND SystemInternetConnectionEnum = "broadband"
	SYSTEMINTERNETCONNECTIONENUM_DIALUP SystemInternetConnectionEnum = "dialup"
)

// All allowed values of SystemInternetConnectionEnum enum
var AllowedSystemInternetConnectionEnumEnumValues = []SystemInternetConnectionEnum{
	"none",
	"cellular",
	"broadband",
	"dialup",
}

func (v *SystemInternetConnectionEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SystemInternetConnectionEnum(value)
	for _, existing := range AllowedSystemInternetConnectionEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SystemInternetConnectionEnum", value)
}

// NewSystemInternetConnectionEnumFromValue returns a pointer to a valid SystemInternetConnectionEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSystemInternetConnectionEnumFromValue(v string) (*SystemInternetConnectionEnum, error) {
	ev := SystemInternetConnectionEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SystemInternetConnectionEnum: valid values are %v", v, AllowedSystemInternetConnectionEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SystemInternetConnectionEnum) IsValid() bool {
	for _, existing := range AllowedSystemInternetConnectionEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SystemInternetConnectionEnum value
func (v SystemInternetConnectionEnum) Ptr() *SystemInternetConnectionEnum {
	return &v
}

type NullableSystemInternetConnectionEnum struct {
	value *SystemInternetConnectionEnum
	isSet bool
}

func (v NullableSystemInternetConnectionEnum) Get() *SystemInternetConnectionEnum {
	return v.value
}

func (v *NullableSystemInternetConnectionEnum) Set(val *SystemInternetConnectionEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemInternetConnectionEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemInternetConnectionEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemInternetConnectionEnum(val *SystemInternetConnectionEnum) *NullableSystemInternetConnectionEnum {
	return &NullableSystemInternetConnectionEnum{value: val, isSet: true}
}

func (v NullableSystemInternetConnectionEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemInternetConnectionEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

