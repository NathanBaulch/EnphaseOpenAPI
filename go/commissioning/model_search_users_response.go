/*
The Enphase Commissioning API

Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package commissioning

import (
	"encoding/json"
)

// checks if the SearchUsersResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchUsersResponse{}

// SearchUsersResponse struct for SearchUsersResponse
type SearchUsersResponse struct {
	// Enlighten ID of the user.
	UserId *int32 `json:"user_id,omitempty"`
	// Enlighten ID of the company that the user belongs to. If the user does not belong to a company, this field will not be present in the response.
	CompanyId *int32 `json:"company_id,omitempty"`
}

// NewSearchUsersResponse instantiates a new SearchUsersResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchUsersResponse() *SearchUsersResponse {
	this := SearchUsersResponse{}
	return &this
}

// NewSearchUsersResponseWithDefaults instantiates a new SearchUsersResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchUsersResponseWithDefaults() *SearchUsersResponse {
	this := SearchUsersResponse{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *SearchUsersResponse) GetUserId() int32 {
	if o == nil || IsNil(o.UserId) {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchUsersResponse) GetUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *SearchUsersResponse) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *SearchUsersResponse) SetUserId(v int32) {
	o.UserId = &v
}

// GetCompanyId returns the CompanyId field value if set, zero value otherwise.
func (o *SearchUsersResponse) GetCompanyId() int32 {
	if o == nil || IsNil(o.CompanyId) {
		var ret int32
		return ret
	}
	return *o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchUsersResponse) GetCompanyIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CompanyId) {
		return nil, false
	}
	return o.CompanyId, true
}

// HasCompanyId returns a boolean if a field has been set.
func (o *SearchUsersResponse) HasCompanyId() bool {
	if o != nil && !IsNil(o.CompanyId) {
		return true
	}

	return false
}

// SetCompanyId gets a reference to the given int32 and assigns it to the CompanyId field.
func (o *SearchUsersResponse) SetCompanyId(v int32) {
	o.CompanyId = &v
}

func (o SearchUsersResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchUsersResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.CompanyId) {
		toSerialize["company_id"] = o.CompanyId
	}
	return toSerialize, nil
}

type NullableSearchUsersResponse struct {
	value *SearchUsersResponse
	isSet bool
}

func (v NullableSearchUsersResponse) Get() *SearchUsersResponse {
	return v.value
}

func (v *NullableSearchUsersResponse) Set(val *SearchUsersResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchUsersResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchUsersResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchUsersResponse(val *SearchUsersResponse) *NullableSearchUsersResponse {
	return &NullableSearchUsersResponse{value: val, isSet: true}
}

func (v NullableSearchUsersResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchUsersResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


