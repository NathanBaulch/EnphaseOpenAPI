/*
The Enphase Commissioning API

Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package commissioning

import (
	"encoding/json"
)

// checks if the SystemParamsAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SystemParamsAddress{}

// SystemParamsAddress Location of the system. Use the ISO 3166-1 2-letter code for the country. Latitude and longitude are calculated by Enlighten, not provided by the client.
type SystemParamsAddress struct {
	Street1 string `json:"street1"`
	Street2 *string `json:"street2,omitempty"`
	City string `json:"city"`
	State string `json:"state"`
	Country string `json:"country"`
	PostalCode string `json:"postal_code"`
}

// NewSystemParamsAddress instantiates a new SystemParamsAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystemParamsAddress(street1 string, city string, state string, country string, postalCode string) *SystemParamsAddress {
	this := SystemParamsAddress{}
	this.Street1 = street1
	this.City = city
	this.State = state
	this.Country = country
	this.PostalCode = postalCode
	return &this
}

// NewSystemParamsAddressWithDefaults instantiates a new SystemParamsAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemParamsAddressWithDefaults() *SystemParamsAddress {
	this := SystemParamsAddress{}
	return &this
}

// GetStreet1 returns the Street1 field value
func (o *SystemParamsAddress) GetStreet1() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Street1
}

// GetStreet1Ok returns a tuple with the Street1 field value
// and a boolean to check if the value has been set.
func (o *SystemParamsAddress) GetStreet1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Street1, true
}

// SetStreet1 sets field value
func (o *SystemParamsAddress) SetStreet1(v string) {
	o.Street1 = v
}

// GetStreet2 returns the Street2 field value if set, zero value otherwise.
func (o *SystemParamsAddress) GetStreet2() string {
	if o == nil || IsNil(o.Street2) {
		var ret string
		return ret
	}
	return *o.Street2
}

// GetStreet2Ok returns a tuple with the Street2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemParamsAddress) GetStreet2Ok() (*string, bool) {
	if o == nil || IsNil(o.Street2) {
		return nil, false
	}
	return o.Street2, true
}

// HasStreet2 returns a boolean if a field has been set.
func (o *SystemParamsAddress) HasStreet2() bool {
	if o != nil && !IsNil(o.Street2) {
		return true
	}

	return false
}

// SetStreet2 gets a reference to the given string and assigns it to the Street2 field.
func (o *SystemParamsAddress) SetStreet2(v string) {
	o.Street2 = &v
}

// GetCity returns the City field value
func (o *SystemParamsAddress) GetCity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *SystemParamsAddress) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *SystemParamsAddress) SetCity(v string) {
	o.City = v
}

// GetState returns the State field value
func (o *SystemParamsAddress) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *SystemParamsAddress) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *SystemParamsAddress) SetState(v string) {
	o.State = v
}

// GetCountry returns the Country field value
func (o *SystemParamsAddress) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *SystemParamsAddress) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *SystemParamsAddress) SetCountry(v string) {
	o.Country = v
}

// GetPostalCode returns the PostalCode field value
func (o *SystemParamsAddress) GetPostalCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value
// and a boolean to check if the value has been set.
func (o *SystemParamsAddress) GetPostalCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PostalCode, true
}

// SetPostalCode sets field value
func (o *SystemParamsAddress) SetPostalCode(v string) {
	o.PostalCode = v
}

func (o SystemParamsAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SystemParamsAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["street1"] = o.Street1
	if !IsNil(o.Street2) {
		toSerialize["street2"] = o.Street2
	}
	toSerialize["city"] = o.City
	toSerialize["state"] = o.State
	toSerialize["country"] = o.Country
	toSerialize["postal_code"] = o.PostalCode
	return toSerialize, nil
}

type NullableSystemParamsAddress struct {
	value *SystemParamsAddress
	isSet bool
}

func (v NullableSystemParamsAddress) Get() *SystemParamsAddress {
	return v.value
}

func (v *NullableSystemParamsAddress) Set(val *SystemParamsAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemParamsAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemParamsAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemParamsAddress(val *SystemParamsAddress) *NullableSystemParamsAddress {
	return &NullableSystemParamsAddress{value: val, isSet: true}
}

func (v NullableSystemParamsAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemParamsAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


