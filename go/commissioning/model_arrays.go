/*
The Enphase Commissioning API

Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package commissioning

import (
	"encoding/json"
)

// checks if the Arrays type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Arrays{}

// Arrays struct for Arrays
type Arrays struct {
	// System ID.
	SystemId *int32 `json:"system_id,omitempty"`
	// System created Epoch time.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// System updated Epoch time.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
	// Angle of the system.
	Angle *int32 `json:"angle,omitempty"`
	Arrays []Array `json:"arrays,omitempty"`
	// List of active inverter serial numbers.
	Inventory []string `json:"inventory,omitempty"`
	InventoryDetails []ArraysInventoryDetailsInner `json:"inventory_details,omitempty"`
	Layers []ArraysLayersInner `json:"layers,omitempty"`
}

// NewArrays instantiates a new Arrays object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArrays() *Arrays {
	this := Arrays{}
	return &this
}

// NewArraysWithDefaults instantiates a new Arrays object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArraysWithDefaults() *Arrays {
	this := Arrays{}
	return &this
}

// GetSystemId returns the SystemId field value if set, zero value otherwise.
func (o *Arrays) GetSystemId() int32 {
	if o == nil || IsNil(o.SystemId) {
		var ret int32
		return ret
	}
	return *o.SystemId
}

// GetSystemIdOk returns a tuple with the SystemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Arrays) GetSystemIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SystemId) {
		return nil, false
	}
	return o.SystemId, true
}

// HasSystemId returns a boolean if a field has been set.
func (o *Arrays) HasSystemId() bool {
	if o != nil && !IsNil(o.SystemId) {
		return true
	}

	return false
}

// SetSystemId gets a reference to the given int32 and assigns it to the SystemId field.
func (o *Arrays) SetSystemId(v int32) {
	o.SystemId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Arrays) GetCreatedAt() int64 {
	if o == nil || IsNil(o.CreatedAt) {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Arrays) GetCreatedAtOk() (*int64, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Arrays) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *Arrays) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Arrays) GetUpdatedAt() int64 {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret int64
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Arrays) GetUpdatedAtOk() (*int64, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Arrays) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int64 and assigns it to the UpdatedAt field.
func (o *Arrays) SetUpdatedAt(v int64) {
	o.UpdatedAt = &v
}

// GetAngle returns the Angle field value if set, zero value otherwise.
func (o *Arrays) GetAngle() int32 {
	if o == nil || IsNil(o.Angle) {
		var ret int32
		return ret
	}
	return *o.Angle
}

// GetAngleOk returns a tuple with the Angle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Arrays) GetAngleOk() (*int32, bool) {
	if o == nil || IsNil(o.Angle) {
		return nil, false
	}
	return o.Angle, true
}

// HasAngle returns a boolean if a field has been set.
func (o *Arrays) HasAngle() bool {
	if o != nil && !IsNil(o.Angle) {
		return true
	}

	return false
}

// SetAngle gets a reference to the given int32 and assigns it to the Angle field.
func (o *Arrays) SetAngle(v int32) {
	o.Angle = &v
}

// GetArrays returns the Arrays field value if set, zero value otherwise.
func (o *Arrays) GetArrays() []Array {
	if o == nil || IsNil(o.Arrays) {
		var ret []Array
		return ret
	}
	return o.Arrays
}

// GetArraysOk returns a tuple with the Arrays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Arrays) GetArraysOk() ([]Array, bool) {
	if o == nil || IsNil(o.Arrays) {
		return nil, false
	}
	return o.Arrays, true
}

// HasArrays returns a boolean if a field has been set.
func (o *Arrays) HasArrays() bool {
	if o != nil && !IsNil(o.Arrays) {
		return true
	}

	return false
}

// SetArrays gets a reference to the given []Array and assigns it to the Arrays field.
func (o *Arrays) SetArrays(v []Array) {
	o.Arrays = v
}

// GetInventory returns the Inventory field value if set, zero value otherwise.
func (o *Arrays) GetInventory() []string {
	if o == nil || IsNil(o.Inventory) {
		var ret []string
		return ret
	}
	return o.Inventory
}

// GetInventoryOk returns a tuple with the Inventory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Arrays) GetInventoryOk() ([]string, bool) {
	if o == nil || IsNil(o.Inventory) {
		return nil, false
	}
	return o.Inventory, true
}

// HasInventory returns a boolean if a field has been set.
func (o *Arrays) HasInventory() bool {
	if o != nil && !IsNil(o.Inventory) {
		return true
	}

	return false
}

// SetInventory gets a reference to the given []string and assigns it to the Inventory field.
func (o *Arrays) SetInventory(v []string) {
	o.Inventory = v
}

// GetInventoryDetails returns the InventoryDetails field value if set, zero value otherwise.
func (o *Arrays) GetInventoryDetails() []ArraysInventoryDetailsInner {
	if o == nil || IsNil(o.InventoryDetails) {
		var ret []ArraysInventoryDetailsInner
		return ret
	}
	return o.InventoryDetails
}

// GetInventoryDetailsOk returns a tuple with the InventoryDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Arrays) GetInventoryDetailsOk() ([]ArraysInventoryDetailsInner, bool) {
	if o == nil || IsNil(o.InventoryDetails) {
		return nil, false
	}
	return o.InventoryDetails, true
}

// HasInventoryDetails returns a boolean if a field has been set.
func (o *Arrays) HasInventoryDetails() bool {
	if o != nil && !IsNil(o.InventoryDetails) {
		return true
	}

	return false
}

// SetInventoryDetails gets a reference to the given []ArraysInventoryDetailsInner and assigns it to the InventoryDetails field.
func (o *Arrays) SetInventoryDetails(v []ArraysInventoryDetailsInner) {
	o.InventoryDetails = v
}

// GetLayers returns the Layers field value if set, zero value otherwise.
func (o *Arrays) GetLayers() []ArraysLayersInner {
	if o == nil || IsNil(o.Layers) {
		var ret []ArraysLayersInner
		return ret
	}
	return o.Layers
}

// GetLayersOk returns a tuple with the Layers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Arrays) GetLayersOk() ([]ArraysLayersInner, bool) {
	if o == nil || IsNil(o.Layers) {
		return nil, false
	}
	return o.Layers, true
}

// HasLayers returns a boolean if a field has been set.
func (o *Arrays) HasLayers() bool {
	if o != nil && !IsNil(o.Layers) {
		return true
	}

	return false
}

// SetLayers gets a reference to the given []ArraysLayersInner and assigns it to the Layers field.
func (o *Arrays) SetLayers(v []ArraysLayersInner) {
	o.Layers = v
}

func (o Arrays) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Arrays) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SystemId) {
		toSerialize["system_id"] = o.SystemId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Angle) {
		toSerialize["angle"] = o.Angle
	}
	if !IsNil(o.Arrays) {
		toSerialize["arrays"] = o.Arrays
	}
	if !IsNil(o.Inventory) {
		toSerialize["inventory"] = o.Inventory
	}
	if !IsNil(o.InventoryDetails) {
		toSerialize["inventory_details"] = o.InventoryDetails
	}
	if !IsNil(o.Layers) {
		toSerialize["layers"] = o.Layers
	}
	return toSerialize, nil
}

type NullableArrays struct {
	value *Arrays
	isSet bool
}

func (v NullableArrays) Get() *Arrays {
	return v.value
}

func (v *NullableArrays) Set(val *Arrays) {
	v.value = val
	v.isSet = true
}

func (v NullableArrays) IsSet() bool {
	return v.isSet
}

func (v *NullableArrays) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArrays(val *Arrays) *NullableArrays {
	return &NullableArrays{value: val, isSet: true}
}

func (v NullableArrays) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArrays) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


