/*
The Enphase Commissioning API

Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package commissioning

import (
	"encoding/json"
	"fmt"
)

// SystemStageEnum the model 'SystemStageEnum'
type SystemStageEnum string

// List of SystemStageEnum
const (
	SYSTEMSTAGEENUM__1 SystemStageEnum = "1"
	SYSTEMSTAGEENUM__2 SystemStageEnum = "2"
	SYSTEMSTAGEENUM__3 SystemStageEnum = "3"
	SYSTEMSTAGEENUM__4 SystemStageEnum = "4"
	SYSTEMSTAGEENUM__5 SystemStageEnum = "5"
	SYSTEMSTAGEENUM_IN_PROGRESS SystemStageEnum = "in_progress"
)

// All allowed values of SystemStageEnum enum
var AllowedSystemStageEnumEnumValues = []SystemStageEnum{
	"1",
	"2",
	"3",
	"4",
	"5",
	"in_progress",
}

func (v *SystemStageEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SystemStageEnum(value)
	for _, existing := range AllowedSystemStageEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SystemStageEnum", value)
}

// NewSystemStageEnumFromValue returns a pointer to a valid SystemStageEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSystemStageEnumFromValue(v string) (*SystemStageEnum, error) {
	ev := SystemStageEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SystemStageEnum: valid values are %v", v, AllowedSystemStageEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SystemStageEnum) IsValid() bool {
	for _, existing := range AllowedSystemStageEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SystemStageEnum value
func (v SystemStageEnum) Ptr() *SystemStageEnum {
	return &v
}

type NullableSystemStageEnum struct {
	value *SystemStageEnum
	isSet bool
}

func (v NullableSystemStageEnum) Get() *SystemStageEnum {
	return v.value
}

func (v *NullableSystemStageEnum) Set(val *SystemStageEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemStageEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemStageEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemStageEnum(val *SystemStageEnum) *NullableSystemStageEnum {
	return &NullableSystemStageEnum{value: val, isSet: true}
}

func (v NullableSystemStageEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemStageEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

