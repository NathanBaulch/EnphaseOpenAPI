/*
The Enphase Commissioning API

Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package commissioning

import (
	"encoding/json"
	"fmt"
)

// UserExpandEnum the model 'UserExpandEnum'
type UserExpandEnum string

// List of UserExpandEnum
const (
	USEREXPANDENUM_COMPANY UserExpandEnum = "company"
)

// All allowed values of UserExpandEnum enum
var AllowedUserExpandEnumEnumValues = []UserExpandEnum{
	"company",
}

func (v *UserExpandEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserExpandEnum(value)
	for _, existing := range AllowedUserExpandEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserExpandEnum", value)
}

// NewUserExpandEnumFromValue returns a pointer to a valid UserExpandEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserExpandEnumFromValue(v string) (*UserExpandEnum, error) {
	ev := UserExpandEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserExpandEnum: valid values are %v", v, AllowedUserExpandEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserExpandEnum) IsValid() bool {
	for _, existing := range AllowedUserExpandEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserExpandEnum value
func (v UserExpandEnum) Ptr() *UserExpandEnum {
	return &v
}

type NullableUserExpandEnum struct {
	value *UserExpandEnum
	isSet bool
}

func (v NullableUserExpandEnum) Get() *UserExpandEnum {
	return v.value
}

func (v *NullableUserExpandEnum) Set(val *UserExpandEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableUserExpandEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableUserExpandEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserExpandEnum(val *UserExpandEnum) *NullableUserExpandEnum {
	return &NullableUserExpandEnum{value: val, isSet: true}
}

func (v NullableUserExpandEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserExpandEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

