/*
The Enphase Commissioning API

Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package commissioning

import (
	"encoding/json"
	"fmt"
)

// CompanyRoleEnum the model 'CompanyRoleEnum'
type CompanyRoleEnum string

// List of CompanyRoleEnum
const (
	COMPANYROLEENUM_INSTALLER CompanyRoleEnum = "installer"
)

// All allowed values of CompanyRoleEnum enum
var AllowedCompanyRoleEnumEnumValues = []CompanyRoleEnum{
	"installer",
}

func (v *CompanyRoleEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CompanyRoleEnum(value)
	for _, existing := range AllowedCompanyRoleEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CompanyRoleEnum", value)
}

// NewCompanyRoleEnumFromValue returns a pointer to a valid CompanyRoleEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCompanyRoleEnumFromValue(v string) (*CompanyRoleEnum, error) {
	ev := CompanyRoleEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CompanyRoleEnum: valid values are %v", v, AllowedCompanyRoleEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CompanyRoleEnum) IsValid() bool {
	for _, existing := range AllowedCompanyRoleEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CompanyRoleEnum value
func (v CompanyRoleEnum) Ptr() *CompanyRoleEnum {
	return &v
}

type NullableCompanyRoleEnum struct {
	value *CompanyRoleEnum
	isSet bool
}

func (v NullableCompanyRoleEnum) Get() *CompanyRoleEnum {
	return v.value
}

func (v *NullableCompanyRoleEnum) Set(val *CompanyRoleEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyRoleEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyRoleEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyRoleEnum(val *CompanyRoleEnum) *NullableCompanyRoleEnum {
	return &NullableCompanyRoleEnum{value: val, isSet: true}
}

func (v NullableCompanyRoleEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyRoleEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

