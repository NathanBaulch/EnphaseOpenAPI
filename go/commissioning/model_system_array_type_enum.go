/*
The Enphase Commissioning API

Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package commissioning

import (
	"encoding/json"
	"fmt"
)

// SystemArrayTypeEnum Type of array installed. All other values will be ignored. To unset array_type, pass null.
type SystemArrayTypeEnum string

// List of SystemArrayTypeEnum
const (
	SYSTEMARRAYTYPEENUM_FIXED_OPEN_RACK SystemArrayTypeEnum = "fixed_open_rack"
	SYSTEMARRAYTYPEENUM_FIXED_ROOF_MOUNT SystemArrayTypeEnum = "fixed_roof_mount"
	SYSTEMARRAYTYPEENUM_SINGLE_AXIS_TRACKING SystemArrayTypeEnum = "single_axis_tracking"
	SYSTEMARRAYTYPEENUM_SINGLE_AXIS_BACKTRACKING SystemArrayTypeEnum = "single_axis_backtracking"
	SYSTEMARRAYTYPEENUM_DUAL_AXIS_TRACKING SystemArrayTypeEnum = "dual_axis_tracking"
)

// All allowed values of SystemArrayTypeEnum enum
var AllowedSystemArrayTypeEnumEnumValues = []SystemArrayTypeEnum{
	"fixed_open_rack",
	"fixed_roof_mount",
	"single_axis_tracking",
	"single_axis_backtracking",
	"dual_axis_tracking",
}

func (v *SystemArrayTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SystemArrayTypeEnum(value)
	for _, existing := range AllowedSystemArrayTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SystemArrayTypeEnum", value)
}

// NewSystemArrayTypeEnumFromValue returns a pointer to a valid SystemArrayTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSystemArrayTypeEnumFromValue(v string) (*SystemArrayTypeEnum, error) {
	ev := SystemArrayTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SystemArrayTypeEnum: valid values are %v", v, AllowedSystemArrayTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SystemArrayTypeEnum) IsValid() bool {
	for _, existing := range AllowedSystemArrayTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SystemArrayTypeEnum value
func (v SystemArrayTypeEnum) Ptr() *SystemArrayTypeEnum {
	return &v
}

type NullableSystemArrayTypeEnum struct {
	value *SystemArrayTypeEnum
	isSet bool
}

func (v NullableSystemArrayTypeEnum) Get() *SystemArrayTypeEnum {
	return v.value
}

func (v *NullableSystemArrayTypeEnum) Set(val *SystemArrayTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemArrayTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemArrayTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemArrayTypeEnum(val *SystemArrayTypeEnum) *NullableSystemArrayTypeEnum {
	return &NullableSystemArrayTypeEnum{value: val, isSet: true}
}

func (v NullableSystemArrayTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemArrayTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

