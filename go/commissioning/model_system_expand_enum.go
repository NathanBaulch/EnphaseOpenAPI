/*
The Enphase Commissioning API

Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package commissioning

import (
	"encoding/json"
	"fmt"
)

// SystemExpandEnum the model 'SystemExpandEnum'
type SystemExpandEnum string

// List of SystemExpandEnum
const (
	SYSTEMEXPANDENUM_OWNER SystemExpandEnum = "owner"
	SYSTEMEXPANDENUM_OWNER_COMPANY SystemExpandEnum = "owner.company"
	SYSTEMEXPANDENUM_HOST SystemExpandEnum = "host"
	SYSTEMEXPANDENUM_HOST_COMPANY SystemExpandEnum = "host.company"
)

// All allowed values of SystemExpandEnum enum
var AllowedSystemExpandEnumEnumValues = []SystemExpandEnum{
	"owner",
	"owner.company",
	"host",
	"host.company",
}

func (v *SystemExpandEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SystemExpandEnum(value)
	for _, existing := range AllowedSystemExpandEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SystemExpandEnum", value)
}

// NewSystemExpandEnumFromValue returns a pointer to a valid SystemExpandEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSystemExpandEnumFromValue(v string) (*SystemExpandEnum, error) {
	ev := SystemExpandEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SystemExpandEnum: valid values are %v", v, AllowedSystemExpandEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SystemExpandEnum) IsValid() bool {
	for _, existing := range AllowedSystemExpandEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SystemExpandEnum value
func (v SystemExpandEnum) Ptr() *SystemExpandEnum {
	return &v
}

type NullableSystemExpandEnum struct {
	value *SystemExpandEnum
	isSet bool
}

func (v NullableSystemExpandEnum) Get() *SystemExpandEnum {
	return v.value
}

func (v *NullableSystemExpandEnum) Set(val *SystemExpandEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemExpandEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemExpandEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemExpandEnum(val *SystemExpandEnum) *NullableSystemExpandEnum {
	return &NullableSystemExpandEnum{value: val, isSet: true}
}

func (v NullableSystemExpandEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemExpandEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

