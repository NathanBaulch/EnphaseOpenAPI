/*
The Enphase Commissioning API

Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package commissioning

import (
	"encoding/json"
)

// checks if the SystemOwnerCompany type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SystemOwnerCompany{}

// SystemOwnerCompany A hash of information about the owner's company. Use the query parameter 'expand=owner.company' to get owner company detail.
type SystemOwnerCompany struct {
	CompanyId *int32 `json:"company_id,omitempty"`
	CompanyName *string `json:"company_name,omitempty"`
	Location *string `json:"location,omitempty"`
	// What type of company this is in Enphase. For installer company roles will be ['installer']. For other role roles will be empty.
	Roles []CompanyRoleEnum `json:"roles,omitempty"`
	Uri *string `json:"uri,omitempty"`
}

// NewSystemOwnerCompany instantiates a new SystemOwnerCompany object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystemOwnerCompany() *SystemOwnerCompany {
	this := SystemOwnerCompany{}
	return &this
}

// NewSystemOwnerCompanyWithDefaults instantiates a new SystemOwnerCompany object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemOwnerCompanyWithDefaults() *SystemOwnerCompany {
	this := SystemOwnerCompany{}
	return &this
}

// GetCompanyId returns the CompanyId field value if set, zero value otherwise.
func (o *SystemOwnerCompany) GetCompanyId() int32 {
	if o == nil || IsNil(o.CompanyId) {
		var ret int32
		return ret
	}
	return *o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemOwnerCompany) GetCompanyIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CompanyId) {
		return nil, false
	}
	return o.CompanyId, true
}

// HasCompanyId returns a boolean if a field has been set.
func (o *SystemOwnerCompany) HasCompanyId() bool {
	if o != nil && !IsNil(o.CompanyId) {
		return true
	}

	return false
}

// SetCompanyId gets a reference to the given int32 and assigns it to the CompanyId field.
func (o *SystemOwnerCompany) SetCompanyId(v int32) {
	o.CompanyId = &v
}

// GetCompanyName returns the CompanyName field value if set, zero value otherwise.
func (o *SystemOwnerCompany) GetCompanyName() string {
	if o == nil || IsNil(o.CompanyName) {
		var ret string
		return ret
	}
	return *o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemOwnerCompany) GetCompanyNameOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyName) {
		return nil, false
	}
	return o.CompanyName, true
}

// HasCompanyName returns a boolean if a field has been set.
func (o *SystemOwnerCompany) HasCompanyName() bool {
	if o != nil && !IsNil(o.CompanyName) {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given string and assigns it to the CompanyName field.
func (o *SystemOwnerCompany) SetCompanyName(v string) {
	o.CompanyName = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *SystemOwnerCompany) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemOwnerCompany) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *SystemOwnerCompany) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *SystemOwnerCompany) SetLocation(v string) {
	o.Location = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *SystemOwnerCompany) GetRoles() []CompanyRoleEnum {
	if o == nil || IsNil(o.Roles) {
		var ret []CompanyRoleEnum
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemOwnerCompany) GetRolesOk() ([]CompanyRoleEnum, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *SystemOwnerCompany) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []CompanyRoleEnum and assigns it to the Roles field.
func (o *SystemOwnerCompany) SetRoles(v []CompanyRoleEnum) {
	o.Roles = v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *SystemOwnerCompany) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemOwnerCompany) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *SystemOwnerCompany) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *SystemOwnerCompany) SetUri(v string) {
	o.Uri = &v
}

func (o SystemOwnerCompany) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SystemOwnerCompany) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompanyId) {
		toSerialize["company_id"] = o.CompanyId
	}
	if !IsNil(o.CompanyName) {
		toSerialize["company_name"] = o.CompanyName
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	return toSerialize, nil
}

type NullableSystemOwnerCompany struct {
	value *SystemOwnerCompany
	isSet bool
}

func (v NullableSystemOwnerCompany) Get() *SystemOwnerCompany {
	return v.value
}

func (v *NullableSystemOwnerCompany) Set(val *SystemOwnerCompany) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemOwnerCompany) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemOwnerCompany) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemOwnerCompany(val *SystemOwnerCompany) *NullableSystemOwnerCompany {
	return &NullableSystemOwnerCompany{value: val, isSet: true}
}

func (v NullableSystemOwnerCompany) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemOwnerCompany) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


