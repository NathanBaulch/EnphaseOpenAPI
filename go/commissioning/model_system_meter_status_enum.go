/*
The Enphase Commissioning API

Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package commissioning

import (
	"encoding/json"
	"fmt"
)

// SystemMeterStatusEnum the model 'SystemMeterStatusEnum'
type SystemMeterStatusEnum string

// List of SystemMeterStatusEnum
const (
	SYSTEMMETERSTATUSENUM_ENABLED SystemMeterStatusEnum = "enabled"
	SYSTEMMETERSTATUSENUM_DISABLED SystemMeterStatusEnum = "disabled"
)

// All allowed values of SystemMeterStatusEnum enum
var AllowedSystemMeterStatusEnumEnumValues = []SystemMeterStatusEnum{
	"enabled",
	"disabled",
}

func (v *SystemMeterStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SystemMeterStatusEnum(value)
	for _, existing := range AllowedSystemMeterStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SystemMeterStatusEnum", value)
}

// NewSystemMeterStatusEnumFromValue returns a pointer to a valid SystemMeterStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSystemMeterStatusEnumFromValue(v string) (*SystemMeterStatusEnum, error) {
	ev := SystemMeterStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SystemMeterStatusEnum: valid values are %v", v, AllowedSystemMeterStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SystemMeterStatusEnum) IsValid() bool {
	for _, existing := range AllowedSystemMeterStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SystemMeterStatusEnum value
func (v SystemMeterStatusEnum) Ptr() *SystemMeterStatusEnum {
	return &v
}

type NullableSystemMeterStatusEnum struct {
	value *SystemMeterStatusEnum
	isSet bool
}

func (v NullableSystemMeterStatusEnum) Get() *SystemMeterStatusEnum {
	return v.value
}

func (v *NullableSystemMeterStatusEnum) Set(val *SystemMeterStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemMeterStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemMeterStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemMeterStatusEnum(val *SystemMeterStatusEnum) *NullableSystemMeterStatusEnum {
	return &NullableSystemMeterStatusEnum{value: val, isSet: true}
}

func (v NullableSystemMeterStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemMeterStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

