/*
The Enphase Commissioning API

Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package commissioning

import (
	"encoding/json"
)

// checks if the ArrayParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArrayParams{}

// ArrayParams struct for ArrayParams
type ArrayParams struct {
	// ID of the array. ID cannot be changed. It is only used to identify the array that needs to be updated.
	Id *int32 `json:"id,omitempty"`
	// Name of the array.
	Label string `json:"label"`
	// Angle of the array. Rotate the array clockwise by the given value.
	Angle int32 `json:"angle"`
	// Tilt of the array.
	Tilt string `json:"tilt"`
	// Provisioned envoy.
	ProvisionedEnvoy string `json:"provisioned_envoy"`
	// Left axis position of array. Increase the value to move the array to the right, and decrease to move it to the left.
	Left int32 `json:"left"`
	// Top axis position of array. Increase the value to move the array up, and decrease to move it down.
	Top int32 `json:"top"`
	Modules []ArrayParamsModulesInner `json:"modules"`
}

// NewArrayParams instantiates a new ArrayParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArrayParams(label string, angle int32, tilt string, provisionedEnvoy string, left int32, top int32, modules []ArrayParamsModulesInner) *ArrayParams {
	this := ArrayParams{}
	this.Label = label
	this.Angle = angle
	this.Tilt = tilt
	this.ProvisionedEnvoy = provisionedEnvoy
	this.Left = left
	this.Top = top
	this.Modules = modules
	return &this
}

// NewArrayParamsWithDefaults instantiates a new ArrayParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArrayParamsWithDefaults() *ArrayParams {
	this := ArrayParams{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ArrayParams) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayParams) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ArrayParams) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ArrayParams) SetId(v int32) {
	o.Id = &v
}

// GetLabel returns the Label field value
func (o *ArrayParams) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *ArrayParams) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *ArrayParams) SetLabel(v string) {
	o.Label = v
}

// GetAngle returns the Angle field value
func (o *ArrayParams) GetAngle() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Angle
}

// GetAngleOk returns a tuple with the Angle field value
// and a boolean to check if the value has been set.
func (o *ArrayParams) GetAngleOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Angle, true
}

// SetAngle sets field value
func (o *ArrayParams) SetAngle(v int32) {
	o.Angle = v
}

// GetTilt returns the Tilt field value
func (o *ArrayParams) GetTilt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tilt
}

// GetTiltOk returns a tuple with the Tilt field value
// and a boolean to check if the value has been set.
func (o *ArrayParams) GetTiltOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tilt, true
}

// SetTilt sets field value
func (o *ArrayParams) SetTilt(v string) {
	o.Tilt = v
}

// GetProvisionedEnvoy returns the ProvisionedEnvoy field value
func (o *ArrayParams) GetProvisionedEnvoy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProvisionedEnvoy
}

// GetProvisionedEnvoyOk returns a tuple with the ProvisionedEnvoy field value
// and a boolean to check if the value has been set.
func (o *ArrayParams) GetProvisionedEnvoyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProvisionedEnvoy, true
}

// SetProvisionedEnvoy sets field value
func (o *ArrayParams) SetProvisionedEnvoy(v string) {
	o.ProvisionedEnvoy = v
}

// GetLeft returns the Left field value
func (o *ArrayParams) GetLeft() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Left
}

// GetLeftOk returns a tuple with the Left field value
// and a boolean to check if the value has been set.
func (o *ArrayParams) GetLeftOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Left, true
}

// SetLeft sets field value
func (o *ArrayParams) SetLeft(v int32) {
	o.Left = v
}

// GetTop returns the Top field value
func (o *ArrayParams) GetTop() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Top
}

// GetTopOk returns a tuple with the Top field value
// and a boolean to check if the value has been set.
func (o *ArrayParams) GetTopOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Top, true
}

// SetTop sets field value
func (o *ArrayParams) SetTop(v int32) {
	o.Top = v
}

// GetModules returns the Modules field value
func (o *ArrayParams) GetModules() []ArrayParamsModulesInner {
	if o == nil {
		var ret []ArrayParamsModulesInner
		return ret
	}

	return o.Modules
}

// GetModulesOk returns a tuple with the Modules field value
// and a boolean to check if the value has been set.
func (o *ArrayParams) GetModulesOk() ([]ArrayParamsModulesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Modules, true
}

// SetModules sets field value
func (o *ArrayParams) SetModules(v []ArrayParamsModulesInner) {
	o.Modules = v
}

func (o ArrayParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArrayParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["label"] = o.Label
	toSerialize["angle"] = o.Angle
	toSerialize["tilt"] = o.Tilt
	toSerialize["provisioned_envoy"] = o.ProvisionedEnvoy
	toSerialize["left"] = o.Left
	toSerialize["top"] = o.Top
	toSerialize["modules"] = o.Modules
	return toSerialize, nil
}

type NullableArrayParams struct {
	value *ArrayParams
	isSet bool
}

func (v NullableArrayParams) Get() *ArrayParams {
	return v.value
}

func (v *NullableArrayParams) Set(val *ArrayParams) {
	v.value = val
	v.isSet = true
}

func (v NullableArrayParams) IsSet() bool {
	return v.isSet
}

func (v *NullableArrayParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArrayParams(val *ArrayParams) *NullableArrayParams {
	return &NullableArrayParams{value: val, isSet: true}
}

func (v NullableArrayParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArrayParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


