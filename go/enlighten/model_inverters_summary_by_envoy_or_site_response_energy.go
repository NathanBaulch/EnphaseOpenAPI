/*
The Enlighten Systems API

The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enlighten

import (
	"encoding/json"
)

// InvertersSummaryByEnvoyOrSiteResponseEnergy Returns the lifetime energy of the Microinverter. If the system has never produced energy, the energy value would be 0.
type InvertersSummaryByEnvoyOrSiteResponseEnergy struct {
	Value int32 `json:"value"`
	Units string `json:"units"`
	Precision int32 `json:"precision"`
}

// NewInvertersSummaryByEnvoyOrSiteResponseEnergy instantiates a new InvertersSummaryByEnvoyOrSiteResponseEnergy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvertersSummaryByEnvoyOrSiteResponseEnergy(value int32, units string, precision int32) *InvertersSummaryByEnvoyOrSiteResponseEnergy {
	this := InvertersSummaryByEnvoyOrSiteResponseEnergy{}
	this.Value = value
	this.Units = units
	this.Precision = precision
	return &this
}

// NewInvertersSummaryByEnvoyOrSiteResponseEnergyWithDefaults instantiates a new InvertersSummaryByEnvoyOrSiteResponseEnergy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvertersSummaryByEnvoyOrSiteResponseEnergyWithDefaults() *InvertersSummaryByEnvoyOrSiteResponseEnergy {
	this := InvertersSummaryByEnvoyOrSiteResponseEnergy{}
	return &this
}

// GetValue returns the Value field value
func (o *InvertersSummaryByEnvoyOrSiteResponseEnergy) GetValue() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *InvertersSummaryByEnvoyOrSiteResponseEnergy) GetValueOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *InvertersSummaryByEnvoyOrSiteResponseEnergy) SetValue(v int32) {
	o.Value = v
}

// GetUnits returns the Units field value
func (o *InvertersSummaryByEnvoyOrSiteResponseEnergy) GetUnits() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Units
}

// GetUnitsOk returns a tuple with the Units field value
// and a boolean to check if the value has been set.
func (o *InvertersSummaryByEnvoyOrSiteResponseEnergy) GetUnitsOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Units, true
}

// SetUnits sets field value
func (o *InvertersSummaryByEnvoyOrSiteResponseEnergy) SetUnits(v string) {
	o.Units = v
}

// GetPrecision returns the Precision field value
func (o *InvertersSummaryByEnvoyOrSiteResponseEnergy) GetPrecision() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Precision
}

// GetPrecisionOk returns a tuple with the Precision field value
// and a boolean to check if the value has been set.
func (o *InvertersSummaryByEnvoyOrSiteResponseEnergy) GetPrecisionOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Precision, true
}

// SetPrecision sets field value
func (o *InvertersSummaryByEnvoyOrSiteResponseEnergy) SetPrecision(v int32) {
	o.Precision = v
}

func (o InvertersSummaryByEnvoyOrSiteResponseEnergy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["units"] = o.Units
	}
	if true {
		toSerialize["precision"] = o.Precision
	}
	return json.Marshal(toSerialize)
}

type NullableInvertersSummaryByEnvoyOrSiteResponseEnergy struct {
	value *InvertersSummaryByEnvoyOrSiteResponseEnergy
	isSet bool
}

func (v NullableInvertersSummaryByEnvoyOrSiteResponseEnergy) Get() *InvertersSummaryByEnvoyOrSiteResponseEnergy {
	return v.value
}

func (v *NullableInvertersSummaryByEnvoyOrSiteResponseEnergy) Set(val *InvertersSummaryByEnvoyOrSiteResponseEnergy) {
	v.value = val
	v.isSet = true
}

func (v NullableInvertersSummaryByEnvoyOrSiteResponseEnergy) IsSet() bool {
	return v.isSet
}

func (v *NullableInvertersSummaryByEnvoyOrSiteResponseEnergy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvertersSummaryByEnvoyOrSiteResponseEnergy(val *InvertersSummaryByEnvoyOrSiteResponseEnergy) *NullableInvertersSummaryByEnvoyOrSiteResponseEnergy {
	return &NullableInvertersSummaryByEnvoyOrSiteResponseEnergy{value: val, isSet: true}
}

func (v NullableInvertersSummaryByEnvoyOrSiteResponseEnergy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvertersSummaryByEnvoyOrSiteResponseEnergy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


