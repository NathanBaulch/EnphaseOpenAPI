/*
The Enlighten Systems API

The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enlighten

import (
	"encoding/json"
)

// Meta Information about the system that you can use to ascertain the timeliness of the production data included in the response.
type Meta struct {
	Status Status `json:"status"`
	LastReportAt int64 `json:"last_report_at"`
	LastEnergyAt int64 `json:"last_energy_at"`
	OperationalAt int64 `json:"operational_at"`
}

// NewMeta instantiates a new Meta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeta(status Status, lastReportAt int64, lastEnergyAt int64, operationalAt int64) *Meta {
	this := Meta{}
	this.Status = status
	this.LastReportAt = lastReportAt
	this.LastEnergyAt = lastEnergyAt
	this.OperationalAt = operationalAt
	return &this
}

// NewMetaWithDefaults instantiates a new Meta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaWithDefaults() *Meta {
	this := Meta{}
	return &this
}

// GetStatus returns the Status field value
func (o *Meta) GetStatus() Status {
	if o == nil {
		var ret Status
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Meta) GetStatusOk() (*Status, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Meta) SetStatus(v Status) {
	o.Status = v
}

// GetLastReportAt returns the LastReportAt field value
func (o *Meta) GetLastReportAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LastReportAt
}

// GetLastReportAtOk returns a tuple with the LastReportAt field value
// and a boolean to check if the value has been set.
func (o *Meta) GetLastReportAtOk() (*int64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.LastReportAt, true
}

// SetLastReportAt sets field value
func (o *Meta) SetLastReportAt(v int64) {
	o.LastReportAt = v
}

// GetLastEnergyAt returns the LastEnergyAt field value
func (o *Meta) GetLastEnergyAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LastEnergyAt
}

// GetLastEnergyAtOk returns a tuple with the LastEnergyAt field value
// and a boolean to check if the value has been set.
func (o *Meta) GetLastEnergyAtOk() (*int64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.LastEnergyAt, true
}

// SetLastEnergyAt sets field value
func (o *Meta) SetLastEnergyAt(v int64) {
	o.LastEnergyAt = v
}

// GetOperationalAt returns the OperationalAt field value
func (o *Meta) GetOperationalAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.OperationalAt
}

// GetOperationalAtOk returns a tuple with the OperationalAt field value
// and a boolean to check if the value has been set.
func (o *Meta) GetOperationalAtOk() (*int64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.OperationalAt, true
}

// SetOperationalAt sets field value
func (o *Meta) SetOperationalAt(v int64) {
	o.OperationalAt = v
}

func (o Meta) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["last_report_at"] = o.LastReportAt
	}
	if true {
		toSerialize["last_energy_at"] = o.LastEnergyAt
	}
	if true {
		toSerialize["operational_at"] = o.OperationalAt
	}
	return json.Marshal(toSerialize)
}

type NullableMeta struct {
	value *Meta
	isSet bool
}

func (v NullableMeta) Get() *Meta {
	return v.value
}

func (v *NullableMeta) Set(val *Meta) {
	v.value = val
	v.isSet = true
}

func (v NullableMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeta(val *Meta) *NullableMeta {
	return &NullableMeta{value: val, isSet: true}
}

func (v NullableMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


