/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enlighten

import (
	"encoding/json"
)

// InlineResponse2007MeterIntervals struct for InlineResponse2007MeterIntervals
type InlineResponse2007MeterIntervals struct {
	// Serial number of the revenue grade meter.
	MeterSerialNumber string `json:"meter_serial_number"`
	// Serial number of the reporting envoy.
	EnvoySerialNumber string `json:"envoy_serial_number"`
	// Individual meter level interval.
	Intervals []InlineResponse2007Intervals1 `json:"intervals"`
}

// NewInlineResponse2007MeterIntervals instantiates a new InlineResponse2007MeterIntervals object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2007MeterIntervals(meterSerialNumber string, envoySerialNumber string, intervals []InlineResponse2007Intervals1) *InlineResponse2007MeterIntervals {
	this := InlineResponse2007MeterIntervals{}
	this.MeterSerialNumber = meterSerialNumber
	this.EnvoySerialNumber = envoySerialNumber
	this.Intervals = intervals
	return &this
}

// NewInlineResponse2007MeterIntervalsWithDefaults instantiates a new InlineResponse2007MeterIntervals object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2007MeterIntervalsWithDefaults() *InlineResponse2007MeterIntervals {
	this := InlineResponse2007MeterIntervals{}
	return &this
}

// GetMeterSerialNumber returns the MeterSerialNumber field value
func (o *InlineResponse2007MeterIntervals) GetMeterSerialNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MeterSerialNumber
}

// GetMeterSerialNumberOk returns a tuple with the MeterSerialNumber field value
// and a boolean to check if the value has been set.
func (o *InlineResponse2007MeterIntervals) GetMeterSerialNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MeterSerialNumber, true
}

// SetMeterSerialNumber sets field value
func (o *InlineResponse2007MeterIntervals) SetMeterSerialNumber(v string) {
	o.MeterSerialNumber = v
}

// GetEnvoySerialNumber returns the EnvoySerialNumber field value
func (o *InlineResponse2007MeterIntervals) GetEnvoySerialNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvoySerialNumber
}

// GetEnvoySerialNumberOk returns a tuple with the EnvoySerialNumber field value
// and a boolean to check if the value has been set.
func (o *InlineResponse2007MeterIntervals) GetEnvoySerialNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EnvoySerialNumber, true
}

// SetEnvoySerialNumber sets field value
func (o *InlineResponse2007MeterIntervals) SetEnvoySerialNumber(v string) {
	o.EnvoySerialNumber = v
}

// GetIntervals returns the Intervals field value
func (o *InlineResponse2007MeterIntervals) GetIntervals() []InlineResponse2007Intervals1 {
	if o == nil {
		var ret []InlineResponse2007Intervals1
		return ret
	}

	return o.Intervals
}

// GetIntervalsOk returns a tuple with the Intervals field value
// and a boolean to check if the value has been set.
func (o *InlineResponse2007MeterIntervals) GetIntervalsOk() (*[]InlineResponse2007Intervals1, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Intervals, true
}

// SetIntervals sets field value
func (o *InlineResponse2007MeterIntervals) SetIntervals(v []InlineResponse2007Intervals1) {
	o.Intervals = v
}

func (o InlineResponse2007MeterIntervals) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["meter_serial_number"] = o.MeterSerialNumber
	}
	if true {
		toSerialize["envoy_serial_number"] = o.EnvoySerialNumber
	}
	if true {
		toSerialize["intervals"] = o.Intervals
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2007MeterIntervals struct {
	value *InlineResponse2007MeterIntervals
	isSet bool
}

func (v NullableInlineResponse2007MeterIntervals) Get() *InlineResponse2007MeterIntervals {
	return v.value
}

func (v *NullableInlineResponse2007MeterIntervals) Set(val *InlineResponse2007MeterIntervals) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2007MeterIntervals) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2007MeterIntervals) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2007MeterIntervals(val *InlineResponse2007MeterIntervals) *NullableInlineResponse2007MeterIntervals {
	return &NullableInlineResponse2007MeterIntervals{value: val, isSet: true}
}

func (v NullableInlineResponse2007MeterIntervals) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2007MeterIntervals) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


