/*
The Enlighten Systems API

The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enlighten

import (
	"encoding/json"
)

// NotFoundError struct for NotFoundError
type NotFoundError struct {
	Reason string `json:"reason"`
	Message []string `json:"message,omitempty"`
	ErrorMessages []string `json:"errorMessages,omitempty"`
}

// NewNotFoundError instantiates a new NotFoundError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotFoundError(reason string) *NotFoundError {
	this := NotFoundError{}
	this.Reason = reason
	return &this
}

// NewNotFoundErrorWithDefaults instantiates a new NotFoundError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotFoundErrorWithDefaults() *NotFoundError {
	this := NotFoundError{}
	return &this
}

// GetReason returns the Reason field value
func (o *NotFoundError) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *NotFoundError) GetReasonOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *NotFoundError) SetReason(v string) {
	o.Reason = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *NotFoundError) GetMessage() []string {
	if o == nil || o.Message == nil {
		var ret []string
		return ret
	}
	return o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotFoundError) GetMessageOk() ([]string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *NotFoundError) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given []string and assigns it to the Message field.
func (o *NotFoundError) SetMessage(v []string) {
	o.Message = v
}

// GetErrorMessages returns the ErrorMessages field value if set, zero value otherwise.
func (o *NotFoundError) GetErrorMessages() []string {
	if o == nil || o.ErrorMessages == nil {
		var ret []string
		return ret
	}
	return o.ErrorMessages
}

// GetErrorMessagesOk returns a tuple with the ErrorMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotFoundError) GetErrorMessagesOk() ([]string, bool) {
	if o == nil || o.ErrorMessages == nil {
		return nil, false
	}
	return o.ErrorMessages, true
}

// HasErrorMessages returns a boolean if a field has been set.
func (o *NotFoundError) HasErrorMessages() bool {
	if o != nil && o.ErrorMessages != nil {
		return true
	}

	return false
}

// SetErrorMessages gets a reference to the given []string and assigns it to the ErrorMessages field.
func (o *NotFoundError) SetErrorMessages(v []string) {
	o.ErrorMessages = v
}

func (o NotFoundError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["reason"] = o.Reason
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.ErrorMessages != nil {
		toSerialize["errorMessages"] = o.ErrorMessages
	}
	return json.Marshal(toSerialize)
}

type NullableNotFoundError struct {
	value *NotFoundError
	isSet bool
}

func (v NullableNotFoundError) Get() *NotFoundError {
	return v.value
}

func (v *NullableNotFoundError) Set(val *NotFoundError) {
	v.value = val
	v.isSet = true
}

func (v NullableNotFoundError) IsSet() bool {
	return v.isSet
}

func (v *NullableNotFoundError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotFoundError(val *NotFoundError) *NullableNotFoundError {
	return &NullableNotFoundError{value: val, isSet: true}
}

func (v NullableNotFoundError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotFoundError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


