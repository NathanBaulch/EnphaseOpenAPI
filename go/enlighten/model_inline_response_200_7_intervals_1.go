/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enlighten

import (
	"encoding/json"
)

// InlineResponse2007Intervals1 struct for InlineResponse2007Intervals1
type InlineResponse2007Intervals1 struct {
	// The reporting channel identifier.
	Channel int32 `json:"channel"`
	// End of interval. The format is Unix epoch time unless you pass a `datetime_format` parameter as described [here](https://developer.enphase.com/docs#Datetimes).
	EndAt int32 `json:"end_at"`
	// Energy delivered during this interval, in Watt-hours.
	WhDel int32 `json:"wh_del"`
	// Energy delivered during this interval, in Watts.
	CurrW int32 `json:"curr_w"`
}

// NewInlineResponse2007Intervals1 instantiates a new InlineResponse2007Intervals1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2007Intervals1(channel int32, endAt int32, whDel int32, currW int32) *InlineResponse2007Intervals1 {
	this := InlineResponse2007Intervals1{}
	this.Channel = channel
	this.EndAt = endAt
	this.WhDel = whDel
	this.CurrW = currW
	return &this
}

// NewInlineResponse2007Intervals1WithDefaults instantiates a new InlineResponse2007Intervals1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2007Intervals1WithDefaults() *InlineResponse2007Intervals1 {
	this := InlineResponse2007Intervals1{}
	return &this
}

// GetChannel returns the Channel field value
func (o *InlineResponse2007Intervals1) GetChannel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Channel
}

// GetChannelOk returns a tuple with the Channel field value
// and a boolean to check if the value has been set.
func (o *InlineResponse2007Intervals1) GetChannelOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Channel, true
}

// SetChannel sets field value
func (o *InlineResponse2007Intervals1) SetChannel(v int32) {
	o.Channel = v
}

// GetEndAt returns the EndAt field value
func (o *InlineResponse2007Intervals1) GetEndAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EndAt
}

// GetEndAtOk returns a tuple with the EndAt field value
// and a boolean to check if the value has been set.
func (o *InlineResponse2007Intervals1) GetEndAtOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EndAt, true
}

// SetEndAt sets field value
func (o *InlineResponse2007Intervals1) SetEndAt(v int32) {
	o.EndAt = v
}

// GetWhDel returns the WhDel field value
func (o *InlineResponse2007Intervals1) GetWhDel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.WhDel
}

// GetWhDelOk returns a tuple with the WhDel field value
// and a boolean to check if the value has been set.
func (o *InlineResponse2007Intervals1) GetWhDelOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WhDel, true
}

// SetWhDel sets field value
func (o *InlineResponse2007Intervals1) SetWhDel(v int32) {
	o.WhDel = v
}

// GetCurrW returns the CurrW field value
func (o *InlineResponse2007Intervals1) GetCurrW() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CurrW
}

// GetCurrWOk returns a tuple with the CurrW field value
// and a boolean to check if the value has been set.
func (o *InlineResponse2007Intervals1) GetCurrWOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CurrW, true
}

// SetCurrW sets field value
func (o *InlineResponse2007Intervals1) SetCurrW(v int32) {
	o.CurrW = v
}

func (o InlineResponse2007Intervals1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["channel"] = o.Channel
	}
	if true {
		toSerialize["end_at"] = o.EndAt
	}
	if true {
		toSerialize["wh_del"] = o.WhDel
	}
	if true {
		toSerialize["curr_w"] = o.CurrW
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2007Intervals1 struct {
	value *InlineResponse2007Intervals1
	isSet bool
}

func (v NullableInlineResponse2007Intervals1) Get() *InlineResponse2007Intervals1 {
	return v.value
}

func (v *NullableInlineResponse2007Intervals1) Set(val *InlineResponse2007Intervals1) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2007Intervals1) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2007Intervals1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2007Intervals1(val *InlineResponse2007Intervals1) *NullableInlineResponse2007Intervals1 {
	return &NullableInlineResponse2007Intervals1{value: val, isSet: true}
}

func (v NullableInlineResponse2007Intervals1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2007Intervals1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


