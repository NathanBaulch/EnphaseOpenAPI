/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enlighten

import (
	"encoding/json"
)

// InlineResponse2001 struct for InlineResponse2001
type InlineResponse2001 struct {
	// The identifier of the system.
	SystemId int32 `json:"system_id"`
	// A list of active Envoys on this system.
	Envoys []InlineResponse2001Envoys `json:"envoys"`
}

// NewInlineResponse2001 instantiates a new InlineResponse2001 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2001(systemId int32, envoys []InlineResponse2001Envoys) *InlineResponse2001 {
	this := InlineResponse2001{}
	this.SystemId = systemId
	this.Envoys = envoys
	return &this
}

// NewInlineResponse2001WithDefaults instantiates a new InlineResponse2001 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2001WithDefaults() *InlineResponse2001 {
	this := InlineResponse2001{}
	return &this
}

// GetSystemId returns the SystemId field value
func (o *InlineResponse2001) GetSystemId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SystemId
}

// GetSystemIdOk returns a tuple with the SystemId field value
// and a boolean to check if the value has been set.
func (o *InlineResponse2001) GetSystemIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SystemId, true
}

// SetSystemId sets field value
func (o *InlineResponse2001) SetSystemId(v int32) {
	o.SystemId = v
}

// GetEnvoys returns the Envoys field value
func (o *InlineResponse2001) GetEnvoys() []InlineResponse2001Envoys {
	if o == nil {
		var ret []InlineResponse2001Envoys
		return ret
	}

	return o.Envoys
}

// GetEnvoysOk returns a tuple with the Envoys field value
// and a boolean to check if the value has been set.
func (o *InlineResponse2001) GetEnvoysOk() (*[]InlineResponse2001Envoys, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Envoys, true
}

// SetEnvoys sets field value
func (o *InlineResponse2001) SetEnvoys(v []InlineResponse2001Envoys) {
	o.Envoys = v
}

func (o InlineResponse2001) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["system_id"] = o.SystemId
	}
	if true {
		toSerialize["envoys"] = o.Envoys
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2001 struct {
	value *InlineResponse2001
	isSet bool
}

func (v NullableInlineResponse2001) Get() *InlineResponse2001 {
	return v.value
}

func (v *NullableInlineResponse2001) Set(val *InlineResponse2001) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2001) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2001) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2001(val *InlineResponse2001) *NullableInlineResponse2001 {
	return &NullableInlineResponse2001{value: val, isSet: true}
}

func (v NullableInlineResponse2001) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2001) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


