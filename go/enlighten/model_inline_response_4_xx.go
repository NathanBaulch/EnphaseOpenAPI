/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enlighten

import (
	"encoding/json"
)

// InlineResponse4XX struct for InlineResponse4XX
type InlineResponse4XX struct {
	Reason string `json:"reason"`
	Message []string `json:"message"`
}

// NewInlineResponse4XX instantiates a new InlineResponse4XX object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse4XX(reason string, message []string) *InlineResponse4XX {
	this := InlineResponse4XX{}
	this.Reason = reason
	this.Message = message
	return &this
}

// NewInlineResponse4XXWithDefaults instantiates a new InlineResponse4XX object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse4XXWithDefaults() *InlineResponse4XX {
	this := InlineResponse4XX{}
	return &this
}

// GetReason returns the Reason field value
func (o *InlineResponse4XX) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *InlineResponse4XX) GetReasonOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *InlineResponse4XX) SetReason(v string) {
	o.Reason = v
}

// GetMessage returns the Message field value
func (o *InlineResponse4XX) GetMessage() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *InlineResponse4XX) GetMessageOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *InlineResponse4XX) SetMessage(v []string) {
	o.Message = v
}

func (o InlineResponse4XX) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["reason"] = o.Reason
	}
	if true {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse4XX struct {
	value *InlineResponse4XX
	isSet bool
}

func (v NullableInlineResponse4XX) Get() *InlineResponse4XX {
	return v.value
}

func (v *NullableInlineResponse4XX) Set(val *InlineResponse4XX) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse4XX) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse4XX) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse4XX(val *InlineResponse4XX) *NullableInlineResponse4XX {
	return &NullableInlineResponse4XX{value: val, isSet: true}
}

func (v NullableInlineResponse4XX) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse4XX) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


