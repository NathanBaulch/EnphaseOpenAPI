/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enlighten

import (
	"encoding/json"
)

// RgmStatsResponse struct for RgmStatsResponse
type RgmStatsResponse struct {
	// Enlighten ID for this system.
	SystemId int32 `json:"system_id"`
	// Number of active revenue-grade meters for this system.
	TotalDevices int32 `json:"total_devices"`
	Meta Meta `json:"meta"`
	// A list of intervals between the requested start and end times.
	Intervals []RgmStatsResponseIntervals `json:"intervals"`
	// A list of intervals of a meter between the requested start and end times.
	MeterIntervals []RgmStatsResponseMeterIntervals `json:"meter_intervals"`
}

// NewRgmStatsResponse instantiates a new RgmStatsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRgmStatsResponse(systemId int32, totalDevices int32, meta Meta, intervals []RgmStatsResponseIntervals, meterIntervals []RgmStatsResponseMeterIntervals) *RgmStatsResponse {
	this := RgmStatsResponse{}
	this.SystemId = systemId
	this.TotalDevices = totalDevices
	this.Meta = meta
	this.Intervals = intervals
	this.MeterIntervals = meterIntervals
	return &this
}

// NewRgmStatsResponseWithDefaults instantiates a new RgmStatsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRgmStatsResponseWithDefaults() *RgmStatsResponse {
	this := RgmStatsResponse{}
	return &this
}

// GetSystemId returns the SystemId field value
func (o *RgmStatsResponse) GetSystemId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SystemId
}

// GetSystemIdOk returns a tuple with the SystemId field value
// and a boolean to check if the value has been set.
func (o *RgmStatsResponse) GetSystemIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SystemId, true
}

// SetSystemId sets field value
func (o *RgmStatsResponse) SetSystemId(v int32) {
	o.SystemId = v
}

// GetTotalDevices returns the TotalDevices field value
func (o *RgmStatsResponse) GetTotalDevices() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalDevices
}

// GetTotalDevicesOk returns a tuple with the TotalDevices field value
// and a boolean to check if the value has been set.
func (o *RgmStatsResponse) GetTotalDevicesOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TotalDevices, true
}

// SetTotalDevices sets field value
func (o *RgmStatsResponse) SetTotalDevices(v int32) {
	o.TotalDevices = v
}

// GetMeta returns the Meta field value
func (o *RgmStatsResponse) GetMeta() Meta {
	if o == nil {
		var ret Meta
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *RgmStatsResponse) GetMetaOk() (*Meta, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *RgmStatsResponse) SetMeta(v Meta) {
	o.Meta = v
}

// GetIntervals returns the Intervals field value
func (o *RgmStatsResponse) GetIntervals() []RgmStatsResponseIntervals {
	if o == nil {
		var ret []RgmStatsResponseIntervals
		return ret
	}

	return o.Intervals
}

// GetIntervalsOk returns a tuple with the Intervals field value
// and a boolean to check if the value has been set.
func (o *RgmStatsResponse) GetIntervalsOk() (*[]RgmStatsResponseIntervals, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Intervals, true
}

// SetIntervals sets field value
func (o *RgmStatsResponse) SetIntervals(v []RgmStatsResponseIntervals) {
	o.Intervals = v
}

// GetMeterIntervals returns the MeterIntervals field value
func (o *RgmStatsResponse) GetMeterIntervals() []RgmStatsResponseMeterIntervals {
	if o == nil {
		var ret []RgmStatsResponseMeterIntervals
		return ret
	}

	return o.MeterIntervals
}

// GetMeterIntervalsOk returns a tuple with the MeterIntervals field value
// and a boolean to check if the value has been set.
func (o *RgmStatsResponse) GetMeterIntervalsOk() (*[]RgmStatsResponseMeterIntervals, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MeterIntervals, true
}

// SetMeterIntervals sets field value
func (o *RgmStatsResponse) SetMeterIntervals(v []RgmStatsResponseMeterIntervals) {
	o.MeterIntervals = v
}

func (o RgmStatsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["system_id"] = o.SystemId
	}
	if true {
		toSerialize["total_devices"] = o.TotalDevices
	}
	if true {
		toSerialize["meta"] = o.Meta
	}
	if true {
		toSerialize["intervals"] = o.Intervals
	}
	if true {
		toSerialize["meter_intervals"] = o.MeterIntervals
	}
	return json.Marshal(toSerialize)
}

type NullableRgmStatsResponse struct {
	value *RgmStatsResponse
	isSet bool
}

func (v NullableRgmStatsResponse) Get() *RgmStatsResponse {
	return v.value
}

func (v *NullableRgmStatsResponse) Set(val *RgmStatsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRgmStatsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRgmStatsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRgmStatsResponse(val *RgmStatsResponse) *NullableRgmStatsResponse {
	return &NullableRgmStatsResponse{value: val, isSet: true}
}

func (v NullableRgmStatsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRgmStatsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


