/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enlighten

import (
	"encoding/json"
)

// Systems struct for Systems
type Systems struct {
	Systems []SystemsSystems `json:"systems"`
	Next string `json:"next"`
}

// NewSystems instantiates a new Systems object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystems(systems []SystemsSystems, next string) *Systems {
	this := Systems{}
	this.Systems = systems
	this.Next = next
	return &this
}

// NewSystemsWithDefaults instantiates a new Systems object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemsWithDefaults() *Systems {
	this := Systems{}
	return &this
}

// GetSystems returns the Systems field value
func (o *Systems) GetSystems() []SystemsSystems {
	if o == nil {
		var ret []SystemsSystems
		return ret
	}

	return o.Systems
}

// GetSystemsOk returns a tuple with the Systems field value
// and a boolean to check if the value has been set.
func (o *Systems) GetSystemsOk() (*[]SystemsSystems, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Systems, true
}

// SetSystems sets field value
func (o *Systems) SetSystems(v []SystemsSystems) {
	o.Systems = v
}

// GetNext returns the Next field value
func (o *Systems) GetNext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Next
}

// GetNextOk returns a tuple with the Next field value
// and a boolean to check if the value has been set.
func (o *Systems) GetNextOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Next, true
}

// SetNext sets field value
func (o *Systems) SetNext(v string) {
	o.Next = v
}

func (o Systems) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["systems"] = o.Systems
	}
	if true {
		toSerialize["next"] = o.Next
	}
	return json.Marshal(toSerialize)
}

type NullableSystems struct {
	value *Systems
	isSet bool
}

func (v NullableSystems) Get() *Systems {
	return v.value
}

func (v *NullableSystems) Set(val *Systems) {
	v.value = val
	v.isSet = true
}

func (v NullableSystems) IsSet() bool {
	return v.isSet
}

func (v *NullableSystems) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystems(val *Systems) *NullableSystems {
	return &NullableSystems{value: val, isSet: true}
}

func (v NullableSystems) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystems) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


