/*
The Enlighten Systems API

The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enlighten

import (
	"encoding/json"
)

// checks if the StatsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatsResponse{}

// StatsResponse struct for StatsResponse
type StatsResponse struct {
	// Enlighten ID for this system.
	SystemId int32 `json:"system_id"`
	// Number of active microinverters for this system.
	TotalDevices int32 `json:"total_devices"`
	Meta Meta `json:"meta"`
	// A list of intervals between the requested start and end times.
	Intervals []StatsResponseIntervalsInner `json:"intervals"`
}

// NewStatsResponse instantiates a new StatsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatsResponse(systemId int32, totalDevices int32, meta Meta, intervals []StatsResponseIntervalsInner) *StatsResponse {
	this := StatsResponse{}
	this.SystemId = systemId
	this.TotalDevices = totalDevices
	this.Meta = meta
	this.Intervals = intervals
	return &this
}

// NewStatsResponseWithDefaults instantiates a new StatsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatsResponseWithDefaults() *StatsResponse {
	this := StatsResponse{}
	return &this
}

// GetSystemId returns the SystemId field value
func (o *StatsResponse) GetSystemId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SystemId
}

// GetSystemIdOk returns a tuple with the SystemId field value
// and a boolean to check if the value has been set.
func (o *StatsResponse) GetSystemIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SystemId, true
}

// SetSystemId sets field value
func (o *StatsResponse) SetSystemId(v int32) {
	o.SystemId = v
}

// GetTotalDevices returns the TotalDevices field value
func (o *StatsResponse) GetTotalDevices() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalDevices
}

// GetTotalDevicesOk returns a tuple with the TotalDevices field value
// and a boolean to check if the value has been set.
func (o *StatsResponse) GetTotalDevicesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalDevices, true
}

// SetTotalDevices sets field value
func (o *StatsResponse) SetTotalDevices(v int32) {
	o.TotalDevices = v
}

// GetMeta returns the Meta field value
func (o *StatsResponse) GetMeta() Meta {
	if o == nil {
		var ret Meta
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *StatsResponse) GetMetaOk() (*Meta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *StatsResponse) SetMeta(v Meta) {
	o.Meta = v
}

// GetIntervals returns the Intervals field value
func (o *StatsResponse) GetIntervals() []StatsResponseIntervalsInner {
	if o == nil {
		var ret []StatsResponseIntervalsInner
		return ret
	}

	return o.Intervals
}

// GetIntervalsOk returns a tuple with the Intervals field value
// and a boolean to check if the value has been set.
func (o *StatsResponse) GetIntervalsOk() ([]StatsResponseIntervalsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Intervals, true
}

// SetIntervals sets field value
func (o *StatsResponse) SetIntervals(v []StatsResponseIntervalsInner) {
	o.Intervals = v
}

func (o StatsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["system_id"] = o.SystemId
	toSerialize["total_devices"] = o.TotalDevices
	toSerialize["meta"] = o.Meta
	toSerialize["intervals"] = o.Intervals
	return toSerialize, nil
}

type NullableStatsResponse struct {
	value *StatsResponse
	isSet bool
}

func (v NullableStatsResponse) Get() *StatsResponse {
	return v.value
}

func (v *NullableStatsResponse) Set(val *StatsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableStatsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableStatsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatsResponse(val *StatsResponse) *NullableStatsResponse {
	return &NullableStatsResponse{value: val, isSet: true}
}

func (v NullableStatsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


