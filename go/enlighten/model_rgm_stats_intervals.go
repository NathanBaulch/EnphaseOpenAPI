/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enlighten

import (
	"encoding/json"
)

// RgmStatsIntervals struct for RgmStatsIntervals
type RgmStatsIntervals struct {
	// End of interval. The format is Unix epoch time unless you pass a `datetime_format` parameter as described [here](https://developer.enphase.com/docs#Datetimes).
	EndAt int32 `json:"end_at"`
	// Energy delivered during this interval, in Watt-hours.
	WhDel int32 `json:"wh_del"`
	// Number of revenue-grade meters that reported data for this interval at the time of the request.
	DevicesReporting int32 `json:"devices_reporting"`
}

// NewRgmStatsIntervals instantiates a new RgmStatsIntervals object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRgmStatsIntervals(endAt int32, whDel int32, devicesReporting int32) *RgmStatsIntervals {
	this := RgmStatsIntervals{}
	this.EndAt = endAt
	this.WhDel = whDel
	this.DevicesReporting = devicesReporting
	return &this
}

// NewRgmStatsIntervalsWithDefaults instantiates a new RgmStatsIntervals object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRgmStatsIntervalsWithDefaults() *RgmStatsIntervals {
	this := RgmStatsIntervals{}
	return &this
}

// GetEndAt returns the EndAt field value
func (o *RgmStatsIntervals) GetEndAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EndAt
}

// GetEndAtOk returns a tuple with the EndAt field value
// and a boolean to check if the value has been set.
func (o *RgmStatsIntervals) GetEndAtOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EndAt, true
}

// SetEndAt sets field value
func (o *RgmStatsIntervals) SetEndAt(v int32) {
	o.EndAt = v
}

// GetWhDel returns the WhDel field value
func (o *RgmStatsIntervals) GetWhDel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.WhDel
}

// GetWhDelOk returns a tuple with the WhDel field value
// and a boolean to check if the value has been set.
func (o *RgmStatsIntervals) GetWhDelOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WhDel, true
}

// SetWhDel sets field value
func (o *RgmStatsIntervals) SetWhDel(v int32) {
	o.WhDel = v
}

// GetDevicesReporting returns the DevicesReporting field value
func (o *RgmStatsIntervals) GetDevicesReporting() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DevicesReporting
}

// GetDevicesReportingOk returns a tuple with the DevicesReporting field value
// and a boolean to check if the value has been set.
func (o *RgmStatsIntervals) GetDevicesReportingOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DevicesReporting, true
}

// SetDevicesReporting sets field value
func (o *RgmStatsIntervals) SetDevicesReporting(v int32) {
	o.DevicesReporting = v
}

func (o RgmStatsIntervals) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["end_at"] = o.EndAt
	}
	if true {
		toSerialize["wh_del"] = o.WhDel
	}
	if true {
		toSerialize["devices_reporting"] = o.DevicesReporting
	}
	return json.Marshal(toSerialize)
}

type NullableRgmStatsIntervals struct {
	value *RgmStatsIntervals
	isSet bool
}

func (v NullableRgmStatsIntervals) Get() *RgmStatsIntervals {
	return v.value
}

func (v *NullableRgmStatsIntervals) Set(val *RgmStatsIntervals) {
	v.value = val
	v.isSet = true
}

func (v NullableRgmStatsIntervals) IsSet() bool {
	return v.isSet
}

func (v *NullableRgmStatsIntervals) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRgmStatsIntervals(val *RgmStatsIntervals) *NullableRgmStatsIntervals {
	return &NullableRgmStatsIntervals{value: val, isSet: true}
}

func (v NullableRgmStatsIntervals) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRgmStatsIntervals) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


