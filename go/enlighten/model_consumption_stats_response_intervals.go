/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enlighten

import (
	"encoding/json"
)

// ConsumptionStatsResponseIntervals struct for ConsumptionStatsResponseIntervals
type ConsumptionStatsResponseIntervals struct {
	// End of interval. The format is Unix epoch time unless you pass a `datetime_format` parameter as described [here](https://developer.enphase.com/docs#Datetimes).
	EndAt int64 `json:"end_at"`
	// Energy consumed during this interval, in Watt-hours.
	Enwh int32 `json:"enwh"`
	// Number of consumption meters that reported data for this interval at the time of the request.
	DevicesReporting int32 `json:"devices_reporting"`
}

// NewConsumptionStatsResponseIntervals instantiates a new ConsumptionStatsResponseIntervals object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsumptionStatsResponseIntervals(endAt int64, enwh int32, devicesReporting int32) *ConsumptionStatsResponseIntervals {
	this := ConsumptionStatsResponseIntervals{}
	this.EndAt = endAt
	this.Enwh = enwh
	this.DevicesReporting = devicesReporting
	return &this
}

// NewConsumptionStatsResponseIntervalsWithDefaults instantiates a new ConsumptionStatsResponseIntervals object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsumptionStatsResponseIntervalsWithDefaults() *ConsumptionStatsResponseIntervals {
	this := ConsumptionStatsResponseIntervals{}
	return &this
}

// GetEndAt returns the EndAt field value
func (o *ConsumptionStatsResponseIntervals) GetEndAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EndAt
}

// GetEndAtOk returns a tuple with the EndAt field value
// and a boolean to check if the value has been set.
func (o *ConsumptionStatsResponseIntervals) GetEndAtOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EndAt, true
}

// SetEndAt sets field value
func (o *ConsumptionStatsResponseIntervals) SetEndAt(v int64) {
	o.EndAt = v
}

// GetEnwh returns the Enwh field value
func (o *ConsumptionStatsResponseIntervals) GetEnwh() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Enwh
}

// GetEnwhOk returns a tuple with the Enwh field value
// and a boolean to check if the value has been set.
func (o *ConsumptionStatsResponseIntervals) GetEnwhOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Enwh, true
}

// SetEnwh sets field value
func (o *ConsumptionStatsResponseIntervals) SetEnwh(v int32) {
	o.Enwh = v
}

// GetDevicesReporting returns the DevicesReporting field value
func (o *ConsumptionStatsResponseIntervals) GetDevicesReporting() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DevicesReporting
}

// GetDevicesReportingOk returns a tuple with the DevicesReporting field value
// and a boolean to check if the value has been set.
func (o *ConsumptionStatsResponseIntervals) GetDevicesReportingOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DevicesReporting, true
}

// SetDevicesReporting sets field value
func (o *ConsumptionStatsResponseIntervals) SetDevicesReporting(v int32) {
	o.DevicesReporting = v
}

func (o ConsumptionStatsResponseIntervals) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["end_at"] = o.EndAt
	}
	if true {
		toSerialize["enwh"] = o.Enwh
	}
	if true {
		toSerialize["devices_reporting"] = o.DevicesReporting
	}
	return json.Marshal(toSerialize)
}

type NullableConsumptionStatsResponseIntervals struct {
	value *ConsumptionStatsResponseIntervals
	isSet bool
}

func (v NullableConsumptionStatsResponseIntervals) Get() *ConsumptionStatsResponseIntervals {
	return v.value
}

func (v *NullableConsumptionStatsResponseIntervals) Set(val *ConsumptionStatsResponseIntervals) {
	v.value = val
	v.isSet = true
}

func (v NullableConsumptionStatsResponseIntervals) IsSet() bool {
	return v.isSet
}

func (v *NullableConsumptionStatsResponseIntervals) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsumptionStatsResponseIntervals(val *ConsumptionStatsResponseIntervals) *NullableConsumptionStatsResponseIntervals {
	return &NullableConsumptionStatsResponseIntervals{value: val, isSet: true}
}

func (v NullableConsumptionStatsResponseIntervals) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsumptionStatsResponseIntervals) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


