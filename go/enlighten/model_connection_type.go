/*
The Enlighten Systems API

The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enlighten

import (
	"encoding/json"
	"fmt"
)

// ConnectionType How the system is connected to the Internet.
type ConnectionType string

// List of ConnectionType
const (
	ETHERNET ConnectionType = "ethernet"
	CELLULAR ConnectionType = "cellular"
	WIFI ConnectionType = "wifi"
)

// All allowed values of ConnectionType enum
var AllowedConnectionTypeEnumValues = []ConnectionType{
	"ethernet",
	"cellular",
	"wifi",
}

func (v *ConnectionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectionType(value)
	for _, existing := range AllowedConnectionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectionType", value)
}

// NewConnectionTypeFromValue returns a pointer to a valid ConnectionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectionTypeFromValue(v string) (*ConnectionType, error) {
	ev := ConnectionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectionType: valid values are %v", v, AllowedConnectionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectionType) IsValid() bool {
	for _, existing := range AllowedConnectionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectionType value
func (v ConnectionType) Ptr() *ConnectionType {
	return &v
}

type NullableConnectionType struct {
	value *ConnectionType
	isSet bool
}

func (v NullableConnectionType) Get() *ConnectionType {
	return v.value
}

func (v *NullableConnectionType) Set(val *ConnectionType) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionType) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionType(val *ConnectionType) *NullableConnectionType {
	return &NullableConnectionType{value: val, isSet: true}
}

func (v NullableConnectionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

