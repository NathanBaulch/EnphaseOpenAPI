/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enlighten

import (
	"encoding/json"
)

// Inventory struct for Inventory
type Inventory struct {
	// Enlighten ID for this system.
	SystemId int32 `json:"system_id"`
	// A list of Envoys on this system, including serial number.
	Envoys *[]InventoryEnvoys `json:"envoys,omitempty"`
	// A list of inverters on this system, including serial and model numbers.
	Inverters []InventoryEnvoys `json:"inverters"`
	// A list of meters on this system, including serial number, manufacturer, and model number.
	Meters []InventoryMeters `json:"meters"`
	Meta Meta `json:"meta"`
}

// NewInventory instantiates a new Inventory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventory(systemId int32, inverters []InventoryEnvoys, meters []InventoryMeters, meta Meta) *Inventory {
	this := Inventory{}
	this.SystemId = systemId
	this.Inverters = inverters
	this.Meters = meters
	this.Meta = meta
	return &this
}

// NewInventoryWithDefaults instantiates a new Inventory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventoryWithDefaults() *Inventory {
	this := Inventory{}
	return &this
}

// GetSystemId returns the SystemId field value
func (o *Inventory) GetSystemId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SystemId
}

// GetSystemIdOk returns a tuple with the SystemId field value
// and a boolean to check if the value has been set.
func (o *Inventory) GetSystemIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SystemId, true
}

// SetSystemId sets field value
func (o *Inventory) SetSystemId(v int32) {
	o.SystemId = v
}

// GetEnvoys returns the Envoys field value if set, zero value otherwise.
func (o *Inventory) GetEnvoys() []InventoryEnvoys {
	if o == nil || o.Envoys == nil {
		var ret []InventoryEnvoys
		return ret
	}
	return *o.Envoys
}

// GetEnvoysOk returns a tuple with the Envoys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inventory) GetEnvoysOk() (*[]InventoryEnvoys, bool) {
	if o == nil || o.Envoys == nil {
		return nil, false
	}
	return o.Envoys, true
}

// HasEnvoys returns a boolean if a field has been set.
func (o *Inventory) HasEnvoys() bool {
	if o != nil && o.Envoys != nil {
		return true
	}

	return false
}

// SetEnvoys gets a reference to the given []InventoryEnvoys and assigns it to the Envoys field.
func (o *Inventory) SetEnvoys(v []InventoryEnvoys) {
	o.Envoys = &v
}

// GetInverters returns the Inverters field value
func (o *Inventory) GetInverters() []InventoryEnvoys {
	if o == nil {
		var ret []InventoryEnvoys
		return ret
	}

	return o.Inverters
}

// GetInvertersOk returns a tuple with the Inverters field value
// and a boolean to check if the value has been set.
func (o *Inventory) GetInvertersOk() (*[]InventoryEnvoys, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Inverters, true
}

// SetInverters sets field value
func (o *Inventory) SetInverters(v []InventoryEnvoys) {
	o.Inverters = v
}

// GetMeters returns the Meters field value
func (o *Inventory) GetMeters() []InventoryMeters {
	if o == nil {
		var ret []InventoryMeters
		return ret
	}

	return o.Meters
}

// GetMetersOk returns a tuple with the Meters field value
// and a boolean to check if the value has been set.
func (o *Inventory) GetMetersOk() (*[]InventoryMeters, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Meters, true
}

// SetMeters sets field value
func (o *Inventory) SetMeters(v []InventoryMeters) {
	o.Meters = v
}

// GetMeta returns the Meta field value
func (o *Inventory) GetMeta() Meta {
	if o == nil {
		var ret Meta
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *Inventory) GetMetaOk() (*Meta, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *Inventory) SetMeta(v Meta) {
	o.Meta = v
}

func (o Inventory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["system_id"] = o.SystemId
	}
	if o.Envoys != nil {
		toSerialize["envoys"] = o.Envoys
	}
	if true {
		toSerialize["inverters"] = o.Inverters
	}
	if true {
		toSerialize["meters"] = o.Meters
	}
	if true {
		toSerialize["meta"] = o.Meta
	}
	return json.Marshal(toSerialize)
}

type NullableInventory struct {
	value *Inventory
	isSet bool
}

func (v NullableInventory) Get() *Inventory {
	return v.value
}

func (v *NullableInventory) Set(val *Inventory) {
	v.value = val
	v.isSet = true
}

func (v NullableInventory) IsSet() bool {
	return v.isSet
}

func (v *NullableInventory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventory(val *Inventory) *NullableInventory {
	return &NullableInventory{value: val, isSet: true}
}

func (v NullableInventory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


