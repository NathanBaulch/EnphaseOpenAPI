/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enlighten

import (
	"encoding/json"
)

// ClientError struct for ClientError
type ClientError struct {
	Reason string `json:"reason"`
	ErrorMessages []string `json:"errorMessages"`
}

// NewClientError instantiates a new ClientError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientError(reason string, errorMessages []string) *ClientError {
	this := ClientError{}
	this.Reason = reason
	this.ErrorMessages = errorMessages
	return &this
}

// NewClientErrorWithDefaults instantiates a new ClientError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientErrorWithDefaults() *ClientError {
	this := ClientError{}
	return &this
}

// GetReason returns the Reason field value
func (o *ClientError) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *ClientError) GetReasonOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *ClientError) SetReason(v string) {
	o.Reason = v
}

// GetErrorMessages returns the ErrorMessages field value
func (o *ClientError) GetErrorMessages() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ErrorMessages
}

// GetErrorMessagesOk returns a tuple with the ErrorMessages field value
// and a boolean to check if the value has been set.
func (o *ClientError) GetErrorMessagesOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ErrorMessages, true
}

// SetErrorMessages sets field value
func (o *ClientError) SetErrorMessages(v []string) {
	o.ErrorMessages = v
}

func (o ClientError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["reason"] = o.Reason
	}
	if true {
		toSerialize["errorMessages"] = o.ErrorMessages
	}
	return json.Marshal(toSerialize)
}

type NullableClientError struct {
	value *ClientError
	isSet bool
}

func (v NullableClientError) Get() *ClientError {
	return v.value
}

func (v *NullableClientError) Set(val *ClientError) {
	v.value = val
	v.isSet = true
}

func (v NullableClientError) IsSet() bool {
	return v.isSet
}

func (v *NullableClientError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientError(val *ClientError) *NullableClientError {
	return &NullableClientError{value: val, isSet: true}
}

func (v NullableClientError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


