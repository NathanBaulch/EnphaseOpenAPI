/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enlighten

import (
	"encoding/json"
)

// InlineResponse2008 struct for InlineResponse2008
type InlineResponse2008 struct {
	// Enlighten ID for this system.
	SystemId int32 `json:"system_id"`
	// Number of active microinverters for this system.
	TotalDevices int32 `json:"total_devices"`
	Meta Meta `json:"meta"`
	// A list of intervals between the requested start and end times.
	Intervals []InlineResponse2008Intervals `json:"intervals"`
}

// NewInlineResponse2008 instantiates a new InlineResponse2008 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2008(systemId int32, totalDevices int32, meta Meta, intervals []InlineResponse2008Intervals) *InlineResponse2008 {
	this := InlineResponse2008{}
	this.SystemId = systemId
	this.TotalDevices = totalDevices
	this.Meta = meta
	this.Intervals = intervals
	return &this
}

// NewInlineResponse2008WithDefaults instantiates a new InlineResponse2008 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2008WithDefaults() *InlineResponse2008 {
	this := InlineResponse2008{}
	return &this
}

// GetSystemId returns the SystemId field value
func (o *InlineResponse2008) GetSystemId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SystemId
}

// GetSystemIdOk returns a tuple with the SystemId field value
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetSystemIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SystemId, true
}

// SetSystemId sets field value
func (o *InlineResponse2008) SetSystemId(v int32) {
	o.SystemId = v
}

// GetTotalDevices returns the TotalDevices field value
func (o *InlineResponse2008) GetTotalDevices() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalDevices
}

// GetTotalDevicesOk returns a tuple with the TotalDevices field value
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetTotalDevicesOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TotalDevices, true
}

// SetTotalDevices sets field value
func (o *InlineResponse2008) SetTotalDevices(v int32) {
	o.TotalDevices = v
}

// GetMeta returns the Meta field value
func (o *InlineResponse2008) GetMeta() Meta {
	if o == nil {
		var ret Meta
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetMetaOk() (*Meta, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *InlineResponse2008) SetMeta(v Meta) {
	o.Meta = v
}

// GetIntervals returns the Intervals field value
func (o *InlineResponse2008) GetIntervals() []InlineResponse2008Intervals {
	if o == nil {
		var ret []InlineResponse2008Intervals
		return ret
	}

	return o.Intervals
}

// GetIntervalsOk returns a tuple with the Intervals field value
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetIntervalsOk() (*[]InlineResponse2008Intervals, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Intervals, true
}

// SetIntervals sets field value
func (o *InlineResponse2008) SetIntervals(v []InlineResponse2008Intervals) {
	o.Intervals = v
}

func (o InlineResponse2008) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["system_id"] = o.SystemId
	}
	if true {
		toSerialize["total_devices"] = o.TotalDevices
	}
	if true {
		toSerialize["meta"] = o.Meta
	}
	if true {
		toSerialize["intervals"] = o.Intervals
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2008 struct {
	value *InlineResponse2008
	isSet bool
}

func (v NullableInlineResponse2008) Get() *InlineResponse2008 {
	return v.value
}

func (v *NullableInlineResponse2008) Set(val *InlineResponse2008) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2008) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2008) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2008(val *InlineResponse2008) *NullableInlineResponse2008 {
	return &NullableInlineResponse2008{value: val, isSet: true}
}

func (v NullableInlineResponse2008) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2008) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


