/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enlighten

import (
	"encoding/json"
)

// UnprocessableEntityError struct for UnprocessableEntityError
type UnprocessableEntityError struct {
	Reason string `json:"reason"`
	Message string `json:"message"`
	ErrorMessages []string `json:"errorMessages"`
}

// NewUnprocessableEntityError instantiates a new UnprocessableEntityError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnprocessableEntityError(reason string, message string, errorMessages []string) *UnprocessableEntityError {
	this := UnprocessableEntityError{}
	this.Reason = reason
	this.Message = message
	this.ErrorMessages = errorMessages
	return &this
}

// NewUnprocessableEntityErrorWithDefaults instantiates a new UnprocessableEntityError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnprocessableEntityErrorWithDefaults() *UnprocessableEntityError {
	this := UnprocessableEntityError{}
	return &this
}

// GetReason returns the Reason field value
func (o *UnprocessableEntityError) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *UnprocessableEntityError) GetReasonOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *UnprocessableEntityError) SetReason(v string) {
	o.Reason = v
}

// GetMessage returns the Message field value
func (o *UnprocessableEntityError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *UnprocessableEntityError) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *UnprocessableEntityError) SetMessage(v string) {
	o.Message = v
}

// GetErrorMessages returns the ErrorMessages field value
func (o *UnprocessableEntityError) GetErrorMessages() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ErrorMessages
}

// GetErrorMessagesOk returns a tuple with the ErrorMessages field value
// and a boolean to check if the value has been set.
func (o *UnprocessableEntityError) GetErrorMessagesOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ErrorMessages, true
}

// SetErrorMessages sets field value
func (o *UnprocessableEntityError) SetErrorMessages(v []string) {
	o.ErrorMessages = v
}

func (o UnprocessableEntityError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["reason"] = o.Reason
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["errorMessages"] = o.ErrorMessages
	}
	return json.Marshal(toSerialize)
}

type NullableUnprocessableEntityError struct {
	value *UnprocessableEntityError
	isSet bool
}

func (v NullableUnprocessableEntityError) Get() *UnprocessableEntityError {
	return v.value
}

func (v *NullableUnprocessableEntityError) Set(val *UnprocessableEntityError) {
	v.value = val
	v.isSet = true
}

func (v NullableUnprocessableEntityError) IsSet() bool {
	return v.isSet
}

func (v *NullableUnprocessableEntityError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnprocessableEntityError(val *UnprocessableEntityError) *NullableUnprocessableEntityError {
	return &NullableUnprocessableEntityError{value: val, isSet: true}
}

func (v NullableUnprocessableEntityError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnprocessableEntityError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


