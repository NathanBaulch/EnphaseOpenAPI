/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enlighten

import (
	"encoding/json"
)

// SearchSystemIdResponse struct for SearchSystemIdResponse
type SearchSystemIdResponse struct {
	// The Enlighten ID of the system.
	SystemId int32 `json:"system_id"`
}

// NewSearchSystemIdResponse instantiates a new SearchSystemIdResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchSystemIdResponse(systemId int32) *SearchSystemIdResponse {
	this := SearchSystemIdResponse{}
	this.SystemId = systemId
	return &this
}

// NewSearchSystemIdResponseWithDefaults instantiates a new SearchSystemIdResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchSystemIdResponseWithDefaults() *SearchSystemIdResponse {
	this := SearchSystemIdResponse{}
	return &this
}

// GetSystemId returns the SystemId field value
func (o *SearchSystemIdResponse) GetSystemId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SystemId
}

// GetSystemIdOk returns a tuple with the SystemId field value
// and a boolean to check if the value has been set.
func (o *SearchSystemIdResponse) GetSystemIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SystemId, true
}

// SetSystemId sets field value
func (o *SearchSystemIdResponse) SetSystemId(v int32) {
	o.SystemId = v
}

func (o SearchSystemIdResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["system_id"] = o.SystemId
	}
	return json.Marshal(toSerialize)
}

type NullableSearchSystemIdResponse struct {
	value *SearchSystemIdResponse
	isSet bool
}

func (v NullableSearchSystemIdResponse) Get() *SearchSystemIdResponse {
	return v.value
}

func (v *NullableSearchSystemIdResponse) Set(val *SearchSystemIdResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchSystemIdResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchSystemIdResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchSystemIdResponse(val *SearchSystemIdResponse) *NullableSearchSystemIdResponse {
	return &NullableSearchSystemIdResponse{value: val, isSet: true}
}

func (v NullableSearchSystemIdResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchSystemIdResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


