/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package enlighten

import (
	"encoding/json"
)

// RgmStatsMeterIntervals struct for RgmStatsMeterIntervals
type RgmStatsMeterIntervals struct {
	// Serial number of the revenue grade meter.
	MeterSerialNumber string `json:"meter_serial_number"`
	// Serial number of the reporting envoy.
	EnvoySerialNumber string `json:"envoy_serial_number"`
	// Individual meter level interval.
	Intervals []RgmStatsIntervals1 `json:"intervals"`
}

// NewRgmStatsMeterIntervals instantiates a new RgmStatsMeterIntervals object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRgmStatsMeterIntervals(meterSerialNumber string, envoySerialNumber string, intervals []RgmStatsIntervals1) *RgmStatsMeterIntervals {
	this := RgmStatsMeterIntervals{}
	this.MeterSerialNumber = meterSerialNumber
	this.EnvoySerialNumber = envoySerialNumber
	this.Intervals = intervals
	return &this
}

// NewRgmStatsMeterIntervalsWithDefaults instantiates a new RgmStatsMeterIntervals object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRgmStatsMeterIntervalsWithDefaults() *RgmStatsMeterIntervals {
	this := RgmStatsMeterIntervals{}
	return &this
}

// GetMeterSerialNumber returns the MeterSerialNumber field value
func (o *RgmStatsMeterIntervals) GetMeterSerialNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MeterSerialNumber
}

// GetMeterSerialNumberOk returns a tuple with the MeterSerialNumber field value
// and a boolean to check if the value has been set.
func (o *RgmStatsMeterIntervals) GetMeterSerialNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MeterSerialNumber, true
}

// SetMeterSerialNumber sets field value
func (o *RgmStatsMeterIntervals) SetMeterSerialNumber(v string) {
	o.MeterSerialNumber = v
}

// GetEnvoySerialNumber returns the EnvoySerialNumber field value
func (o *RgmStatsMeterIntervals) GetEnvoySerialNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvoySerialNumber
}

// GetEnvoySerialNumberOk returns a tuple with the EnvoySerialNumber field value
// and a boolean to check if the value has been set.
func (o *RgmStatsMeterIntervals) GetEnvoySerialNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EnvoySerialNumber, true
}

// SetEnvoySerialNumber sets field value
func (o *RgmStatsMeterIntervals) SetEnvoySerialNumber(v string) {
	o.EnvoySerialNumber = v
}

// GetIntervals returns the Intervals field value
func (o *RgmStatsMeterIntervals) GetIntervals() []RgmStatsIntervals1 {
	if o == nil {
		var ret []RgmStatsIntervals1
		return ret
	}

	return o.Intervals
}

// GetIntervalsOk returns a tuple with the Intervals field value
// and a boolean to check if the value has been set.
func (o *RgmStatsMeterIntervals) GetIntervalsOk() (*[]RgmStatsIntervals1, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Intervals, true
}

// SetIntervals sets field value
func (o *RgmStatsMeterIntervals) SetIntervals(v []RgmStatsIntervals1) {
	o.Intervals = v
}

func (o RgmStatsMeterIntervals) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["meter_serial_number"] = o.MeterSerialNumber
	}
	if true {
		toSerialize["envoy_serial_number"] = o.EnvoySerialNumber
	}
	if true {
		toSerialize["intervals"] = o.Intervals
	}
	return json.Marshal(toSerialize)
}

type NullableRgmStatsMeterIntervals struct {
	value *RgmStatsMeterIntervals
	isSet bool
}

func (v NullableRgmStatsMeterIntervals) Get() *RgmStatsMeterIntervals {
	return v.value
}

func (v *NullableRgmStatsMeterIntervals) Set(val *RgmStatsMeterIntervals) {
	v.value = val
	v.isSet = true
}

func (v NullableRgmStatsMeterIntervals) IsSet() bool {
	return v.isSet
}

func (v *NullableRgmStatsMeterIntervals) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRgmStatsMeterIntervals(val *RgmStatsMeterIntervals) *NullableRgmStatsMeterIntervals {
	return &NullableRgmStatsMeterIntervals{value: val, isSet: true}
}

func (v NullableRgmStatsMeterIntervals) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRgmStatsMeterIntervals) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


