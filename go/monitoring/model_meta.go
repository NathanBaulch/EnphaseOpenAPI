/*
The Enphase Monitoring API

Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monitoring

import (
	"encoding/json"
)

// checks if the Meta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Meta{}

// Meta Information about the system such as its status, when it became operational and last reported to Envoy.
type Meta struct {
	Status *SystemStatusEnum `json:"status,omitempty"`
	// Timestamp (in epoch format) at which the system's Envoy last submitted a report.
	LastReportAt *int32 `json:"last_report_at,omitempty"`
	// Timestamp (in epoch format) at which the system's produced energy was last reported. Even if the last produced energy is 0, its timestamp will be returned.
	LastEnergyAt *int32 `json:"last_energy_at,omitempty"`
	// Timestamp (in epoch format) at which this system became operational. Corresponds to the system's interconnect time, if one is specified. Otherwise, it is the system's first reported interval end time.
	OperationalAt *int32 `json:"operational_at,omitempty"`
}

// NewMeta instantiates a new Meta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeta() *Meta {
	this := Meta{}
	return &this
}

// NewMetaWithDefaults instantiates a new Meta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaWithDefaults() *Meta {
	this := Meta{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Meta) GetStatus() SystemStatusEnum {
	if o == nil || IsNil(o.Status) {
		var ret SystemStatusEnum
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Meta) GetStatusOk() (*SystemStatusEnum, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Meta) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given SystemStatusEnum and assigns it to the Status field.
func (o *Meta) SetStatus(v SystemStatusEnum) {
	o.Status = &v
}

// GetLastReportAt returns the LastReportAt field value if set, zero value otherwise.
func (o *Meta) GetLastReportAt() int32 {
	if o == nil || IsNil(o.LastReportAt) {
		var ret int32
		return ret
	}
	return *o.LastReportAt
}

// GetLastReportAtOk returns a tuple with the LastReportAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Meta) GetLastReportAtOk() (*int32, bool) {
	if o == nil || IsNil(o.LastReportAt) {
		return nil, false
	}
	return o.LastReportAt, true
}

// HasLastReportAt returns a boolean if a field has been set.
func (o *Meta) HasLastReportAt() bool {
	if o != nil && !IsNil(o.LastReportAt) {
		return true
	}

	return false
}

// SetLastReportAt gets a reference to the given int32 and assigns it to the LastReportAt field.
func (o *Meta) SetLastReportAt(v int32) {
	o.LastReportAt = &v
}

// GetLastEnergyAt returns the LastEnergyAt field value if set, zero value otherwise.
func (o *Meta) GetLastEnergyAt() int32 {
	if o == nil || IsNil(o.LastEnergyAt) {
		var ret int32
		return ret
	}
	return *o.LastEnergyAt
}

// GetLastEnergyAtOk returns a tuple with the LastEnergyAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Meta) GetLastEnergyAtOk() (*int32, bool) {
	if o == nil || IsNil(o.LastEnergyAt) {
		return nil, false
	}
	return o.LastEnergyAt, true
}

// HasLastEnergyAt returns a boolean if a field has been set.
func (o *Meta) HasLastEnergyAt() bool {
	if o != nil && !IsNil(o.LastEnergyAt) {
		return true
	}

	return false
}

// SetLastEnergyAt gets a reference to the given int32 and assigns it to the LastEnergyAt field.
func (o *Meta) SetLastEnergyAt(v int32) {
	o.LastEnergyAt = &v
}

// GetOperationalAt returns the OperationalAt field value if set, zero value otherwise.
func (o *Meta) GetOperationalAt() int32 {
	if o == nil || IsNil(o.OperationalAt) {
		var ret int32
		return ret
	}
	return *o.OperationalAt
}

// GetOperationalAtOk returns a tuple with the OperationalAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Meta) GetOperationalAtOk() (*int32, bool) {
	if o == nil || IsNil(o.OperationalAt) {
		return nil, false
	}
	return o.OperationalAt, true
}

// HasOperationalAt returns a boolean if a field has been set.
func (o *Meta) HasOperationalAt() bool {
	if o != nil && !IsNil(o.OperationalAt) {
		return true
	}

	return false
}

// SetOperationalAt gets a reference to the given int32 and assigns it to the OperationalAt field.
func (o *Meta) SetOperationalAt(v int32) {
	o.OperationalAt = &v
}

func (o Meta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Meta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.LastReportAt) {
		toSerialize["last_report_at"] = o.LastReportAt
	}
	if !IsNil(o.LastEnergyAt) {
		toSerialize["last_energy_at"] = o.LastEnergyAt
	}
	if !IsNil(o.OperationalAt) {
		toSerialize["operational_at"] = o.OperationalAt
	}
	return toSerialize, nil
}

type NullableMeta struct {
	value *Meta
	isSet bool
}

func (v NullableMeta) Get() *Meta {
	return v.value
}

func (v *NullableMeta) Set(val *Meta) {
	v.value = val
	v.isSet = true
}

func (v NullableMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeta(val *Meta) *NullableMeta {
	return &NullableMeta{value: val, isSet: true}
}

func (v NullableMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


