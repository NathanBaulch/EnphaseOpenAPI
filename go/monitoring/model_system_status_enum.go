/*
The Enphase Monitoring API

Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monitoring

import (
	"encoding/json"
	"fmt"
)

// SystemStatusEnum the model 'SystemStatusEnum'
type SystemStatusEnum string

// List of SystemStatusEnum
const (
	SYSTEMSTATUSENUM_DEACTIVATED SystemStatusEnum = "deactivated"
	SYSTEMSTATUSENUM_NORMAL SystemStatusEnum = "normal"
	SYSTEMSTATUSENUM_COMM SystemStatusEnum = "comm"
	SYSTEMSTATUSENUM_MICRO SystemStatusEnum = "micro"
	SYSTEMSTATUSENUM_POWER SystemStatusEnum = "power"
	SYSTEMSTATUSENUM_METER SystemStatusEnum = "meter"
	SYSTEMSTATUSENUM_METER_ISSUE SystemStatusEnum = "meter_issue"
	SYSTEMSTATUSENUM_BATTERY SystemStatusEnum = "battery"
	SYSTEMSTATUSENUM_STORAGE_IDLE SystemStatusEnum = "storage_idle"
	SYSTEMSTATUSENUM_ENCHARGE SystemStatusEnum = "encharge"
	SYSTEMSTATUSENUM_ENCHARGE_ISSUE SystemStatusEnum = "encharge_issue"
	SYSTEMSTATUSENUM_ENPOWER SystemStatusEnum = "enpower"
	SYSTEMSTATUSENUM_ENPOWER_ISSUE SystemStatusEnum = "enpower_issue"
	SYSTEMSTATUSENUM_RETIRED SystemStatusEnum = "retired"
	SYSTEMSTATUSENUM_NOT_MONITORED SystemStatusEnum = "not_monitored"
	SYSTEMSTATUSENUM_UNUSED SystemStatusEnum = "unused"
	SYSTEMSTATUSENUM_DISABLED SystemStatusEnum = "disabled"
	SYSTEMSTATUSENUM_DEBUG SystemStatusEnum = "debug"
	SYSTEMSTATUSENUM_INFO SystemStatusEnum = "info"
	SYSTEMSTATUSENUM_MONITORED SystemStatusEnum = "monitored"
	SYSTEMSTATUSENUM_MUTED SystemStatusEnum = "muted"
	SYSTEMSTATUSENUM_WARNING SystemStatusEnum = "warning"
	SYSTEMSTATUSENUM_ERROR SystemStatusEnum = "error"
	SYSTEMSTATUSENUM_NO_DATA SystemStatusEnum = "no_data"
	SYSTEMSTATUSENUM_RMA SystemStatusEnum = "rma"
	SYSTEMSTATUSENUM_UNKNOWN SystemStatusEnum = "unknown"
	SYSTEMSTATUSENUM_NSR SystemStatusEnum = "nsr"
	SYSTEMSTATUSENUM_ANY SystemStatusEnum = "any"
	SYSTEMSTATUSENUM_DATA_UPLOAD SystemStatusEnum = "data_upload"
	SYSTEMSTATUSENUM_ON_GRID SystemStatusEnum = "on_grid"
	SYSTEMSTATUSENUM_OFF_GRID SystemStatusEnum = "off_grid"
	SYSTEMSTATUSENUM_GRID_UNKNOWN SystemStatusEnum = "grid_unknown"
)

// All allowed values of SystemStatusEnum enum
var AllowedSystemStatusEnumEnumValues = []SystemStatusEnum{
	"deactivated",
	"normal",
	"comm",
	"micro",
	"power",
	"meter",
	"meter_issue",
	"battery",
	"storage_idle",
	"encharge",
	"encharge_issue",
	"enpower",
	"enpower_issue",
	"retired",
	"not_monitored",
	"unused",
	"disabled",
	"debug",
	"info",
	"monitored",
	"muted",
	"warning",
	"error",
	"no_data",
	"rma",
	"unknown",
	"nsr",
	"any",
	"data_upload",
	"on_grid",
	"off_grid",
	"grid_unknown",
}

func (v *SystemStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SystemStatusEnum(value)
	for _, existing := range AllowedSystemStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SystemStatusEnum", value)
}

// NewSystemStatusEnumFromValue returns a pointer to a valid SystemStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSystemStatusEnumFromValue(v string) (*SystemStatusEnum, error) {
	ev := SystemStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SystemStatusEnum: valid values are %v", v, AllowedSystemStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SystemStatusEnum) IsValid() bool {
	for _, existing := range AllowedSystemStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SystemStatusEnum value
func (v SystemStatusEnum) Ptr() *SystemStatusEnum {
	return &v
}

type NullableSystemStatusEnum struct {
	value *SystemStatusEnum
	isSet bool
}

func (v NullableSystemStatusEnum) Get() *SystemStatusEnum {
	return v.value
}

func (v *NullableSystemStatusEnum) Set(val *SystemStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemStatusEnum(val *SystemStatusEnum) *NullableSystemStatusEnum {
	return &NullableSystemStatusEnum{value: val, isSet: true}
}

func (v NullableSystemStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

