/*
The Enphase Monitoring API

Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monitoring

import (
	"encoding/json"
	"fmt"
)

// SystemPublicNameEnum Name displayed on the public system page. Default=residential. Only for systems that allow public access.
type SystemPublicNameEnum string

// List of SystemPublicNameEnum
const (
	SYSTEMPUBLICNAMEENUM_RESIDENTIAL SystemPublicNameEnum = "residential"
	SYSTEMPUBLICNAMEENUM_ALL SystemPublicNameEnum = "all"
	SYSTEMPUBLICNAMEENUM_COMMERCIAL SystemPublicNameEnum = "commercial"
	SYSTEMPUBLICNAMEENUM_OTHER SystemPublicNameEnum = "other"
)

// All allowed values of SystemPublicNameEnum enum
var AllowedSystemPublicNameEnumEnumValues = []SystemPublicNameEnum{
	"residential",
	"all",
	"commercial",
	"other",
}

func (v *SystemPublicNameEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SystemPublicNameEnum(value)
	for _, existing := range AllowedSystemPublicNameEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SystemPublicNameEnum", value)
}

// NewSystemPublicNameEnumFromValue returns a pointer to a valid SystemPublicNameEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSystemPublicNameEnumFromValue(v string) (*SystemPublicNameEnum, error) {
	ev := SystemPublicNameEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SystemPublicNameEnum: valid values are %v", v, AllowedSystemPublicNameEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SystemPublicNameEnum) IsValid() bool {
	for _, existing := range AllowedSystemPublicNameEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SystemPublicNameEnum value
func (v SystemPublicNameEnum) Ptr() *SystemPublicNameEnum {
	return &v
}

type NullableSystemPublicNameEnum struct {
	value *SystemPublicNameEnum
	isSet bool
}

func (v NullableSystemPublicNameEnum) Get() *SystemPublicNameEnum {
	return v.value
}

func (v *NullableSystemPublicNameEnum) Set(val *SystemPublicNameEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemPublicNameEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemPublicNameEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemPublicNameEnum(val *SystemPublicNameEnum) *NullableSystemPublicNameEnum {
	return &NullableSystemPublicNameEnum{value: val, isSet: true}
}

func (v NullableSystemPublicNameEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemPublicNameEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

