/*
The Enphase Monitoring API

Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monitoring

import (
	"encoding/json"
	"fmt"
)

// GetSystems500Response - struct for GetSystems500Response
type GetSystems500Response struct {
	DataTemporarilyUnavailableError *DataTemporarilyUnavailableError
	InternalServerError *InternalServerError
}

// DataTemporarilyUnavailableErrorAsGetSystems500Response is a convenience function that returns DataTemporarilyUnavailableError wrapped in GetSystems500Response
func DataTemporarilyUnavailableErrorAsGetSystems500Response(v *DataTemporarilyUnavailableError) GetSystems500Response {
	return GetSystems500Response{
		DataTemporarilyUnavailableError: v,
	}
}

// InternalServerErrorAsGetSystems500Response is a convenience function that returns InternalServerError wrapped in GetSystems500Response
func InternalServerErrorAsGetSystems500Response(v *InternalServerError) GetSystems500Response {
	return GetSystems500Response{
		InternalServerError: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetSystems500Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DataTemporarilyUnavailableError
	err = newStrictDecoder(data).Decode(&dst.DataTemporarilyUnavailableError)
	if err == nil {
		jsonDataTemporarilyUnavailableError, _ := json.Marshal(dst.DataTemporarilyUnavailableError)
		if string(jsonDataTemporarilyUnavailableError) == "{}" { // empty struct
			dst.DataTemporarilyUnavailableError = nil
		} else {
			match++
		}
	} else {
		dst.DataTemporarilyUnavailableError = nil
	}

	// try to unmarshal data into InternalServerError
	err = newStrictDecoder(data).Decode(&dst.InternalServerError)
	if err == nil {
		jsonInternalServerError, _ := json.Marshal(dst.InternalServerError)
		if string(jsonInternalServerError) == "{}" { // empty struct
			dst.InternalServerError = nil
		} else {
			match++
		}
	} else {
		dst.InternalServerError = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DataTemporarilyUnavailableError = nil
		dst.InternalServerError = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetSystems500Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetSystems500Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetSystems500Response) MarshalJSON() ([]byte, error) {
	if src.DataTemporarilyUnavailableError != nil {
		return json.Marshal(&src.DataTemporarilyUnavailableError)
	}

	if src.InternalServerError != nil {
		return json.Marshal(&src.InternalServerError)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetSystems500Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DataTemporarilyUnavailableError != nil {
		return obj.DataTemporarilyUnavailableError
	}

	if obj.InternalServerError != nil {
		return obj.InternalServerError
	}

	// all schemas are nil
	return nil
}

type NullableGetSystems500Response struct {
	value *GetSystems500Response
	isSet bool
}

func (v NullableGetSystems500Response) Get() *GetSystems500Response {
	return v.value
}

func (v *NullableGetSystems500Response) Set(val *GetSystems500Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSystems500Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSystems500Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSystems500Response(val *GetSystems500Response) *NullableGetSystems500Response {
	return &NullableGetSystems500Response{value: val, isSet: true}
}

func (v NullableGetSystems500Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSystems500Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


