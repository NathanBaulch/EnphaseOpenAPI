/*
The Enphase Monitoring API

Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monitoring

import (
	"encoding/json"
)

// checks if the SearchSystemsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchSystemsRequest{}

// SearchSystemsRequest struct for SearchSystemsRequest
type SearchSystemsRequest struct {
	System SearchSystemsRequestSystem `json:"system"`
	SortBy *SystemSortByEnum `json:"sort_by,omitempty"`
}

// NewSearchSystemsRequest instantiates a new SearchSystemsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchSystemsRequest(system SearchSystemsRequestSystem) *SearchSystemsRequest {
	this := SearchSystemsRequest{}
	this.System = system
	return &this
}

// NewSearchSystemsRequestWithDefaults instantiates a new SearchSystemsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchSystemsRequestWithDefaults() *SearchSystemsRequest {
	this := SearchSystemsRequest{}
	return &this
}

// GetSystem returns the System field value
func (o *SearchSystemsRequest) GetSystem() SearchSystemsRequestSystem {
	if o == nil {
		var ret SearchSystemsRequestSystem
		return ret
	}

	return o.System
}

// GetSystemOk returns a tuple with the System field value
// and a boolean to check if the value has been set.
func (o *SearchSystemsRequest) GetSystemOk() (*SearchSystemsRequestSystem, bool) {
	if o == nil {
		return nil, false
	}
	return &o.System, true
}

// SetSystem sets field value
func (o *SearchSystemsRequest) SetSystem(v SearchSystemsRequestSystem) {
	o.System = v
}

// GetSortBy returns the SortBy field value if set, zero value otherwise.
func (o *SearchSystemsRequest) GetSortBy() SystemSortByEnum {
	if o == nil || IsNil(o.SortBy) {
		var ret SystemSortByEnum
		return ret
	}
	return *o.SortBy
}

// GetSortByOk returns a tuple with the SortBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchSystemsRequest) GetSortByOk() (*SystemSortByEnum, bool) {
	if o == nil || IsNil(o.SortBy) {
		return nil, false
	}
	return o.SortBy, true
}

// HasSortBy returns a boolean if a field has been set.
func (o *SearchSystemsRequest) HasSortBy() bool {
	if o != nil && !IsNil(o.SortBy) {
		return true
	}

	return false
}

// SetSortBy gets a reference to the given SystemSortByEnum and assigns it to the SortBy field.
func (o *SearchSystemsRequest) SetSortBy(v SystemSortByEnum) {
	o.SortBy = &v
}

func (o SearchSystemsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchSystemsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["system"] = o.System
	if !IsNil(o.SortBy) {
		toSerialize["sort_by"] = o.SortBy
	}
	return toSerialize, nil
}

type NullableSearchSystemsRequest struct {
	value *SearchSystemsRequest
	isSet bool
}

func (v NullableSearchSystemsRequest) Get() *SearchSystemsRequest {
	return v.value
}

func (v *NullableSearchSystemsRequest) Set(val *SearchSystemsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchSystemsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchSystemsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchSystemsRequest(val *SearchSystemsRequest) *NullableSearchSystemsRequest {
	return &NullableSearchSystemsRequest{value: val, isSet: true}
}

func (v NullableSearchSystemsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchSystemsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


