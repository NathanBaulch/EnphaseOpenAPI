/*
The Enphase Monitoring API

Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monitoring

import (
	"encoding/json"
)

// checks if the GetSystemConsumptionLifetimeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetSystemConsumptionLifetimeResponse{}

// GetSystemConsumptionLifetimeResponse struct for GetSystemConsumptionLifetimeResponse
type GetSystemConsumptionLifetimeResponse struct {
	// Unique numeric ID of the system.
	SystemId *int32 `json:"system_id,omitempty"`
	// When no start_date parameter is specified on the request, defaults to the operational_date of the system. May be null if system has never produced. When a start_date parameter is included in the request, the same is included in the response.
	StartDate *string `json:"start_date,omitempty"`
	// An array of consumption measurements in Wh, one for each day since consumption metering began, or one for each day of the requested period.
	Consumption []int32 `json:"consumption,omitempty"`
	Meta *Meta `json:"meta,omitempty"`
}

// NewGetSystemConsumptionLifetimeResponse instantiates a new GetSystemConsumptionLifetimeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetSystemConsumptionLifetimeResponse() *GetSystemConsumptionLifetimeResponse {
	this := GetSystemConsumptionLifetimeResponse{}
	return &this
}

// NewGetSystemConsumptionLifetimeResponseWithDefaults instantiates a new GetSystemConsumptionLifetimeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetSystemConsumptionLifetimeResponseWithDefaults() *GetSystemConsumptionLifetimeResponse {
	this := GetSystemConsumptionLifetimeResponse{}
	return &this
}

// GetSystemId returns the SystemId field value if set, zero value otherwise.
func (o *GetSystemConsumptionLifetimeResponse) GetSystemId() int32 {
	if o == nil || IsNil(o.SystemId) {
		var ret int32
		return ret
	}
	return *o.SystemId
}

// GetSystemIdOk returns a tuple with the SystemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSystemConsumptionLifetimeResponse) GetSystemIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SystemId) {
		return nil, false
	}
	return o.SystemId, true
}

// HasSystemId returns a boolean if a field has been set.
func (o *GetSystemConsumptionLifetimeResponse) HasSystemId() bool {
	if o != nil && !IsNil(o.SystemId) {
		return true
	}

	return false
}

// SetSystemId gets a reference to the given int32 and assigns it to the SystemId field.
func (o *GetSystemConsumptionLifetimeResponse) SetSystemId(v int32) {
	o.SystemId = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *GetSystemConsumptionLifetimeResponse) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSystemConsumptionLifetimeResponse) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *GetSystemConsumptionLifetimeResponse) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *GetSystemConsumptionLifetimeResponse) SetStartDate(v string) {
	o.StartDate = &v
}

// GetConsumption returns the Consumption field value if set, zero value otherwise.
func (o *GetSystemConsumptionLifetimeResponse) GetConsumption() []int32 {
	if o == nil || IsNil(o.Consumption) {
		var ret []int32
		return ret
	}
	return o.Consumption
}

// GetConsumptionOk returns a tuple with the Consumption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSystemConsumptionLifetimeResponse) GetConsumptionOk() ([]int32, bool) {
	if o == nil || IsNil(o.Consumption) {
		return nil, false
	}
	return o.Consumption, true
}

// HasConsumption returns a boolean if a field has been set.
func (o *GetSystemConsumptionLifetimeResponse) HasConsumption() bool {
	if o != nil && !IsNil(o.Consumption) {
		return true
	}

	return false
}

// SetConsumption gets a reference to the given []int32 and assigns it to the Consumption field.
func (o *GetSystemConsumptionLifetimeResponse) SetConsumption(v []int32) {
	o.Consumption = v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *GetSystemConsumptionLifetimeResponse) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSystemConsumptionLifetimeResponse) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *GetSystemConsumptionLifetimeResponse) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *GetSystemConsumptionLifetimeResponse) SetMeta(v Meta) {
	o.Meta = &v
}

func (o GetSystemConsumptionLifetimeResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetSystemConsumptionLifetimeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SystemId) {
		toSerialize["system_id"] = o.SystemId
	}
	if !IsNil(o.StartDate) {
		toSerialize["start_date"] = o.StartDate
	}
	if !IsNil(o.Consumption) {
		toSerialize["consumption"] = o.Consumption
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	return toSerialize, nil
}

type NullableGetSystemConsumptionLifetimeResponse struct {
	value *GetSystemConsumptionLifetimeResponse
	isSet bool
}

func (v NullableGetSystemConsumptionLifetimeResponse) Get() *GetSystemConsumptionLifetimeResponse {
	return v.value
}

func (v *NullableGetSystemConsumptionLifetimeResponse) Set(val *GetSystemConsumptionLifetimeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSystemConsumptionLifetimeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSystemConsumptionLifetimeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSystemConsumptionLifetimeResponse(val *GetSystemConsumptionLifetimeResponse) *NullableGetSystemConsumptionLifetimeResponse {
	return &NullableGetSystemConsumptionLifetimeResponse{value: val, isSet: true}
}

func (v NullableGetSystemConsumptionLifetimeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSystemConsumptionLifetimeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


