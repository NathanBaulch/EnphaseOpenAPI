/*
The Enphase Monitoring API

Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monitoring

import (
	"encoding/json"
)

// checks if the LoadControlSettingsLoadControlDataInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoadControlSettingsLoadControlDataInner{}

// LoadControlSettingsLoadControlDataInner struct for LoadControlSettingsLoadControlDataInner
type LoadControlSettingsLoadControlDataInner struct {
	// Name of the dry contact.
	Name *string `json:"name,omitempty"`
	// Name of the load.
	LoadName *string `json:"load_name,omitempty"`
	// HOs ability to override the load control settings.
	OwnerCanOverride *string `json:"owner_can_override,omitempty"`
	// Current load control configuration.
	Mode *string `json:"mode,omitempty"`
	// Applicable for advanced mode. Load will be powered off when the battery soc reaches this level.
	SocLow *int32 `json:"soc_low,omitempty"`
	// Applicable for advanced mode. Load powers off when battery reaches soc_low. The load will be powered on when the battery soc reaches soc_high.
	SocHigh *int32 `json:"soc_high,omitempty"`
	// Available values are enabled, disabled.
	Status *string `json:"status,omitempty"`
	// Applicable for scheduled mode. Time in seconds. Load will powered on between essential_start_time and essential_end_time.
	EssentialStartTime *int32 `json:"essential_start_time,omitempty"`
	// Applicable for scheduled mode. Time in seconds. Load will powered on between essential_start_time and essential_end_time.
	EssentialEndTime *int32 `json:"essential_end_time,omitempty"`
}

// NewLoadControlSettingsLoadControlDataInner instantiates a new LoadControlSettingsLoadControlDataInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoadControlSettingsLoadControlDataInner() *LoadControlSettingsLoadControlDataInner {
	this := LoadControlSettingsLoadControlDataInner{}
	return &this
}

// NewLoadControlSettingsLoadControlDataInnerWithDefaults instantiates a new LoadControlSettingsLoadControlDataInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoadControlSettingsLoadControlDataInnerWithDefaults() *LoadControlSettingsLoadControlDataInner {
	this := LoadControlSettingsLoadControlDataInner{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LoadControlSettingsLoadControlDataInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadControlSettingsLoadControlDataInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LoadControlSettingsLoadControlDataInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LoadControlSettingsLoadControlDataInner) SetName(v string) {
	o.Name = &v
}

// GetLoadName returns the LoadName field value if set, zero value otherwise.
func (o *LoadControlSettingsLoadControlDataInner) GetLoadName() string {
	if o == nil || IsNil(o.LoadName) {
		var ret string
		return ret
	}
	return *o.LoadName
}

// GetLoadNameOk returns a tuple with the LoadName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadControlSettingsLoadControlDataInner) GetLoadNameOk() (*string, bool) {
	if o == nil || IsNil(o.LoadName) {
		return nil, false
	}
	return o.LoadName, true
}

// HasLoadName returns a boolean if a field has been set.
func (o *LoadControlSettingsLoadControlDataInner) HasLoadName() bool {
	if o != nil && !IsNil(o.LoadName) {
		return true
	}

	return false
}

// SetLoadName gets a reference to the given string and assigns it to the LoadName field.
func (o *LoadControlSettingsLoadControlDataInner) SetLoadName(v string) {
	o.LoadName = &v
}

// GetOwnerCanOverride returns the OwnerCanOverride field value if set, zero value otherwise.
func (o *LoadControlSettingsLoadControlDataInner) GetOwnerCanOverride() string {
	if o == nil || IsNil(o.OwnerCanOverride) {
		var ret string
		return ret
	}
	return *o.OwnerCanOverride
}

// GetOwnerCanOverrideOk returns a tuple with the OwnerCanOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadControlSettingsLoadControlDataInner) GetOwnerCanOverrideOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerCanOverride) {
		return nil, false
	}
	return o.OwnerCanOverride, true
}

// HasOwnerCanOverride returns a boolean if a field has been set.
func (o *LoadControlSettingsLoadControlDataInner) HasOwnerCanOverride() bool {
	if o != nil && !IsNil(o.OwnerCanOverride) {
		return true
	}

	return false
}

// SetOwnerCanOverride gets a reference to the given string and assigns it to the OwnerCanOverride field.
func (o *LoadControlSettingsLoadControlDataInner) SetOwnerCanOverride(v string) {
	o.OwnerCanOverride = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *LoadControlSettingsLoadControlDataInner) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadControlSettingsLoadControlDataInner) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *LoadControlSettingsLoadControlDataInner) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *LoadControlSettingsLoadControlDataInner) SetMode(v string) {
	o.Mode = &v
}

// GetSocLow returns the SocLow field value if set, zero value otherwise.
func (o *LoadControlSettingsLoadControlDataInner) GetSocLow() int32 {
	if o == nil || IsNil(o.SocLow) {
		var ret int32
		return ret
	}
	return *o.SocLow
}

// GetSocLowOk returns a tuple with the SocLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadControlSettingsLoadControlDataInner) GetSocLowOk() (*int32, bool) {
	if o == nil || IsNil(o.SocLow) {
		return nil, false
	}
	return o.SocLow, true
}

// HasSocLow returns a boolean if a field has been set.
func (o *LoadControlSettingsLoadControlDataInner) HasSocLow() bool {
	if o != nil && !IsNil(o.SocLow) {
		return true
	}

	return false
}

// SetSocLow gets a reference to the given int32 and assigns it to the SocLow field.
func (o *LoadControlSettingsLoadControlDataInner) SetSocLow(v int32) {
	o.SocLow = &v
}

// GetSocHigh returns the SocHigh field value if set, zero value otherwise.
func (o *LoadControlSettingsLoadControlDataInner) GetSocHigh() int32 {
	if o == nil || IsNil(o.SocHigh) {
		var ret int32
		return ret
	}
	return *o.SocHigh
}

// GetSocHighOk returns a tuple with the SocHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadControlSettingsLoadControlDataInner) GetSocHighOk() (*int32, bool) {
	if o == nil || IsNil(o.SocHigh) {
		return nil, false
	}
	return o.SocHigh, true
}

// HasSocHigh returns a boolean if a field has been set.
func (o *LoadControlSettingsLoadControlDataInner) HasSocHigh() bool {
	if o != nil && !IsNil(o.SocHigh) {
		return true
	}

	return false
}

// SetSocHigh gets a reference to the given int32 and assigns it to the SocHigh field.
func (o *LoadControlSettingsLoadControlDataInner) SetSocHigh(v int32) {
	o.SocHigh = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *LoadControlSettingsLoadControlDataInner) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadControlSettingsLoadControlDataInner) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *LoadControlSettingsLoadControlDataInner) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *LoadControlSettingsLoadControlDataInner) SetStatus(v string) {
	o.Status = &v
}

// GetEssentialStartTime returns the EssentialStartTime field value if set, zero value otherwise.
func (o *LoadControlSettingsLoadControlDataInner) GetEssentialStartTime() int32 {
	if o == nil || IsNil(o.EssentialStartTime) {
		var ret int32
		return ret
	}
	return *o.EssentialStartTime
}

// GetEssentialStartTimeOk returns a tuple with the EssentialStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadControlSettingsLoadControlDataInner) GetEssentialStartTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.EssentialStartTime) {
		return nil, false
	}
	return o.EssentialStartTime, true
}

// HasEssentialStartTime returns a boolean if a field has been set.
func (o *LoadControlSettingsLoadControlDataInner) HasEssentialStartTime() bool {
	if o != nil && !IsNil(o.EssentialStartTime) {
		return true
	}

	return false
}

// SetEssentialStartTime gets a reference to the given int32 and assigns it to the EssentialStartTime field.
func (o *LoadControlSettingsLoadControlDataInner) SetEssentialStartTime(v int32) {
	o.EssentialStartTime = &v
}

// GetEssentialEndTime returns the EssentialEndTime field value if set, zero value otherwise.
func (o *LoadControlSettingsLoadControlDataInner) GetEssentialEndTime() int32 {
	if o == nil || IsNil(o.EssentialEndTime) {
		var ret int32
		return ret
	}
	return *o.EssentialEndTime
}

// GetEssentialEndTimeOk returns a tuple with the EssentialEndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadControlSettingsLoadControlDataInner) GetEssentialEndTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.EssentialEndTime) {
		return nil, false
	}
	return o.EssentialEndTime, true
}

// HasEssentialEndTime returns a boolean if a field has been set.
func (o *LoadControlSettingsLoadControlDataInner) HasEssentialEndTime() bool {
	if o != nil && !IsNil(o.EssentialEndTime) {
		return true
	}

	return false
}

// SetEssentialEndTime gets a reference to the given int32 and assigns it to the EssentialEndTime field.
func (o *LoadControlSettingsLoadControlDataInner) SetEssentialEndTime(v int32) {
	o.EssentialEndTime = &v
}

func (o LoadControlSettingsLoadControlDataInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoadControlSettingsLoadControlDataInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.LoadName) {
		toSerialize["load_name"] = o.LoadName
	}
	if !IsNil(o.OwnerCanOverride) {
		toSerialize["owner_can_override"] = o.OwnerCanOverride
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.SocLow) {
		toSerialize["soc_low"] = o.SocLow
	}
	if !IsNil(o.SocHigh) {
		toSerialize["soc_high"] = o.SocHigh
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.EssentialStartTime) {
		toSerialize["essential_start_time"] = o.EssentialStartTime
	}
	if !IsNil(o.EssentialEndTime) {
		toSerialize["essential_end_time"] = o.EssentialEndTime
	}
	return toSerialize, nil
}

type NullableLoadControlSettingsLoadControlDataInner struct {
	value *LoadControlSettingsLoadControlDataInner
	isSet bool
}

func (v NullableLoadControlSettingsLoadControlDataInner) Get() *LoadControlSettingsLoadControlDataInner {
	return v.value
}

func (v *NullableLoadControlSettingsLoadControlDataInner) Set(val *LoadControlSettingsLoadControlDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadControlSettingsLoadControlDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadControlSettingsLoadControlDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadControlSettingsLoadControlDataInner(val *LoadControlSettingsLoadControlDataInner) *NullableLoadControlSettingsLoadControlDataInner {
	return &NullableLoadControlSettingsLoadControlDataInner{value: val, isSet: true}
}

func (v NullableLoadControlSettingsLoadControlDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadControlSettingsLoadControlDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


