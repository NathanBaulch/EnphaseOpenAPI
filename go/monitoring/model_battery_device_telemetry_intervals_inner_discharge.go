/*
The Enphase Monitoring API

Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monitoring

import (
	"encoding/json"
)

// checks if the BatteryDeviceTelemetryIntervalsInnerDischarge type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatteryDeviceTelemetryIntervalsInnerDischarge{}

// BatteryDeviceTelemetryIntervalsInnerDischarge struct for BatteryDeviceTelemetryIntervalsInnerDischarge
type BatteryDeviceTelemetryIntervalsInnerDischarge struct {
	// Energy discharged from the battery during the interval.
	Enwh *int32 `json:"enwh,omitempty"`
}

// NewBatteryDeviceTelemetryIntervalsInnerDischarge instantiates a new BatteryDeviceTelemetryIntervalsInnerDischarge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatteryDeviceTelemetryIntervalsInnerDischarge() *BatteryDeviceTelemetryIntervalsInnerDischarge {
	this := BatteryDeviceTelemetryIntervalsInnerDischarge{}
	return &this
}

// NewBatteryDeviceTelemetryIntervalsInnerDischargeWithDefaults instantiates a new BatteryDeviceTelemetryIntervalsInnerDischarge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatteryDeviceTelemetryIntervalsInnerDischargeWithDefaults() *BatteryDeviceTelemetryIntervalsInnerDischarge {
	this := BatteryDeviceTelemetryIntervalsInnerDischarge{}
	return &this
}

// GetEnwh returns the Enwh field value if set, zero value otherwise.
func (o *BatteryDeviceTelemetryIntervalsInnerDischarge) GetEnwh() int32 {
	if o == nil || IsNil(o.Enwh) {
		var ret int32
		return ret
	}
	return *o.Enwh
}

// GetEnwhOk returns a tuple with the Enwh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatteryDeviceTelemetryIntervalsInnerDischarge) GetEnwhOk() (*int32, bool) {
	if o == nil || IsNil(o.Enwh) {
		return nil, false
	}
	return o.Enwh, true
}

// HasEnwh returns a boolean if a field has been set.
func (o *BatteryDeviceTelemetryIntervalsInnerDischarge) HasEnwh() bool {
	if o != nil && !IsNil(o.Enwh) {
		return true
	}

	return false
}

// SetEnwh gets a reference to the given int32 and assigns it to the Enwh field.
func (o *BatteryDeviceTelemetryIntervalsInnerDischarge) SetEnwh(v int32) {
	o.Enwh = &v
}

func (o BatteryDeviceTelemetryIntervalsInnerDischarge) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatteryDeviceTelemetryIntervalsInnerDischarge) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enwh) {
		toSerialize["enwh"] = o.Enwh
	}
	return toSerialize, nil
}

type NullableBatteryDeviceTelemetryIntervalsInnerDischarge struct {
	value *BatteryDeviceTelemetryIntervalsInnerDischarge
	isSet bool
}

func (v NullableBatteryDeviceTelemetryIntervalsInnerDischarge) Get() *BatteryDeviceTelemetryIntervalsInnerDischarge {
	return v.value
}

func (v *NullableBatteryDeviceTelemetryIntervalsInnerDischarge) Set(val *BatteryDeviceTelemetryIntervalsInnerDischarge) {
	v.value = val
	v.isSet = true
}

func (v NullableBatteryDeviceTelemetryIntervalsInnerDischarge) IsSet() bool {
	return v.isSet
}

func (v *NullableBatteryDeviceTelemetryIntervalsInnerDischarge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatteryDeviceTelemetryIntervalsInnerDischarge(val *BatteryDeviceTelemetryIntervalsInnerDischarge) *NullableBatteryDeviceTelemetryIntervalsInnerDischarge {
	return &NullableBatteryDeviceTelemetryIntervalsInnerDischarge{value: val, isSet: true}
}

func (v NullableBatteryDeviceTelemetryIntervalsInnerDischarge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatteryDeviceTelemetryIntervalsInnerDischarge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


