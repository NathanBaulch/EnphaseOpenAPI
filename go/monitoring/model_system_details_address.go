/*
The Enphase Monitoring API

Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monitoring

import (
	"encoding/json"
)

// checks if the SystemDetailsAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SystemDetailsAddress{}

// SystemDetailsAddress Address object for the system.
type SystemDetailsAddress struct {
	// City in which the system is located.
	City *string `json:"city,omitempty"`
	// State in which the system is located.
	State *string `json:"state,omitempty"`
	// Country in which the system is located.
	Country *string `json:"country,omitempty"`
	// Postal code of the system's location.
	PostalCode *string `json:"postal_code,omitempty"`
}

// NewSystemDetailsAddress instantiates a new SystemDetailsAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystemDetailsAddress() *SystemDetailsAddress {
	this := SystemDetailsAddress{}
	return &this
}

// NewSystemDetailsAddressWithDefaults instantiates a new SystemDetailsAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemDetailsAddressWithDefaults() *SystemDetailsAddress {
	this := SystemDetailsAddress{}
	return &this
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *SystemDetailsAddress) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemDetailsAddress) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *SystemDetailsAddress) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *SystemDetailsAddress) SetCity(v string) {
	o.City = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *SystemDetailsAddress) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemDetailsAddress) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *SystemDetailsAddress) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *SystemDetailsAddress) SetState(v string) {
	o.State = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *SystemDetailsAddress) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemDetailsAddress) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *SystemDetailsAddress) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *SystemDetailsAddress) SetCountry(v string) {
	o.Country = &v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *SystemDetailsAddress) GetPostalCode() string {
	if o == nil || IsNil(o.PostalCode) {
		var ret string
		return ret
	}
	return *o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemDetailsAddress) GetPostalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PostalCode) {
		return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *SystemDetailsAddress) HasPostalCode() bool {
	if o != nil && !IsNil(o.PostalCode) {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given string and assigns it to the PostalCode field.
func (o *SystemDetailsAddress) SetPostalCode(v string) {
	o.PostalCode = &v
}

func (o SystemDetailsAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SystemDetailsAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.PostalCode) {
		toSerialize["postal_code"] = o.PostalCode
	}
	return toSerialize, nil
}

type NullableSystemDetailsAddress struct {
	value *SystemDetailsAddress
	isSet bool
}

func (v NullableSystemDetailsAddress) Get() *SystemDetailsAddress {
	return v.value
}

func (v *NullableSystemDetailsAddress) Set(val *SystemDetailsAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemDetailsAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemDetailsAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemDetailsAddress(val *SystemDetailsAddress) *NullableSystemDetailsAddress {
	return &NullableSystemDetailsAddress{value: val, isSet: true}
}

func (v NullableSystemDetailsAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemDetailsAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


