/*
The Enphase Monitoring API

Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monitoring

import (
	"encoding/json"
)

// checks if the BatterySettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatterySettings{}

// BatterySettings struct for BatterySettings
type BatterySettings struct {
	SystemId *int32 `json:"system_id,omitempty"`
	// Current battery mode of the system. Available values are Savings Mode, Full Backup, and Self - Consumption.
	BatteryMode *string `json:"battery_mode,omitempty"`
	// Reserve soc for the current mode.
	ReserveSoc *int32 `json:"reserve_soc,omitempty"`
	// Energy independence after peak hours enabled/disabled. Enabled: Battery will discharge to save money during peak hours when electricity rates are high. Once that is done, energy independence is prioritized. This will increase the energy self-sufficiency until the reserve soc is hit. Battery will charge from solar in the morning to get ready for the next period. Disabled: Battery will discharge only during peak hours when electricity rates are high. During other times, battery will be idle or will charge from solar in the morning to get ready for the next period.
	EnergyIndependence *string `json:"energy_independence,omitempty"`
	// Charge battery from grid enabled/disabled. Enabled: Battery may also charge from the grid when in full backup mode or when battery charge is below the reserve capacity in savings or self-consumption mode.
	ChargeFromGrid *string `json:"charge_from_grid,omitempty"`
	// Level at which battery shutdowns to conserve energy. Battery restarts by using the conserved energy when the utility grid restores power or solar panels start producing energy.
	BatteryShutdownLevel *int32 `json:"battery_shutdown_level,omitempty"`
}

// NewBatterySettings instantiates a new BatterySettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatterySettings() *BatterySettings {
	this := BatterySettings{}
	return &this
}

// NewBatterySettingsWithDefaults instantiates a new BatterySettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatterySettingsWithDefaults() *BatterySettings {
	this := BatterySettings{}
	return &this
}

// GetSystemId returns the SystemId field value if set, zero value otherwise.
func (o *BatterySettings) GetSystemId() int32 {
	if o == nil || IsNil(o.SystemId) {
		var ret int32
		return ret
	}
	return *o.SystemId
}

// GetSystemIdOk returns a tuple with the SystemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatterySettings) GetSystemIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SystemId) {
		return nil, false
	}
	return o.SystemId, true
}

// HasSystemId returns a boolean if a field has been set.
func (o *BatterySettings) HasSystemId() bool {
	if o != nil && !IsNil(o.SystemId) {
		return true
	}

	return false
}

// SetSystemId gets a reference to the given int32 and assigns it to the SystemId field.
func (o *BatterySettings) SetSystemId(v int32) {
	o.SystemId = &v
}

// GetBatteryMode returns the BatteryMode field value if set, zero value otherwise.
func (o *BatterySettings) GetBatteryMode() string {
	if o == nil || IsNil(o.BatteryMode) {
		var ret string
		return ret
	}
	return *o.BatteryMode
}

// GetBatteryModeOk returns a tuple with the BatteryMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatterySettings) GetBatteryModeOk() (*string, bool) {
	if o == nil || IsNil(o.BatteryMode) {
		return nil, false
	}
	return o.BatteryMode, true
}

// HasBatteryMode returns a boolean if a field has been set.
func (o *BatterySettings) HasBatteryMode() bool {
	if o != nil && !IsNil(o.BatteryMode) {
		return true
	}

	return false
}

// SetBatteryMode gets a reference to the given string and assigns it to the BatteryMode field.
func (o *BatterySettings) SetBatteryMode(v string) {
	o.BatteryMode = &v
}

// GetReserveSoc returns the ReserveSoc field value if set, zero value otherwise.
func (o *BatterySettings) GetReserveSoc() int32 {
	if o == nil || IsNil(o.ReserveSoc) {
		var ret int32
		return ret
	}
	return *o.ReserveSoc
}

// GetReserveSocOk returns a tuple with the ReserveSoc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatterySettings) GetReserveSocOk() (*int32, bool) {
	if o == nil || IsNil(o.ReserveSoc) {
		return nil, false
	}
	return o.ReserveSoc, true
}

// HasReserveSoc returns a boolean if a field has been set.
func (o *BatterySettings) HasReserveSoc() bool {
	if o != nil && !IsNil(o.ReserveSoc) {
		return true
	}

	return false
}

// SetReserveSoc gets a reference to the given int32 and assigns it to the ReserveSoc field.
func (o *BatterySettings) SetReserveSoc(v int32) {
	o.ReserveSoc = &v
}

// GetEnergyIndependence returns the EnergyIndependence field value if set, zero value otherwise.
func (o *BatterySettings) GetEnergyIndependence() string {
	if o == nil || IsNil(o.EnergyIndependence) {
		var ret string
		return ret
	}
	return *o.EnergyIndependence
}

// GetEnergyIndependenceOk returns a tuple with the EnergyIndependence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatterySettings) GetEnergyIndependenceOk() (*string, bool) {
	if o == nil || IsNil(o.EnergyIndependence) {
		return nil, false
	}
	return o.EnergyIndependence, true
}

// HasEnergyIndependence returns a boolean if a field has been set.
func (o *BatterySettings) HasEnergyIndependence() bool {
	if o != nil && !IsNil(o.EnergyIndependence) {
		return true
	}

	return false
}

// SetEnergyIndependence gets a reference to the given string and assigns it to the EnergyIndependence field.
func (o *BatterySettings) SetEnergyIndependence(v string) {
	o.EnergyIndependence = &v
}

// GetChargeFromGrid returns the ChargeFromGrid field value if set, zero value otherwise.
func (o *BatterySettings) GetChargeFromGrid() string {
	if o == nil || IsNil(o.ChargeFromGrid) {
		var ret string
		return ret
	}
	return *o.ChargeFromGrid
}

// GetChargeFromGridOk returns a tuple with the ChargeFromGrid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatterySettings) GetChargeFromGridOk() (*string, bool) {
	if o == nil || IsNil(o.ChargeFromGrid) {
		return nil, false
	}
	return o.ChargeFromGrid, true
}

// HasChargeFromGrid returns a boolean if a field has been set.
func (o *BatterySettings) HasChargeFromGrid() bool {
	if o != nil && !IsNil(o.ChargeFromGrid) {
		return true
	}

	return false
}

// SetChargeFromGrid gets a reference to the given string and assigns it to the ChargeFromGrid field.
func (o *BatterySettings) SetChargeFromGrid(v string) {
	o.ChargeFromGrid = &v
}

// GetBatteryShutdownLevel returns the BatteryShutdownLevel field value if set, zero value otherwise.
func (o *BatterySettings) GetBatteryShutdownLevel() int32 {
	if o == nil || IsNil(o.BatteryShutdownLevel) {
		var ret int32
		return ret
	}
	return *o.BatteryShutdownLevel
}

// GetBatteryShutdownLevelOk returns a tuple with the BatteryShutdownLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatterySettings) GetBatteryShutdownLevelOk() (*int32, bool) {
	if o == nil || IsNil(o.BatteryShutdownLevel) {
		return nil, false
	}
	return o.BatteryShutdownLevel, true
}

// HasBatteryShutdownLevel returns a boolean if a field has been set.
func (o *BatterySettings) HasBatteryShutdownLevel() bool {
	if o != nil && !IsNil(o.BatteryShutdownLevel) {
		return true
	}

	return false
}

// SetBatteryShutdownLevel gets a reference to the given int32 and assigns it to the BatteryShutdownLevel field.
func (o *BatterySettings) SetBatteryShutdownLevel(v int32) {
	o.BatteryShutdownLevel = &v
}

func (o BatterySettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatterySettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SystemId) {
		toSerialize["system_id"] = o.SystemId
	}
	if !IsNil(o.BatteryMode) {
		toSerialize["battery_mode"] = o.BatteryMode
	}
	if !IsNil(o.ReserveSoc) {
		toSerialize["reserve_soc"] = o.ReserveSoc
	}
	if !IsNil(o.EnergyIndependence) {
		toSerialize["energy_independence"] = o.EnergyIndependence
	}
	if !IsNil(o.ChargeFromGrid) {
		toSerialize["charge_from_grid"] = o.ChargeFromGrid
	}
	if !IsNil(o.BatteryShutdownLevel) {
		toSerialize["battery_shutdown_level"] = o.BatteryShutdownLevel
	}
	return toSerialize, nil
}

type NullableBatterySettings struct {
	value *BatterySettings
	isSet bool
}

func (v NullableBatterySettings) Get() *BatterySettings {
	return v.value
}

func (v *NullableBatterySettings) Set(val *BatterySettings) {
	v.value = val
	v.isSet = true
}

func (v NullableBatterySettings) IsSet() bool {
	return v.isSet
}

func (v *NullableBatterySettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatterySettings(val *BatterySettings) *NullableBatterySettings {
	return &NullableBatterySettings{value: val, isSet: true}
}

func (v NullableBatterySettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatterySettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


