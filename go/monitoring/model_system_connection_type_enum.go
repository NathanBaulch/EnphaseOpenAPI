/*
The Enphase Monitoring API

Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monitoring

import (
	"encoding/json"
	"fmt"
)

// SystemConnectionTypeEnum Connection type of the system.
type SystemConnectionTypeEnum string

// List of SystemConnectionTypeEnum
const (
	SYSTEMCONNECTIONTYPEENUM_WIFI SystemConnectionTypeEnum = "wifi"
	SYSTEMCONNECTIONTYPEENUM_CELLULAR SystemConnectionTypeEnum = "cellular"
	SYSTEMCONNECTIONTYPEENUM_ETHERNET SystemConnectionTypeEnum = "ethernet"
)

// All allowed values of SystemConnectionTypeEnum enum
var AllowedSystemConnectionTypeEnumEnumValues = []SystemConnectionTypeEnum{
	"wifi",
	"cellular",
	"ethernet",
}

func (v *SystemConnectionTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SystemConnectionTypeEnum(value)
	for _, existing := range AllowedSystemConnectionTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SystemConnectionTypeEnum", value)
}

// NewSystemConnectionTypeEnumFromValue returns a pointer to a valid SystemConnectionTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSystemConnectionTypeEnumFromValue(v string) (*SystemConnectionTypeEnum, error) {
	ev := SystemConnectionTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SystemConnectionTypeEnum: valid values are %v", v, AllowedSystemConnectionTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SystemConnectionTypeEnum) IsValid() bool {
	for _, existing := range AllowedSystemConnectionTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SystemConnectionTypeEnum value
func (v SystemConnectionTypeEnum) Ptr() *SystemConnectionTypeEnum {
	return &v
}

type NullableSystemConnectionTypeEnum struct {
	value *SystemConnectionTypeEnum
	isSet bool
}

func (v NullableSystemConnectionTypeEnum) Get() *SystemConnectionTypeEnum {
	return v.value
}

func (v *NullableSystemConnectionTypeEnum) Set(val *SystemConnectionTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemConnectionTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemConnectionTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemConnectionTypeEnum(val *SystemConnectionTypeEnum) *NullableSystemConnectionTypeEnum {
	return &NullableSystemConnectionTypeEnum{value: val, isSet: true}
}

func (v NullableSystemConnectionTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemConnectionTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

