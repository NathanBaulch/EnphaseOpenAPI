/*
The Enphase Monitoring API

Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monitoring

import (
	"encoding/json"
	"fmt"
)

// SystemSortByEnum Returns list of systems sorted by <sort_by> field. To get ASC order sorted list, user sort_by = <key>. To get DESC order sorted list, use sort_by = (-)<key>. Current sort keys supported are id, name, and last_report_date. By default the list is sorted by decreasing system ID.
type SystemSortByEnum string

// List of SystemSortByEnum
const (
	SYSTEMSORTBYENUM_ID SystemSortByEnum = "id"
	SYSTEMSORTBYENUM_NAME SystemSortByEnum = "name"
	SYSTEMSORTBYENUM_LAST_REPORT_DATE SystemSortByEnum = "last_report_date"
	SYSTEMSORTBYENUM_ID_DESC SystemSortByEnum = "-id"
	SYSTEMSORTBYENUM_NAME_DESC SystemSortByEnum = "-name"
	SYSTEMSORTBYENUM_LAST_REPORT_DATE_DESC SystemSortByEnum = "-last_report_date"
)

// All allowed values of SystemSortByEnum enum
var AllowedSystemSortByEnumEnumValues = []SystemSortByEnum{
	"id",
	"name",
	"last_report_date",
	"-id",
	"-name",
	"-last_report_date",
}

func (v *SystemSortByEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SystemSortByEnum(value)
	for _, existing := range AllowedSystemSortByEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SystemSortByEnum", value)
}

// NewSystemSortByEnumFromValue returns a pointer to a valid SystemSortByEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSystemSortByEnumFromValue(v string) (*SystemSortByEnum, error) {
	ev := SystemSortByEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SystemSortByEnum: valid values are %v", v, AllowedSystemSortByEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SystemSortByEnum) IsValid() bool {
	for _, existing := range AllowedSystemSortByEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SystemSortByEnum value
func (v SystemSortByEnum) Ptr() *SystemSortByEnum {
	return &v
}

type NullableSystemSortByEnum struct {
	value *SystemSortByEnum
	isSet bool
}

func (v NullableSystemSortByEnum) Get() *SystemSortByEnum {
	return v.value
}

func (v *NullableSystemSortByEnum) Set(val *SystemSortByEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemSortByEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemSortByEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemSortByEnum(val *SystemSortByEnum) *NullableSystemSortByEnum {
	return &NullableSystemSortByEnum{value: val, isSet: true}
}

func (v NullableSystemSortByEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemSortByEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

