/*
The Enphase Monitoring API

Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monitoring

import (
	"encoding/json"
	"fmt"
)

// SystemAttachmentTypeEnum Micro inverter attachment type.
type SystemAttachmentTypeEnum string

// List of SystemAttachmentTypeEnum
const (
	SYSTEMATTACHMENTTYPEENUM_RACK_MOUNT SystemAttachmentTypeEnum = "rack_mount"
	SYSTEMATTACHMENTTYPEENUM_ZEP SystemAttachmentTypeEnum = "zep"
	SYSTEMATTACHMENTTYPEENUM_ACM SystemAttachmentTypeEnum = "acm"
	SYSTEMATTACHMENTTYPEENUM_BIPV SystemAttachmentTypeEnum = "bipv"
	SYSTEMATTACHMENTTYPEENUM_FRAME_MOUNT SystemAttachmentTypeEnum = "frame_mount"
	SYSTEMATTACHMENTTYPEENUM_RAILLESS_MOUNT SystemAttachmentTypeEnum = "railless_mount"
)

// All allowed values of SystemAttachmentTypeEnum enum
var AllowedSystemAttachmentTypeEnumEnumValues = []SystemAttachmentTypeEnum{
	"rack_mount",
	"zep",
	"acm",
	"bipv",
	"frame_mount",
	"railless_mount",
}

func (v *SystemAttachmentTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SystemAttachmentTypeEnum(value)
	for _, existing := range AllowedSystemAttachmentTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SystemAttachmentTypeEnum", value)
}

// NewSystemAttachmentTypeEnumFromValue returns a pointer to a valid SystemAttachmentTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSystemAttachmentTypeEnumFromValue(v string) (*SystemAttachmentTypeEnum, error) {
	ev := SystemAttachmentTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SystemAttachmentTypeEnum: valid values are %v", v, AllowedSystemAttachmentTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SystemAttachmentTypeEnum) IsValid() bool {
	for _, existing := range AllowedSystemAttachmentTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SystemAttachmentTypeEnum value
func (v SystemAttachmentTypeEnum) Ptr() *SystemAttachmentTypeEnum {
	return &v
}

type NullableSystemAttachmentTypeEnum struct {
	value *SystemAttachmentTypeEnum
	isSet bool
}

func (v NullableSystemAttachmentTypeEnum) Get() *SystemAttachmentTypeEnum {
	return v.value
}

func (v *NullableSystemAttachmentTypeEnum) Set(val *SystemAttachmentTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemAttachmentTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemAttachmentTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemAttachmentTypeEnum(val *SystemAttachmentTypeEnum) *NullableSystemAttachmentTypeEnum {
	return &NullableSystemAttachmentTypeEnum{value: val, isSet: true}
}

func (v NullableSystemAttachmentTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemAttachmentTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

