/*
The Enphase Monitoring API

Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monitoring

import (
	"encoding/json"
	"fmt"
)

// TelemetryGranularityEnum Granularity of the telemetry data. Default is 'day'.
type TelemetryGranularityEnum string

// List of TelemetryGranularityEnum
const (
	TELEMETRYGRANULARITYENUM__15MINS TelemetryGranularityEnum = "15mins"
	TELEMETRYGRANULARITYENUM_DAY TelemetryGranularityEnum = "day"
	TELEMETRYGRANULARITYENUM_WEEK TelemetryGranularityEnum = "week"
)

// All allowed values of TelemetryGranularityEnum enum
var AllowedTelemetryGranularityEnumEnumValues = []TelemetryGranularityEnum{
	"15mins",
	"day",
	"week",
}

func (v *TelemetryGranularityEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TelemetryGranularityEnum(value)
	for _, existing := range AllowedTelemetryGranularityEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TelemetryGranularityEnum", value)
}

// NewTelemetryGranularityEnumFromValue returns a pointer to a valid TelemetryGranularityEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTelemetryGranularityEnumFromValue(v string) (*TelemetryGranularityEnum, error) {
	ev := TelemetryGranularityEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TelemetryGranularityEnum: valid values are %v", v, AllowedTelemetryGranularityEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TelemetryGranularityEnum) IsValid() bool {
	for _, existing := range AllowedTelemetryGranularityEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TelemetryGranularityEnum value
func (v TelemetryGranularityEnum) Ptr() *TelemetryGranularityEnum {
	return &v
}

type NullableTelemetryGranularityEnum struct {
	value *TelemetryGranularityEnum
	isSet bool
}

func (v NullableTelemetryGranularityEnum) Get() *TelemetryGranularityEnum {
	return v.value
}

func (v *NullableTelemetryGranularityEnum) Set(val *TelemetryGranularityEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryGranularityEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryGranularityEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryGranularityEnum(val *TelemetryGranularityEnum) *NullableTelemetryGranularityEnum {
	return &NullableTelemetryGranularityEnum{value: val, isSet: true}
}

func (v NullableTelemetryGranularityEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryGranularityEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

