/*
The Enphase Monitoring API

Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.

API version: 4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monitoring

import (
	"encoding/json"
	"fmt"
)

// SystemEnergyLifetimeProductionEnum the model 'SystemEnergyLifetimeProductionEnum'
type SystemEnergyLifetimeProductionEnum string

// List of SystemEnergyLifetimeProductionEnum
const (
	SYSTEMENERGYLIFETIMEPRODUCTIONENUM_ALL SystemEnergyLifetimeProductionEnum = "all"
)

// All allowed values of SystemEnergyLifetimeProductionEnum enum
var AllowedSystemEnergyLifetimeProductionEnumEnumValues = []SystemEnergyLifetimeProductionEnum{
	"all",
}

func (v *SystemEnergyLifetimeProductionEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SystemEnergyLifetimeProductionEnum(value)
	for _, existing := range AllowedSystemEnergyLifetimeProductionEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SystemEnergyLifetimeProductionEnum", value)
}

// NewSystemEnergyLifetimeProductionEnumFromValue returns a pointer to a valid SystemEnergyLifetimeProductionEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSystemEnergyLifetimeProductionEnumFromValue(v string) (*SystemEnergyLifetimeProductionEnum, error) {
	ev := SystemEnergyLifetimeProductionEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SystemEnergyLifetimeProductionEnum: valid values are %v", v, AllowedSystemEnergyLifetimeProductionEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SystemEnergyLifetimeProductionEnum) IsValid() bool {
	for _, existing := range AllowedSystemEnergyLifetimeProductionEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SystemEnergyLifetimeProductionEnum value
func (v SystemEnergyLifetimeProductionEnum) Ptr() *SystemEnergyLifetimeProductionEnum {
	return &v
}

type NullableSystemEnergyLifetimeProductionEnum struct {
	value *SystemEnergyLifetimeProductionEnum
	isSet bool
}

func (v NullableSystemEnergyLifetimeProductionEnum) Get() *SystemEnergyLifetimeProductionEnum {
	return v.value
}

func (v *NullableSystemEnergyLifetimeProductionEnum) Set(val *SystemEnergyLifetimeProductionEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemEnergyLifetimeProductionEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemEnergyLifetimeProductionEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemEnergyLifetimeProductionEnum(val *SystemEnergyLifetimeProductionEnum) *NullableSystemEnergyLifetimeProductionEnum {
	return &NullableSystemEnergyLifetimeProductionEnum{value: val, isSet: true}
}

func (v NullableSystemEnergyLifetimeProductionEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemEnergyLifetimeProductionEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

