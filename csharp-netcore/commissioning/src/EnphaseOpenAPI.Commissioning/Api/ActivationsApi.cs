/*
 * The Enphase Commissioning API
 *
 * Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EnphaseOpenAPI.Commissioning.Client;
using EnphaseOpenAPI.Commissioning.Client.Auth;
using EnphaseOpenAPI.Commissioning.Model;

namespace EnphaseOpenAPI.Commissioning.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IActivationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create new activation
        /// </summary>
        /// <remarks>
        /// Create new activation.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Activation</returns>
        Activation CreatePartnerActivation(SystemParams _params = default(SystemParams), int operationIndex = 0);

        /// <summary>
        /// Create new activation
        /// </summary>
        /// <remarks>
        /// Create new activation.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Activation</returns>
        ApiResponse<Activation> CreatePartnerActivationWithHttpInfo(SystemParams _params = default(SystemParams), int operationIndex = 0);
        /// <summary>
        /// Delete an activation by ID
        /// </summary>
        /// <remarks>
        /// To delete an activation, the activation stage must be less than 3 and there are no active devices associated with it.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteActivationResponse</returns>
        DeleteActivationResponse DeleteActivation(int activationId, int operationIndex = 0);

        /// <summary>
        /// Delete an activation by ID
        /// </summary>
        /// <remarks>
        /// To delete an activation, the activation stage must be less than 3 and there are no active devices associated with it.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteActivationResponse</returns>
        ApiResponse<DeleteActivationResponse> DeleteActivationWithHttpInfo(int activationId, int operationIndex = 0);
        /// <summary>
        /// Get production mode
        /// </summary>
        /// <remarks>
        /// Get production mode for a particular system. For that system stage must be greater than 2, Otherwise you will get 422.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetActivationOpsProductionModeResponse</returns>
        GetActivationOpsProductionModeResponse GetActivationOpsProductionMode(int activationId, int operationIndex = 0);

        /// <summary>
        /// Get production mode
        /// </summary>
        /// <remarks>
        /// Get production mode for a particular system. For that system stage must be greater than 2, Otherwise you will get 422.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetActivationOpsProductionModeResponse</returns>
        ApiResponse<GetActivationOpsProductionModeResponse> GetActivationOpsProductionModeWithHttpInfo(int activationId, int operationIndex = 0);
        /// <summary>
        /// Retrieves an Activation by ID
        /// </summary>
        /// <remarks>
        /// By default, the body of the response looks like the example below. However, you can choose to retrieve more information about the activation using response expansion, for example instead of returning only the owner&#39;s name within the system hash, the response includes detailed information about the owner by using expand&#x3D;owner. You can also expand the owner&#39;s company by using expand&#x3D;owner.company. The response now includes information about the owner and the company he belongs to, if any. By using expand&#x3D;host will include details about the system host. You can also expand the host&#39;s company by using expand&#x3D;host.company. The response now includes information about the host and the company he belongs to.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="expand">Retrieve more information about the activation. The expand query parameter is a comma-separated list of associations to expand. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Activation</returns>
        Activation GetPartnerActivation(int activationId, SystemExpandEnum? expand = default(SystemExpandEnum?), int operationIndex = 0);

        /// <summary>
        /// Retrieves an Activation by ID
        /// </summary>
        /// <remarks>
        /// By default, the body of the response looks like the example below. However, you can choose to retrieve more information about the activation using response expansion, for example instead of returning only the owner&#39;s name within the system hash, the response includes detailed information about the owner by using expand&#x3D;owner. You can also expand the owner&#39;s company by using expand&#x3D;owner.company. The response now includes information about the owner and the company he belongs to, if any. By using expand&#x3D;host will include details about the system host. You can also expand the host&#39;s company by using expand&#x3D;host.company. The response now includes information about the host and the company he belongs to.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="expand">Retrieve more information about the activation. The expand query parameter is a comma-separated list of associations to expand. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Activation</returns>
        ApiResponse<Activation> GetPartnerActivationWithHttpInfo(int activationId, SystemExpandEnum? expand = default(SystemExpandEnum?), int operationIndex = 0);
        /// <summary>
        /// List of Activations
        /// </summary>
        /// <remarks>
        /// Returns a list of activations for which the user can make API requests. There is a limit to the number of activations which can be returned at one time. If the first request does not return a full list, use the &#39;next&#39; attribute in the response body to request the next page. By default, activations are returned in batches of 100. The maximum page size is 1000. Provide only valid filters. During filter the activations empty and invalid filter fields are ignored. In case the installer ID doesn&#39;t exist, API will return an empty array.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="next">If the first request does not return a full list, use the &#39;next&#39; attribute in the response body to request the next page. By default, activations are returned in batches of 100. The maximum page size is 1000. If the returned list below the limit, then response does not include the &#39;next&#39; field. (optional)</param>
        /// <param name="limit">There is a limit to the number of activations which can be returned at one time. (optional)</param>
        /// <param name="stage">Filter activations by stage. Passing in_progress alone will consider as you have passed all the 1,2,3,4 stages. Passing multiple stage values using comma to filter. E.g. stage&#x3D;1,2,3. Passing in_progress with any other combination will give you empty systems. This parameter searches for an exact match of the input value. (optional)</param>
        /// <param name="reference">Filter activations by company reference. (optional)</param>
        /// <param name="installerId">Filter activations by installer ID. (optional)</param>
        /// <param name="systemName">Filter activations by system name. (optional)</param>
        /// <param name="address">Filter activations by address. This will perform a partial search and return if match found with street1, street2, country, state, zipcode of the activation. (optional)</param>
        /// <param name="region">Filter activations by region. Provide two latitude, longitude values to find activations between them. Format &#39;latitude1,longitude1,latitude2,longitude2&#39; e.g value &#39;44.968046,-94.420307,44.33328,-89.132008&#39;. (optional)</param>
        /// <param name="search">Filter activations by search. This will perform a partial search and return if match found with system_name, reference, system_id, street1 and street2, country, state, zipcode of the activation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPartnerActivationsResponse</returns>
        GetPartnerActivationsResponse GetPartnerActivations(string next = default(string), int? limit = default(int?), SystemStageEnum? stage = default(SystemStageEnum?), string reference = default(string), int? installerId = default(int?), string systemName = default(string), string address = default(string), string region = default(string), string search = default(string), int operationIndex = 0);

        /// <summary>
        /// List of Activations
        /// </summary>
        /// <remarks>
        /// Returns a list of activations for which the user can make API requests. There is a limit to the number of activations which can be returned at one time. If the first request does not return a full list, use the &#39;next&#39; attribute in the response body to request the next page. By default, activations are returned in batches of 100. The maximum page size is 1000. Provide only valid filters. During filter the activations empty and invalid filter fields are ignored. In case the installer ID doesn&#39;t exist, API will return an empty array.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="next">If the first request does not return a full list, use the &#39;next&#39; attribute in the response body to request the next page. By default, activations are returned in batches of 100. The maximum page size is 1000. If the returned list below the limit, then response does not include the &#39;next&#39; field. (optional)</param>
        /// <param name="limit">There is a limit to the number of activations which can be returned at one time. (optional)</param>
        /// <param name="stage">Filter activations by stage. Passing in_progress alone will consider as you have passed all the 1,2,3,4 stages. Passing multiple stage values using comma to filter. E.g. stage&#x3D;1,2,3. Passing in_progress with any other combination will give you empty systems. This parameter searches for an exact match of the input value. (optional)</param>
        /// <param name="reference">Filter activations by company reference. (optional)</param>
        /// <param name="installerId">Filter activations by installer ID. (optional)</param>
        /// <param name="systemName">Filter activations by system name. (optional)</param>
        /// <param name="address">Filter activations by address. This will perform a partial search and return if match found with street1, street2, country, state, zipcode of the activation. (optional)</param>
        /// <param name="region">Filter activations by region. Provide two latitude, longitude values to find activations between them. Format &#39;latitude1,longitude1,latitude2,longitude2&#39; e.g value &#39;44.968046,-94.420307,44.33328,-89.132008&#39;. (optional)</param>
        /// <param name="search">Filter activations by search. This will perform a partial search and return if match found with system_name, reference, system_id, street1 and street2, country, state, zipcode of the activation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPartnerActivationsResponse</returns>
        ApiResponse<GetPartnerActivationsResponse> GetPartnerActivationsWithHttpInfo(string next = default(string), int? limit = default(int?), SystemStageEnum? stage = default(SystemStageEnum?), string reference = default(string), int? installerId = default(int?), string systemName = default(string), string address = default(string), string region = default(string), string search = default(string), int operationIndex = 0);
        /// <summary>
        /// Grant Access
        /// </summary>
        /// <remarks>
        /// Gives a user permission to view this system. Response status 200 indicates the access was granted. The user must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. In all other cases you will get 401 response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system).</param>
        /// <param name="userId">Enlighten ID of the user which you want to grant access.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GrantActivationUserAccessResponse</returns>
        GrantActivationUserAccessResponse GrantActivationUserAccess(int activationId, int userId, int operationIndex = 0);

        /// <summary>
        /// Grant Access
        /// </summary>
        /// <remarks>
        /// Gives a user permission to view this system. Response status 200 indicates the access was granted. The user must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. In all other cases you will get 401 response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system).</param>
        /// <param name="userId">Enlighten ID of the user which you want to grant access.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GrantActivationUserAccessResponse</returns>
        ApiResponse<GrantActivationUserAccessResponse> GrantActivationUserAccessWithHttpInfo(int activationId, int userId, int operationIndex = 0);
        /// <summary>
        /// Revoke Access
        /// </summary>
        /// <remarks>
        /// Revokes a user&#39;s permission to view this system. Response status 200 indicates the access was revoked. The user must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. In all other cases you will get 401 response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system).</param>
        /// <param name="userId">Enlighten ID of the user which you want to revoke the access.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RevokeActivationUserAccessResponse</returns>
        RevokeActivationUserAccessResponse RevokeActivationUserAccess(int activationId, int userId, int operationIndex = 0);

        /// <summary>
        /// Revoke Access
        /// </summary>
        /// <remarks>
        /// Revokes a user&#39;s permission to view this system. Response status 200 indicates the access was revoked. The user must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. In all other cases you will get 401 response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system).</param>
        /// <param name="userId">Enlighten ID of the user which you want to revoke the access.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RevokeActivationUserAccessResponse</returns>
        ApiResponse<RevokeActivationUserAccessResponse> RevokeActivationUserAccessWithHttpInfo(int activationId, int userId, int operationIndex = 0);
        /// <summary>
        /// Set production mode
        /// </summary>
        /// <remarks>
        /// Enable or Disable production mode for a particular system. For that system stage must be greater than 2, Otherwise you will get 422.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetActivationOpsProductionModeResponse</returns>
        SetActivationOpsProductionModeResponse SetActivationOpsProductionMode(int activationId, SetActivationOpsProductionModeRequest _params = default(SetActivationOpsProductionModeRequest), int operationIndex = 0);

        /// <summary>
        /// Set production mode
        /// </summary>
        /// <remarks>
        /// Enable or Disable production mode for a particular system. For that system stage must be greater than 2, Otherwise you will get 422.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetActivationOpsProductionModeResponse</returns>
        ApiResponse<SetActivationOpsProductionModeResponse> SetActivationOpsProductionModeWithHttpInfo(int activationId, SetActivationOpsProductionModeRequest _params = default(SetActivationOpsProductionModeRequest), int operationIndex = 0);
        /// <summary>
        /// Update an activation.
        /// </summary>
        /// <remarks>
        /// Update an activation.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Activation</returns>
        Activation UpdatePartnerActivation(int activationId, SystemParams _params = default(SystemParams), int operationIndex = 0);

        /// <summary>
        /// Update an activation.
        /// </summary>
        /// <remarks>
        /// Update an activation.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Activation</returns>
        ApiResponse<Activation> UpdatePartnerActivationWithHttpInfo(int activationId, SystemParams _params = default(SystemParams), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IActivationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create new activation
        /// </summary>
        /// <remarks>
        /// Create new activation.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Activation</returns>
        System.Threading.Tasks.Task<Activation> CreatePartnerActivationAsync(SystemParams _params = default(SystemParams), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create new activation
        /// </summary>
        /// <remarks>
        /// Create new activation.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Activation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Activation>> CreatePartnerActivationWithHttpInfoAsync(SystemParams _params = default(SystemParams), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an activation by ID
        /// </summary>
        /// <remarks>
        /// To delete an activation, the activation stage must be less than 3 and there are no active devices associated with it.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteActivationResponse</returns>
        System.Threading.Tasks.Task<DeleteActivationResponse> DeleteActivationAsync(int activationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an activation by ID
        /// </summary>
        /// <remarks>
        /// To delete an activation, the activation stage must be less than 3 and there are no active devices associated with it.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteActivationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteActivationResponse>> DeleteActivationWithHttpInfoAsync(int activationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get production mode
        /// </summary>
        /// <remarks>
        /// Get production mode for a particular system. For that system stage must be greater than 2, Otherwise you will get 422.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetActivationOpsProductionModeResponse</returns>
        System.Threading.Tasks.Task<GetActivationOpsProductionModeResponse> GetActivationOpsProductionModeAsync(int activationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get production mode
        /// </summary>
        /// <remarks>
        /// Get production mode for a particular system. For that system stage must be greater than 2, Otherwise you will get 422.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetActivationOpsProductionModeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetActivationOpsProductionModeResponse>> GetActivationOpsProductionModeWithHttpInfoAsync(int activationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves an Activation by ID
        /// </summary>
        /// <remarks>
        /// By default, the body of the response looks like the example below. However, you can choose to retrieve more information about the activation using response expansion, for example instead of returning only the owner&#39;s name within the system hash, the response includes detailed information about the owner by using expand&#x3D;owner. You can also expand the owner&#39;s company by using expand&#x3D;owner.company. The response now includes information about the owner and the company he belongs to, if any. By using expand&#x3D;host will include details about the system host. You can also expand the host&#39;s company by using expand&#x3D;host.company. The response now includes information about the host and the company he belongs to.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="expand">Retrieve more information about the activation. The expand query parameter is a comma-separated list of associations to expand. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Activation</returns>
        System.Threading.Tasks.Task<Activation> GetPartnerActivationAsync(int activationId, SystemExpandEnum? expand = default(SystemExpandEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves an Activation by ID
        /// </summary>
        /// <remarks>
        /// By default, the body of the response looks like the example below. However, you can choose to retrieve more information about the activation using response expansion, for example instead of returning only the owner&#39;s name within the system hash, the response includes detailed information about the owner by using expand&#x3D;owner. You can also expand the owner&#39;s company by using expand&#x3D;owner.company. The response now includes information about the owner and the company he belongs to, if any. By using expand&#x3D;host will include details about the system host. You can also expand the host&#39;s company by using expand&#x3D;host.company. The response now includes information about the host and the company he belongs to.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="expand">Retrieve more information about the activation. The expand query parameter is a comma-separated list of associations to expand. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Activation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Activation>> GetPartnerActivationWithHttpInfoAsync(int activationId, SystemExpandEnum? expand = default(SystemExpandEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of Activations
        /// </summary>
        /// <remarks>
        /// Returns a list of activations for which the user can make API requests. There is a limit to the number of activations which can be returned at one time. If the first request does not return a full list, use the &#39;next&#39; attribute in the response body to request the next page. By default, activations are returned in batches of 100. The maximum page size is 1000. Provide only valid filters. During filter the activations empty and invalid filter fields are ignored. In case the installer ID doesn&#39;t exist, API will return an empty array.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="next">If the first request does not return a full list, use the &#39;next&#39; attribute in the response body to request the next page. By default, activations are returned in batches of 100. The maximum page size is 1000. If the returned list below the limit, then response does not include the &#39;next&#39; field. (optional)</param>
        /// <param name="limit">There is a limit to the number of activations which can be returned at one time. (optional)</param>
        /// <param name="stage">Filter activations by stage. Passing in_progress alone will consider as you have passed all the 1,2,3,4 stages. Passing multiple stage values using comma to filter. E.g. stage&#x3D;1,2,3. Passing in_progress with any other combination will give you empty systems. This parameter searches for an exact match of the input value. (optional)</param>
        /// <param name="reference">Filter activations by company reference. (optional)</param>
        /// <param name="installerId">Filter activations by installer ID. (optional)</param>
        /// <param name="systemName">Filter activations by system name. (optional)</param>
        /// <param name="address">Filter activations by address. This will perform a partial search and return if match found with street1, street2, country, state, zipcode of the activation. (optional)</param>
        /// <param name="region">Filter activations by region. Provide two latitude, longitude values to find activations between them. Format &#39;latitude1,longitude1,latitude2,longitude2&#39; e.g value &#39;44.968046,-94.420307,44.33328,-89.132008&#39;. (optional)</param>
        /// <param name="search">Filter activations by search. This will perform a partial search and return if match found with system_name, reference, system_id, street1 and street2, country, state, zipcode of the activation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPartnerActivationsResponse</returns>
        System.Threading.Tasks.Task<GetPartnerActivationsResponse> GetPartnerActivationsAsync(string next = default(string), int? limit = default(int?), SystemStageEnum? stage = default(SystemStageEnum?), string reference = default(string), int? installerId = default(int?), string systemName = default(string), string address = default(string), string region = default(string), string search = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of Activations
        /// </summary>
        /// <remarks>
        /// Returns a list of activations for which the user can make API requests. There is a limit to the number of activations which can be returned at one time. If the first request does not return a full list, use the &#39;next&#39; attribute in the response body to request the next page. By default, activations are returned in batches of 100. The maximum page size is 1000. Provide only valid filters. During filter the activations empty and invalid filter fields are ignored. In case the installer ID doesn&#39;t exist, API will return an empty array.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="next">If the first request does not return a full list, use the &#39;next&#39; attribute in the response body to request the next page. By default, activations are returned in batches of 100. The maximum page size is 1000. If the returned list below the limit, then response does not include the &#39;next&#39; field. (optional)</param>
        /// <param name="limit">There is a limit to the number of activations which can be returned at one time. (optional)</param>
        /// <param name="stage">Filter activations by stage. Passing in_progress alone will consider as you have passed all the 1,2,3,4 stages. Passing multiple stage values using comma to filter. E.g. stage&#x3D;1,2,3. Passing in_progress with any other combination will give you empty systems. This parameter searches for an exact match of the input value. (optional)</param>
        /// <param name="reference">Filter activations by company reference. (optional)</param>
        /// <param name="installerId">Filter activations by installer ID. (optional)</param>
        /// <param name="systemName">Filter activations by system name. (optional)</param>
        /// <param name="address">Filter activations by address. This will perform a partial search and return if match found with street1, street2, country, state, zipcode of the activation. (optional)</param>
        /// <param name="region">Filter activations by region. Provide two latitude, longitude values to find activations between them. Format &#39;latitude1,longitude1,latitude2,longitude2&#39; e.g value &#39;44.968046,-94.420307,44.33328,-89.132008&#39;. (optional)</param>
        /// <param name="search">Filter activations by search. This will perform a partial search and return if match found with system_name, reference, system_id, street1 and street2, country, state, zipcode of the activation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPartnerActivationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPartnerActivationsResponse>> GetPartnerActivationsWithHttpInfoAsync(string next = default(string), int? limit = default(int?), SystemStageEnum? stage = default(SystemStageEnum?), string reference = default(string), int? installerId = default(int?), string systemName = default(string), string address = default(string), string region = default(string), string search = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Grant Access
        /// </summary>
        /// <remarks>
        /// Gives a user permission to view this system. Response status 200 indicates the access was granted. The user must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. In all other cases you will get 401 response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system).</param>
        /// <param name="userId">Enlighten ID of the user which you want to grant access.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GrantActivationUserAccessResponse</returns>
        System.Threading.Tasks.Task<GrantActivationUserAccessResponse> GrantActivationUserAccessAsync(int activationId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Grant Access
        /// </summary>
        /// <remarks>
        /// Gives a user permission to view this system. Response status 200 indicates the access was granted. The user must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. In all other cases you will get 401 response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system).</param>
        /// <param name="userId">Enlighten ID of the user which you want to grant access.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GrantActivationUserAccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GrantActivationUserAccessResponse>> GrantActivationUserAccessWithHttpInfoAsync(int activationId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Revoke Access
        /// </summary>
        /// <remarks>
        /// Revokes a user&#39;s permission to view this system. Response status 200 indicates the access was revoked. The user must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. In all other cases you will get 401 response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system).</param>
        /// <param name="userId">Enlighten ID of the user which you want to revoke the access.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RevokeActivationUserAccessResponse</returns>
        System.Threading.Tasks.Task<RevokeActivationUserAccessResponse> RevokeActivationUserAccessAsync(int activationId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Revoke Access
        /// </summary>
        /// <remarks>
        /// Revokes a user&#39;s permission to view this system. Response status 200 indicates the access was revoked. The user must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. In all other cases you will get 401 response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system).</param>
        /// <param name="userId">Enlighten ID of the user which you want to revoke the access.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RevokeActivationUserAccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RevokeActivationUserAccessResponse>> RevokeActivationUserAccessWithHttpInfoAsync(int activationId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set production mode
        /// </summary>
        /// <remarks>
        /// Enable or Disable production mode for a particular system. For that system stage must be greater than 2, Otherwise you will get 422.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetActivationOpsProductionModeResponse</returns>
        System.Threading.Tasks.Task<SetActivationOpsProductionModeResponse> SetActivationOpsProductionModeAsync(int activationId, SetActivationOpsProductionModeRequest _params = default(SetActivationOpsProductionModeRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set production mode
        /// </summary>
        /// <remarks>
        /// Enable or Disable production mode for a particular system. For that system stage must be greater than 2, Otherwise you will get 422.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetActivationOpsProductionModeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetActivationOpsProductionModeResponse>> SetActivationOpsProductionModeWithHttpInfoAsync(int activationId, SetActivationOpsProductionModeRequest _params = default(SetActivationOpsProductionModeRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an activation.
        /// </summary>
        /// <remarks>
        /// Update an activation.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Activation</returns>
        System.Threading.Tasks.Task<Activation> UpdatePartnerActivationAsync(int activationId, SystemParams _params = default(SystemParams), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an activation.
        /// </summary>
        /// <remarks>
        /// Update an activation.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Activation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Activation>> UpdatePartnerActivationWithHttpInfoAsync(int activationId, SystemParams _params = default(SystemParams), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IActivationsApi : IActivationsApiSync, IActivationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ActivationsApi : IActivationsApi
    {
        private EnphaseOpenAPI.Commissioning.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ActivationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ActivationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActivationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ActivationsApi(string basePath)
        {
            this.Configuration = EnphaseOpenAPI.Commissioning.Client.Configuration.MergeConfigurations(
                EnphaseOpenAPI.Commissioning.Client.GlobalConfiguration.Instance,
                new EnphaseOpenAPI.Commissioning.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EnphaseOpenAPI.Commissioning.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnphaseOpenAPI.Commissioning.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EnphaseOpenAPI.Commissioning.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActivationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ActivationsApi(EnphaseOpenAPI.Commissioning.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EnphaseOpenAPI.Commissioning.Client.Configuration.MergeConfigurations(
                EnphaseOpenAPI.Commissioning.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EnphaseOpenAPI.Commissioning.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnphaseOpenAPI.Commissioning.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EnphaseOpenAPI.Commissioning.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActivationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ActivationsApi(EnphaseOpenAPI.Commissioning.Client.ISynchronousClient client, EnphaseOpenAPI.Commissioning.Client.IAsynchronousClient asyncClient, EnphaseOpenAPI.Commissioning.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EnphaseOpenAPI.Commissioning.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EnphaseOpenAPI.Commissioning.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EnphaseOpenAPI.Commissioning.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EnphaseOpenAPI.Commissioning.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EnphaseOpenAPI.Commissioning.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create new activation Create new activation.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Activation</returns>
        public Activation CreatePartnerActivation(SystemParams _params = default(SystemParams), int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<Activation> localVarResponse = CreatePartnerActivationWithHttpInfo(_params);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new activation Create new activation.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Activation</returns>
        public EnphaseOpenAPI.Commissioning.Client.ApiResponse<Activation> CreatePartnerActivationWithHttpInfo(SystemParams _params = default(SystemParams), int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = _params;

            localVarRequestOptions.Operation = "ActivationsApi.CreatePartnerActivation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Activation>("/partner/activations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePartnerActivation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new activation Create new activation.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Activation</returns>
        public async System.Threading.Tasks.Task<Activation> CreatePartnerActivationAsync(SystemParams _params = default(SystemParams), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<Activation> localVarResponse = await CreatePartnerActivationWithHttpInfoAsync(_params, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new activation Create new activation.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Activation)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Commissioning.Client.ApiResponse<Activation>> CreatePartnerActivationWithHttpInfoAsync(SystemParams _params = default(SystemParams), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = _params;

            localVarRequestOptions.Operation = "ActivationsApi.CreatePartnerActivation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Activation>("/partner/activations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePartnerActivation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an activation by ID To delete an activation, the activation stage must be less than 3 and there are no active devices associated with it.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteActivationResponse</returns>
        public DeleteActivationResponse DeleteActivation(int activationId, int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<DeleteActivationResponse> localVarResponse = DeleteActivationWithHttpInfo(activationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an activation by ID To delete an activation, the activation stage must be less than 3 and there are no active devices associated with it.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteActivationResponse</returns>
        public EnphaseOpenAPI.Commissioning.Client.ApiResponse<DeleteActivationResponse> DeleteActivationWithHttpInfo(int activationId, int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activation_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(activationId)); // path parameter

            localVarRequestOptions.Operation = "ActivationsApi.DeleteActivation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteActivationResponse>("/partner/activations/{activation_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteActivation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an activation by ID To delete an activation, the activation stage must be less than 3 and there are no active devices associated with it.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteActivationResponse</returns>
        public async System.Threading.Tasks.Task<DeleteActivationResponse> DeleteActivationAsync(int activationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<DeleteActivationResponse> localVarResponse = await DeleteActivationWithHttpInfoAsync(activationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an activation by ID To delete an activation, the activation stage must be less than 3 and there are no active devices associated with it.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteActivationResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Commissioning.Client.ApiResponse<DeleteActivationResponse>> DeleteActivationWithHttpInfoAsync(int activationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activation_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(activationId)); // path parameter

            localVarRequestOptions.Operation = "ActivationsApi.DeleteActivation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteActivationResponse>("/partner/activations/{activation_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteActivation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get production mode Get production mode for a particular system. For that system stage must be greater than 2, Otherwise you will get 422.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetActivationOpsProductionModeResponse</returns>
        public GetActivationOpsProductionModeResponse GetActivationOpsProductionMode(int activationId, int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<GetActivationOpsProductionModeResponse> localVarResponse = GetActivationOpsProductionModeWithHttpInfo(activationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get production mode Get production mode for a particular system. For that system stage must be greater than 2, Otherwise you will get 422.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetActivationOpsProductionModeResponse</returns>
        public EnphaseOpenAPI.Commissioning.Client.ApiResponse<GetActivationOpsProductionModeResponse> GetActivationOpsProductionModeWithHttpInfo(int activationId, int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activation_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(activationId)); // path parameter

            localVarRequestOptions.Operation = "ActivationsApi.GetActivationOpsProductionMode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetActivationOpsProductionModeResponse>("/activations/{activation_id}/ops/production_mode", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActivationOpsProductionMode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get production mode Get production mode for a particular system. For that system stage must be greater than 2, Otherwise you will get 422.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetActivationOpsProductionModeResponse</returns>
        public async System.Threading.Tasks.Task<GetActivationOpsProductionModeResponse> GetActivationOpsProductionModeAsync(int activationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<GetActivationOpsProductionModeResponse> localVarResponse = await GetActivationOpsProductionModeWithHttpInfoAsync(activationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get production mode Get production mode for a particular system. For that system stage must be greater than 2, Otherwise you will get 422.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetActivationOpsProductionModeResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Commissioning.Client.ApiResponse<GetActivationOpsProductionModeResponse>> GetActivationOpsProductionModeWithHttpInfoAsync(int activationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activation_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(activationId)); // path parameter

            localVarRequestOptions.Operation = "ActivationsApi.GetActivationOpsProductionMode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetActivationOpsProductionModeResponse>("/activations/{activation_id}/ops/production_mode", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActivationOpsProductionMode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves an Activation by ID By default, the body of the response looks like the example below. However, you can choose to retrieve more information about the activation using response expansion, for example instead of returning only the owner&#39;s name within the system hash, the response includes detailed information about the owner by using expand&#x3D;owner. You can also expand the owner&#39;s company by using expand&#x3D;owner.company. The response now includes information about the owner and the company he belongs to, if any. By using expand&#x3D;host will include details about the system host. You can also expand the host&#39;s company by using expand&#x3D;host.company. The response now includes information about the host and the company he belongs to.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="expand">Retrieve more information about the activation. The expand query parameter is a comma-separated list of associations to expand. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Activation</returns>
        public Activation GetPartnerActivation(int activationId, SystemExpandEnum? expand = default(SystemExpandEnum?), int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<Activation> localVarResponse = GetPartnerActivationWithHttpInfo(activationId, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves an Activation by ID By default, the body of the response looks like the example below. However, you can choose to retrieve more information about the activation using response expansion, for example instead of returning only the owner&#39;s name within the system hash, the response includes detailed information about the owner by using expand&#x3D;owner. You can also expand the owner&#39;s company by using expand&#x3D;owner.company. The response now includes information about the owner and the company he belongs to, if any. By using expand&#x3D;host will include details about the system host. You can also expand the host&#39;s company by using expand&#x3D;host.company. The response now includes information about the host and the company he belongs to.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="expand">Retrieve more information about the activation. The expand query parameter is a comma-separated list of associations to expand. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Activation</returns>
        public EnphaseOpenAPI.Commissioning.Client.ApiResponse<Activation> GetPartnerActivationWithHttpInfo(int activationId, SystemExpandEnum? expand = default(SystemExpandEnum?), int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activation_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(activationId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "ActivationsApi.GetPartnerActivation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Activation>("/partner/activations/{activation_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPartnerActivation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves an Activation by ID By default, the body of the response looks like the example below. However, you can choose to retrieve more information about the activation using response expansion, for example instead of returning only the owner&#39;s name within the system hash, the response includes detailed information about the owner by using expand&#x3D;owner. You can also expand the owner&#39;s company by using expand&#x3D;owner.company. The response now includes information about the owner and the company he belongs to, if any. By using expand&#x3D;host will include details about the system host. You can also expand the host&#39;s company by using expand&#x3D;host.company. The response now includes information about the host and the company he belongs to.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="expand">Retrieve more information about the activation. The expand query parameter is a comma-separated list of associations to expand. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Activation</returns>
        public async System.Threading.Tasks.Task<Activation> GetPartnerActivationAsync(int activationId, SystemExpandEnum? expand = default(SystemExpandEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<Activation> localVarResponse = await GetPartnerActivationWithHttpInfoAsync(activationId, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves an Activation by ID By default, the body of the response looks like the example below. However, you can choose to retrieve more information about the activation using response expansion, for example instead of returning only the owner&#39;s name within the system hash, the response includes detailed information about the owner by using expand&#x3D;owner. You can also expand the owner&#39;s company by using expand&#x3D;owner.company. The response now includes information about the owner and the company he belongs to, if any. By using expand&#x3D;host will include details about the system host. You can also expand the host&#39;s company by using expand&#x3D;host.company. The response now includes information about the host and the company he belongs to.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="expand">Retrieve more information about the activation. The expand query parameter is a comma-separated list of associations to expand. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Activation)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Commissioning.Client.ApiResponse<Activation>> GetPartnerActivationWithHttpInfoAsync(int activationId, SystemExpandEnum? expand = default(SystemExpandEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activation_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(activationId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "ActivationsApi.GetPartnerActivation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Activation>("/partner/activations/{activation_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPartnerActivation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of Activations Returns a list of activations for which the user can make API requests. There is a limit to the number of activations which can be returned at one time. If the first request does not return a full list, use the &#39;next&#39; attribute in the response body to request the next page. By default, activations are returned in batches of 100. The maximum page size is 1000. Provide only valid filters. During filter the activations empty and invalid filter fields are ignored. In case the installer ID doesn&#39;t exist, API will return an empty array.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="next">If the first request does not return a full list, use the &#39;next&#39; attribute in the response body to request the next page. By default, activations are returned in batches of 100. The maximum page size is 1000. If the returned list below the limit, then response does not include the &#39;next&#39; field. (optional)</param>
        /// <param name="limit">There is a limit to the number of activations which can be returned at one time. (optional)</param>
        /// <param name="stage">Filter activations by stage. Passing in_progress alone will consider as you have passed all the 1,2,3,4 stages. Passing multiple stage values using comma to filter. E.g. stage&#x3D;1,2,3. Passing in_progress with any other combination will give you empty systems. This parameter searches for an exact match of the input value. (optional)</param>
        /// <param name="reference">Filter activations by company reference. (optional)</param>
        /// <param name="installerId">Filter activations by installer ID. (optional)</param>
        /// <param name="systemName">Filter activations by system name. (optional)</param>
        /// <param name="address">Filter activations by address. This will perform a partial search and return if match found with street1, street2, country, state, zipcode of the activation. (optional)</param>
        /// <param name="region">Filter activations by region. Provide two latitude, longitude values to find activations between them. Format &#39;latitude1,longitude1,latitude2,longitude2&#39; e.g value &#39;44.968046,-94.420307,44.33328,-89.132008&#39;. (optional)</param>
        /// <param name="search">Filter activations by search. This will perform a partial search and return if match found with system_name, reference, system_id, street1 and street2, country, state, zipcode of the activation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPartnerActivationsResponse</returns>
        public GetPartnerActivationsResponse GetPartnerActivations(string next = default(string), int? limit = default(int?), SystemStageEnum? stage = default(SystemStageEnum?), string reference = default(string), int? installerId = default(int?), string systemName = default(string), string address = default(string), string region = default(string), string search = default(string), int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<GetPartnerActivationsResponse> localVarResponse = GetPartnerActivationsWithHttpInfo(next, limit, stage, reference, installerId, systemName, address, region, search);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of Activations Returns a list of activations for which the user can make API requests. There is a limit to the number of activations which can be returned at one time. If the first request does not return a full list, use the &#39;next&#39; attribute in the response body to request the next page. By default, activations are returned in batches of 100. The maximum page size is 1000. Provide only valid filters. During filter the activations empty and invalid filter fields are ignored. In case the installer ID doesn&#39;t exist, API will return an empty array.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="next">If the first request does not return a full list, use the &#39;next&#39; attribute in the response body to request the next page. By default, activations are returned in batches of 100. The maximum page size is 1000. If the returned list below the limit, then response does not include the &#39;next&#39; field. (optional)</param>
        /// <param name="limit">There is a limit to the number of activations which can be returned at one time. (optional)</param>
        /// <param name="stage">Filter activations by stage. Passing in_progress alone will consider as you have passed all the 1,2,3,4 stages. Passing multiple stage values using comma to filter. E.g. stage&#x3D;1,2,3. Passing in_progress with any other combination will give you empty systems. This parameter searches for an exact match of the input value. (optional)</param>
        /// <param name="reference">Filter activations by company reference. (optional)</param>
        /// <param name="installerId">Filter activations by installer ID. (optional)</param>
        /// <param name="systemName">Filter activations by system name. (optional)</param>
        /// <param name="address">Filter activations by address. This will perform a partial search and return if match found with street1, street2, country, state, zipcode of the activation. (optional)</param>
        /// <param name="region">Filter activations by region. Provide two latitude, longitude values to find activations between them. Format &#39;latitude1,longitude1,latitude2,longitude2&#39; e.g value &#39;44.968046,-94.420307,44.33328,-89.132008&#39;. (optional)</param>
        /// <param name="search">Filter activations by search. This will perform a partial search and return if match found with system_name, reference, system_id, street1 and street2, country, state, zipcode of the activation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPartnerActivationsResponse</returns>
        public EnphaseOpenAPI.Commissioning.Client.ApiResponse<GetPartnerActivationsResponse> GetPartnerActivationsWithHttpInfo(string next = default(string), int? limit = default(int?), SystemStageEnum? stage = default(SystemStageEnum?), string reference = default(string), int? installerId = default(int?), string systemName = default(string), string address = default(string), string region = default(string), string search = default(string), int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (next != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "next", next));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (stage != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "stage", stage));
            }
            if (reference != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "reference", reference));
            }
            if (installerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "installer_id", installerId));
            }
            if (systemName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "system_name", systemName));
            }
            if (address != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "address", address));
            }
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }

            localVarRequestOptions.Operation = "ActivationsApi.GetPartnerActivations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetPartnerActivationsResponse>("/partner/activations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPartnerActivations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of Activations Returns a list of activations for which the user can make API requests. There is a limit to the number of activations which can be returned at one time. If the first request does not return a full list, use the &#39;next&#39; attribute in the response body to request the next page. By default, activations are returned in batches of 100. The maximum page size is 1000. Provide only valid filters. During filter the activations empty and invalid filter fields are ignored. In case the installer ID doesn&#39;t exist, API will return an empty array.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="next">If the first request does not return a full list, use the &#39;next&#39; attribute in the response body to request the next page. By default, activations are returned in batches of 100. The maximum page size is 1000. If the returned list below the limit, then response does not include the &#39;next&#39; field. (optional)</param>
        /// <param name="limit">There is a limit to the number of activations which can be returned at one time. (optional)</param>
        /// <param name="stage">Filter activations by stage. Passing in_progress alone will consider as you have passed all the 1,2,3,4 stages. Passing multiple stage values using comma to filter. E.g. stage&#x3D;1,2,3. Passing in_progress with any other combination will give you empty systems. This parameter searches for an exact match of the input value. (optional)</param>
        /// <param name="reference">Filter activations by company reference. (optional)</param>
        /// <param name="installerId">Filter activations by installer ID. (optional)</param>
        /// <param name="systemName">Filter activations by system name. (optional)</param>
        /// <param name="address">Filter activations by address. This will perform a partial search and return if match found with street1, street2, country, state, zipcode of the activation. (optional)</param>
        /// <param name="region">Filter activations by region. Provide two latitude, longitude values to find activations between them. Format &#39;latitude1,longitude1,latitude2,longitude2&#39; e.g value &#39;44.968046,-94.420307,44.33328,-89.132008&#39;. (optional)</param>
        /// <param name="search">Filter activations by search. This will perform a partial search and return if match found with system_name, reference, system_id, street1 and street2, country, state, zipcode of the activation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPartnerActivationsResponse</returns>
        public async System.Threading.Tasks.Task<GetPartnerActivationsResponse> GetPartnerActivationsAsync(string next = default(string), int? limit = default(int?), SystemStageEnum? stage = default(SystemStageEnum?), string reference = default(string), int? installerId = default(int?), string systemName = default(string), string address = default(string), string region = default(string), string search = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<GetPartnerActivationsResponse> localVarResponse = await GetPartnerActivationsWithHttpInfoAsync(next, limit, stage, reference, installerId, systemName, address, region, search, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of Activations Returns a list of activations for which the user can make API requests. There is a limit to the number of activations which can be returned at one time. If the first request does not return a full list, use the &#39;next&#39; attribute in the response body to request the next page. By default, activations are returned in batches of 100. The maximum page size is 1000. Provide only valid filters. During filter the activations empty and invalid filter fields are ignored. In case the installer ID doesn&#39;t exist, API will return an empty array.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="next">If the first request does not return a full list, use the &#39;next&#39; attribute in the response body to request the next page. By default, activations are returned in batches of 100. The maximum page size is 1000. If the returned list below the limit, then response does not include the &#39;next&#39; field. (optional)</param>
        /// <param name="limit">There is a limit to the number of activations which can be returned at one time. (optional)</param>
        /// <param name="stage">Filter activations by stage. Passing in_progress alone will consider as you have passed all the 1,2,3,4 stages. Passing multiple stage values using comma to filter. E.g. stage&#x3D;1,2,3. Passing in_progress with any other combination will give you empty systems. This parameter searches for an exact match of the input value. (optional)</param>
        /// <param name="reference">Filter activations by company reference. (optional)</param>
        /// <param name="installerId">Filter activations by installer ID. (optional)</param>
        /// <param name="systemName">Filter activations by system name. (optional)</param>
        /// <param name="address">Filter activations by address. This will perform a partial search and return if match found with street1, street2, country, state, zipcode of the activation. (optional)</param>
        /// <param name="region">Filter activations by region. Provide two latitude, longitude values to find activations between them. Format &#39;latitude1,longitude1,latitude2,longitude2&#39; e.g value &#39;44.968046,-94.420307,44.33328,-89.132008&#39;. (optional)</param>
        /// <param name="search">Filter activations by search. This will perform a partial search and return if match found with system_name, reference, system_id, street1 and street2, country, state, zipcode of the activation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPartnerActivationsResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Commissioning.Client.ApiResponse<GetPartnerActivationsResponse>> GetPartnerActivationsWithHttpInfoAsync(string next = default(string), int? limit = default(int?), SystemStageEnum? stage = default(SystemStageEnum?), string reference = default(string), int? installerId = default(int?), string systemName = default(string), string address = default(string), string region = default(string), string search = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (next != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "next", next));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (stage != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "stage", stage));
            }
            if (reference != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "reference", reference));
            }
            if (installerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "installer_id", installerId));
            }
            if (systemName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "system_name", systemName));
            }
            if (address != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "address", address));
            }
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }

            localVarRequestOptions.Operation = "ActivationsApi.GetPartnerActivations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetPartnerActivationsResponse>("/partner/activations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPartnerActivations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Grant Access Gives a user permission to view this system. Response status 200 indicates the access was granted. The user must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. In all other cases you will get 401 response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system).</param>
        /// <param name="userId">Enlighten ID of the user which you want to grant access.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GrantActivationUserAccessResponse</returns>
        public GrantActivationUserAccessResponse GrantActivationUserAccess(int activationId, int userId, int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<GrantActivationUserAccessResponse> localVarResponse = GrantActivationUserAccessWithHttpInfo(activationId, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Grant Access Gives a user permission to view this system. Response status 200 indicates the access was granted. The user must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. In all other cases you will get 401 response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system).</param>
        /// <param name="userId">Enlighten ID of the user which you want to grant access.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GrantActivationUserAccessResponse</returns>
        public EnphaseOpenAPI.Commissioning.Client.ApiResponse<GrantActivationUserAccessResponse> GrantActivationUserAccessWithHttpInfo(int activationId, int userId, int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activation_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(activationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "ActivationsApi.GrantActivationUserAccess";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GrantActivationUserAccessResponse>("/activations/{activation_id}/users/{user_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GrantActivationUserAccess", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Grant Access Gives a user permission to view this system. Response status 200 indicates the access was granted. The user must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. In all other cases you will get 401 response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system).</param>
        /// <param name="userId">Enlighten ID of the user which you want to grant access.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GrantActivationUserAccessResponse</returns>
        public async System.Threading.Tasks.Task<GrantActivationUserAccessResponse> GrantActivationUserAccessAsync(int activationId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<GrantActivationUserAccessResponse> localVarResponse = await GrantActivationUserAccessWithHttpInfoAsync(activationId, userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Grant Access Gives a user permission to view this system. Response status 200 indicates the access was granted. The user must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. In all other cases you will get 401 response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system).</param>
        /// <param name="userId">Enlighten ID of the user which you want to grant access.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GrantActivationUserAccessResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Commissioning.Client.ApiResponse<GrantActivationUserAccessResponse>> GrantActivationUserAccessWithHttpInfoAsync(int activationId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activation_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(activationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "ActivationsApi.GrantActivationUserAccess";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GrantActivationUserAccessResponse>("/activations/{activation_id}/users/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GrantActivationUserAccess", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke Access Revokes a user&#39;s permission to view this system. Response status 200 indicates the access was revoked. The user must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. In all other cases you will get 401 response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system).</param>
        /// <param name="userId">Enlighten ID of the user which you want to revoke the access.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RevokeActivationUserAccessResponse</returns>
        public RevokeActivationUserAccessResponse RevokeActivationUserAccess(int activationId, int userId, int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<RevokeActivationUserAccessResponse> localVarResponse = RevokeActivationUserAccessWithHttpInfo(activationId, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Revoke Access Revokes a user&#39;s permission to view this system. Response status 200 indicates the access was revoked. The user must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. In all other cases you will get 401 response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system).</param>
        /// <param name="userId">Enlighten ID of the user which you want to revoke the access.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RevokeActivationUserAccessResponse</returns>
        public EnphaseOpenAPI.Commissioning.Client.ApiResponse<RevokeActivationUserAccessResponse> RevokeActivationUserAccessWithHttpInfo(int activationId, int userId, int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activation_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(activationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "ActivationsApi.RevokeActivationUserAccess";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<RevokeActivationUserAccessResponse>("/activations/{activation_id}/users/{user_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeActivationUserAccess", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke Access Revokes a user&#39;s permission to view this system. Response status 200 indicates the access was revoked. The user must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. In all other cases you will get 401 response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system).</param>
        /// <param name="userId">Enlighten ID of the user which you want to revoke the access.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RevokeActivationUserAccessResponse</returns>
        public async System.Threading.Tasks.Task<RevokeActivationUserAccessResponse> RevokeActivationUserAccessAsync(int activationId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<RevokeActivationUserAccessResponse> localVarResponse = await RevokeActivationUserAccessWithHttpInfoAsync(activationId, userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Revoke Access Revokes a user&#39;s permission to view this system. Response status 200 indicates the access was revoked. The user must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. In all other cases you will get 401 response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system).</param>
        /// <param name="userId">Enlighten ID of the user which you want to revoke the access.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RevokeActivationUserAccessResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Commissioning.Client.ApiResponse<RevokeActivationUserAccessResponse>> RevokeActivationUserAccessWithHttpInfoAsync(int activationId, int userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activation_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(activationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "ActivationsApi.RevokeActivationUserAccess";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<RevokeActivationUserAccessResponse>("/activations/{activation_id}/users/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeActivationUserAccess", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set production mode Enable or Disable production mode for a particular system. For that system stage must be greater than 2, Otherwise you will get 422.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetActivationOpsProductionModeResponse</returns>
        public SetActivationOpsProductionModeResponse SetActivationOpsProductionMode(int activationId, SetActivationOpsProductionModeRequest _params = default(SetActivationOpsProductionModeRequest), int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<SetActivationOpsProductionModeResponse> localVarResponse = SetActivationOpsProductionModeWithHttpInfo(activationId, _params);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set production mode Enable or Disable production mode for a particular system. For that system stage must be greater than 2, Otherwise you will get 422.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetActivationOpsProductionModeResponse</returns>
        public EnphaseOpenAPI.Commissioning.Client.ApiResponse<SetActivationOpsProductionModeResponse> SetActivationOpsProductionModeWithHttpInfo(int activationId, SetActivationOpsProductionModeRequest _params = default(SetActivationOpsProductionModeRequest), int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activation_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(activationId)); // path parameter
            localVarRequestOptions.Data = _params;

            localVarRequestOptions.Operation = "ActivationsApi.SetActivationOpsProductionMode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SetActivationOpsProductionModeResponse>("/activations/{activation_id}/ops/production_mode", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetActivationOpsProductionMode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set production mode Enable or Disable production mode for a particular system. For that system stage must be greater than 2, Otherwise you will get 422.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetActivationOpsProductionModeResponse</returns>
        public async System.Threading.Tasks.Task<SetActivationOpsProductionModeResponse> SetActivationOpsProductionModeAsync(int activationId, SetActivationOpsProductionModeRequest _params = default(SetActivationOpsProductionModeRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<SetActivationOpsProductionModeResponse> localVarResponse = await SetActivationOpsProductionModeWithHttpInfoAsync(activationId, _params, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set production mode Enable or Disable production mode for a particular system. For that system stage must be greater than 2, Otherwise you will get 422.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetActivationOpsProductionModeResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Commissioning.Client.ApiResponse<SetActivationOpsProductionModeResponse>> SetActivationOpsProductionModeWithHttpInfoAsync(int activationId, SetActivationOpsProductionModeRequest _params = default(SetActivationOpsProductionModeRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activation_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(activationId)); // path parameter
            localVarRequestOptions.Data = _params;

            localVarRequestOptions.Operation = "ActivationsApi.SetActivationOpsProductionMode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SetActivationOpsProductionModeResponse>("/activations/{activation_id}/ops/production_mode", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetActivationOpsProductionMode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an activation. Update an activation.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Activation</returns>
        public Activation UpdatePartnerActivation(int activationId, SystemParams _params = default(SystemParams), int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<Activation> localVarResponse = UpdatePartnerActivationWithHttpInfo(activationId, _params);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an activation. Update an activation.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Activation</returns>
        public EnphaseOpenAPI.Commissioning.Client.ApiResponse<Activation> UpdatePartnerActivationWithHttpInfo(int activationId, SystemParams _params = default(SystemParams), int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activation_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(activationId)); // path parameter
            localVarRequestOptions.Data = _params;

            localVarRequestOptions.Operation = "ActivationsApi.UpdatePartnerActivation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Activation>("/partner/activations/{activation_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePartnerActivation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an activation. Update an activation.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Activation</returns>
        public async System.Threading.Tasks.Task<Activation> UpdatePartnerActivationAsync(int activationId, SystemParams _params = default(SystemParams), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<Activation> localVarResponse = await UpdatePartnerActivationWithHttpInfoAsync(activationId, _params, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an activation. Update an activation.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Activation)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Commissioning.Client.ApiResponse<Activation>> UpdatePartnerActivationWithHttpInfoAsync(int activationId, SystemParams _params = default(SystemParams), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activation_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(activationId)); // path parameter
            localVarRequestOptions.Data = _params;

            localVarRequestOptions.Operation = "ActivationsApi.UpdatePartnerActivation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Activation>("/partner/activations/{activation_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePartnerActivation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
