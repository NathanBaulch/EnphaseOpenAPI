/*
 * The Enphase Commissioning API
 *
 * Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EnphaseOpenAPI.Commissioning.Client;
using EnphaseOpenAPI.Commissioning.Client.Auth;
using EnphaseOpenAPI.Commissioning.Model;

namespace EnphaseOpenAPI.Commissioning.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the requested user
        /// </summary>
        /// <remarks>
        /// You must have access to the requested activation and user; otherwise a 401 is returned. The user is requested in the scope of an activation, then it must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="userId">Enlighten ID of the user. System-generated.</param>
        /// <param name="expand">Passing expand params in the url with valid option, then the response will contain company object fields. Otherwise the company information not include in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        User GetActivationUser(int activationId, int userId, UserExpandEnum? expand = default(UserExpandEnum?), int operationIndex = 0);

        /// <summary>
        /// Returns the requested user
        /// </summary>
        /// <remarks>
        /// You must have access to the requested activation and user; otherwise a 401 is returned. The user is requested in the scope of an activation, then it must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="userId">Enlighten ID of the user. System-generated.</param>
        /// <param name="expand">Passing expand params in the url with valid option, then the response will contain company object fields. Otherwise the company information not include in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetActivationUserWithHttpInfo(int activationId, int userId, UserExpandEnum? expand = default(UserExpandEnum?), int operationIndex = 0);
        /// <summary>
        /// Return the current logged in user detail
        /// </summary>
        /// <remarks>
        /// Return the current logged in user detail. Company details are provided in the response only if &#39;expand&#39; parameter is passed in the URL with value as company. Otherwise, company information will not be provided in the response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Passing expand params in the url with valid option, then the response will contain company object fields. Otherwise the company information will not be provided in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        User GetSelfUser(UserExpandEnum? expand = default(UserExpandEnum?), int operationIndex = 0);

        /// <summary>
        /// Return the current logged in user detail
        /// </summary>
        /// <remarks>
        /// Return the current logged in user detail. Company details are provided in the response only if &#39;expand&#39; parameter is passed in the URL with value as company. Otherwise, company information will not be provided in the response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Passing expand params in the url with valid option, then the response will contain company object fields. Otherwise the company information will not be provided in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetSelfUserWithHttpInfo(UserExpandEnum? expand = default(UserExpandEnum?), int operationIndex = 0);
        /// <summary>
        /// Returns the requested user
        /// </summary>
        /// <remarks>
        /// You must have permission to view the user. You can view yourself, users you created, and users who belong to your company or its branches. In all other cases, a 401 is returned. Company details are provided in the response only if &#39;expand&#39; parameter is passed in the URL with value as company. Otherwise, company information will not be provided in the response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID.</param>
        /// <param name="expand">Passing expand params in the url with valid option, then the response will contain company object fields. Otherwise the company information will not be provided in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        User GetUser(int userId, UserExpandEnum? expand = default(UserExpandEnum?), int operationIndex = 0);

        /// <summary>
        /// Returns the requested user
        /// </summary>
        /// <remarks>
        /// You must have permission to view the user. You can view yourself, users you created, and users who belong to your company or its branches. In all other cases, a 401 is returned. Company details are provided in the response only if &#39;expand&#39; parameter is passed in the URL with value as company. Otherwise, company information will not be provided in the response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID.</param>
        /// <param name="expand">Passing expand params in the url with valid option, then the response will contain company object fields. Otherwise the company information will not be provided in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUserWithHttpInfo(int userId, UserExpandEnum? expand = default(UserExpandEnum?), int operationIndex = 0);
        /// <summary>
        /// Search user
        /// </summary>
        /// <remarks>
        /// Returns the user ID for the given email ID only if the user exists.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address of the user. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchUsersResponse</returns>
        SearchUsersResponse SearchUsers(string email = default(string), int operationIndex = 0);

        /// <summary>
        /// Search user
        /// </summary>
        /// <remarks>
        /// Returns the user ID for the given email ID only if the user exists.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address of the user. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchUsersResponse</returns>
        ApiResponse<SearchUsersResponse> SearchUsersWithHttpInfo(string email = default(string), int operationIndex = 0);
        /// <summary>
        /// Update user
        /// </summary>
        /// <remarks>
        /// You must have access to the requested activation and user; otherwise a 401 is returned. The user is requested in the scope of an activation, then it must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. When &#39;company_id&#39; is passed in the body param or the user company_id is already defined, we will not consider the &#39;enlighten_view&#39; field value and the user will become an enlighten manager. You may change a user&#39;s company if you have access to the user, the old company, and the new company.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="userId">Enlighten ID of the user. System-generated.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        User UpdateActivationUser(int activationId, int userId, UserParams _params = default(UserParams), int operationIndex = 0);

        /// <summary>
        /// Update user
        /// </summary>
        /// <remarks>
        /// You must have access to the requested activation and user; otherwise a 401 is returned. The user is requested in the scope of an activation, then it must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. When &#39;company_id&#39; is passed in the body param or the user company_id is already defined, we will not consider the &#39;enlighten_view&#39; field value and the user will become an enlighten manager. You may change a user&#39;s company if you have access to the user, the old company, and the new company.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="userId">Enlighten ID of the user. System-generated.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UpdateActivationUserWithHttpInfo(int activationId, int userId, UserParams _params = default(UserParams), int operationIndex = 0);
        /// <summary>
        /// Update user
        /// </summary>
        /// <remarks>
        /// You must have permission to view the user. You can view yourself, users you created, and users who belong to your company or its branches. In all other cases, a 401 is returned. &#39;company_id&#39; is an optional field. When you passing a &#39;company_id&#39;, the user become an enlighten manager and we will not consider &#39;enlighten_view&#39; field value. You may change a user&#39;s company if you have access to the user, the old company, and the new company.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        User UpdateUser(int userId, UserParams _params = default(UserParams), int operationIndex = 0);

        /// <summary>
        /// Update user
        /// </summary>
        /// <remarks>
        /// You must have permission to view the user. You can view yourself, users you created, and users who belong to your company or its branches. In all other cases, a 401 is returned. &#39;company_id&#39; is an optional field. When you passing a &#39;company_id&#39;, the user become an enlighten manager and we will not consider &#39;enlighten_view&#39; field value. You may change a user&#39;s company if you have access to the user, the old company, and the new company.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UpdateUserWithHttpInfo(int userId, UserParams _params = default(UserParams), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns the requested user
        /// </summary>
        /// <remarks>
        /// You must have access to the requested activation and user; otherwise a 401 is returned. The user is requested in the scope of an activation, then it must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="userId">Enlighten ID of the user. System-generated.</param>
        /// <param name="expand">Passing expand params in the url with valid option, then the response will contain company object fields. Otherwise the company information not include in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetActivationUserAsync(int activationId, int userId, UserExpandEnum? expand = default(UserExpandEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the requested user
        /// </summary>
        /// <remarks>
        /// You must have access to the requested activation and user; otherwise a 401 is returned. The user is requested in the scope of an activation, then it must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="userId">Enlighten ID of the user. System-generated.</param>
        /// <param name="expand">Passing expand params in the url with valid option, then the response will contain company object fields. Otherwise the company information not include in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetActivationUserWithHttpInfoAsync(int activationId, int userId, UserExpandEnum? expand = default(UserExpandEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return the current logged in user detail
        /// </summary>
        /// <remarks>
        /// Return the current logged in user detail. Company details are provided in the response only if &#39;expand&#39; parameter is passed in the URL with value as company. Otherwise, company information will not be provided in the response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Passing expand params in the url with valid option, then the response will contain company object fields. Otherwise the company information will not be provided in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetSelfUserAsync(UserExpandEnum? expand = default(UserExpandEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return the current logged in user detail
        /// </summary>
        /// <remarks>
        /// Return the current logged in user detail. Company details are provided in the response only if &#39;expand&#39; parameter is passed in the URL with value as company. Otherwise, company information will not be provided in the response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Passing expand params in the url with valid option, then the response will contain company object fields. Otherwise the company information will not be provided in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetSelfUserWithHttpInfoAsync(UserExpandEnum? expand = default(UserExpandEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the requested user
        /// </summary>
        /// <remarks>
        /// You must have permission to view the user. You can view yourself, users you created, and users who belong to your company or its branches. In all other cases, a 401 is returned. Company details are provided in the response only if &#39;expand&#39; parameter is passed in the URL with value as company. Otherwise, company information will not be provided in the response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID.</param>
        /// <param name="expand">Passing expand params in the url with valid option, then the response will contain company object fields. Otherwise the company information will not be provided in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUserAsync(int userId, UserExpandEnum? expand = default(UserExpandEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the requested user
        /// </summary>
        /// <remarks>
        /// You must have permission to view the user. You can view yourself, users you created, and users who belong to your company or its branches. In all other cases, a 401 is returned. Company details are provided in the response only if &#39;expand&#39; parameter is passed in the URL with value as company. Otherwise, company information will not be provided in the response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID.</param>
        /// <param name="expand">Passing expand params in the url with valid option, then the response will contain company object fields. Otherwise the company information will not be provided in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUserWithHttpInfoAsync(int userId, UserExpandEnum? expand = default(UserExpandEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search user
        /// </summary>
        /// <remarks>
        /// Returns the user ID for the given email ID only if the user exists.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address of the user. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchUsersResponse</returns>
        System.Threading.Tasks.Task<SearchUsersResponse> SearchUsersAsync(string email = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search user
        /// </summary>
        /// <remarks>
        /// Returns the user ID for the given email ID only if the user exists.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address of the user. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchUsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchUsersResponse>> SearchUsersWithHttpInfoAsync(string email = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update user
        /// </summary>
        /// <remarks>
        /// You must have access to the requested activation and user; otherwise a 401 is returned. The user is requested in the scope of an activation, then it must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. When &#39;company_id&#39; is passed in the body param or the user company_id is already defined, we will not consider the &#39;enlighten_view&#39; field value and the user will become an enlighten manager. You may change a user&#39;s company if you have access to the user, the old company, and the new company.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="userId">Enlighten ID of the user. System-generated.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UpdateActivationUserAsync(int activationId, int userId, UserParams _params = default(UserParams), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update user
        /// </summary>
        /// <remarks>
        /// You must have access to the requested activation and user; otherwise a 401 is returned. The user is requested in the scope of an activation, then it must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. When &#39;company_id&#39; is passed in the body param or the user company_id is already defined, we will not consider the &#39;enlighten_view&#39; field value and the user will become an enlighten manager. You may change a user&#39;s company if you have access to the user, the old company, and the new company.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="userId">Enlighten ID of the user. System-generated.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UpdateActivationUserWithHttpInfoAsync(int activationId, int userId, UserParams _params = default(UserParams), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update user
        /// </summary>
        /// <remarks>
        /// You must have permission to view the user. You can view yourself, users you created, and users who belong to your company or its branches. In all other cases, a 401 is returned. &#39;company_id&#39; is an optional field. When you passing a &#39;company_id&#39;, the user become an enlighten manager and we will not consider &#39;enlighten_view&#39; field value. You may change a user&#39;s company if you have access to the user, the old company, and the new company.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UpdateUserAsync(int userId, UserParams _params = default(UserParams), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update user
        /// </summary>
        /// <remarks>
        /// You must have permission to view the user. You can view yourself, users you created, and users who belong to your company or its branches. In all other cases, a 401 is returned. &#39;company_id&#39; is an optional field. When you passing a &#39;company_id&#39;, the user become an enlighten manager and we will not consider &#39;enlighten_view&#39; field value. You may change a user&#39;s company if you have access to the user, the old company, and the new company.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UpdateUserWithHttpInfoAsync(int userId, UserParams _params = default(UserParams), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IUsersApiSync, IUsersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private EnphaseOpenAPI.Commissioning.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(string basePath)
        {
            this.Configuration = EnphaseOpenAPI.Commissioning.Client.Configuration.MergeConfigurations(
                EnphaseOpenAPI.Commissioning.Client.GlobalConfiguration.Instance,
                new EnphaseOpenAPI.Commissioning.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EnphaseOpenAPI.Commissioning.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnphaseOpenAPI.Commissioning.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EnphaseOpenAPI.Commissioning.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(EnphaseOpenAPI.Commissioning.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EnphaseOpenAPI.Commissioning.Client.Configuration.MergeConfigurations(
                EnphaseOpenAPI.Commissioning.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EnphaseOpenAPI.Commissioning.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnphaseOpenAPI.Commissioning.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EnphaseOpenAPI.Commissioning.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UsersApi(EnphaseOpenAPI.Commissioning.Client.ISynchronousClient client, EnphaseOpenAPI.Commissioning.Client.IAsynchronousClient asyncClient, EnphaseOpenAPI.Commissioning.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EnphaseOpenAPI.Commissioning.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EnphaseOpenAPI.Commissioning.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EnphaseOpenAPI.Commissioning.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EnphaseOpenAPI.Commissioning.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EnphaseOpenAPI.Commissioning.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns the requested user You must have access to the requested activation and user; otherwise a 401 is returned. The user is requested in the scope of an activation, then it must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="userId">Enlighten ID of the user. System-generated.</param>
        /// <param name="expand">Passing expand params in the url with valid option, then the response will contain company object fields. Otherwise the company information not include in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        public User GetActivationUser(int activationId, int userId, UserExpandEnum? expand = default(UserExpandEnum?), int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<User> localVarResponse = GetActivationUserWithHttpInfo(activationId, userId, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the requested user You must have access to the requested activation and user; otherwise a 401 is returned. The user is requested in the scope of an activation, then it must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="userId">Enlighten ID of the user. System-generated.</param>
        /// <param name="expand">Passing expand params in the url with valid option, then the response will contain company object fields. Otherwise the company information not include in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        public EnphaseOpenAPI.Commissioning.Client.ApiResponse<User> GetActivationUserWithHttpInfo(int activationId, int userId, UserExpandEnum? expand = default(UserExpandEnum?), int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activation_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(activationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "UsersApi.GetActivationUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<User>("/activations/{activation_id}/users/{user_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActivationUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the requested user You must have access to the requested activation and user; otherwise a 401 is returned. The user is requested in the scope of an activation, then it must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="userId">Enlighten ID of the user. System-generated.</param>
        /// <param name="expand">Passing expand params in the url with valid option, then the response will contain company object fields. Otherwise the company information not include in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetActivationUserAsync(int activationId, int userId, UserExpandEnum? expand = default(UserExpandEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<User> localVarResponse = await GetActivationUserWithHttpInfoAsync(activationId, userId, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the requested user You must have access to the requested activation and user; otherwise a 401 is returned. The user is requested in the scope of an activation, then it must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="userId">Enlighten ID of the user. System-generated.</param>
        /// <param name="expand">Passing expand params in the url with valid option, then the response will contain company object fields. Otherwise the company information not include in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Commissioning.Client.ApiResponse<User>> GetActivationUserWithHttpInfoAsync(int activationId, int userId, UserExpandEnum? expand = default(UserExpandEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activation_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(activationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "UsersApi.GetActivationUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<User>("/activations/{activation_id}/users/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActivationUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the current logged in user detail Return the current logged in user detail. Company details are provided in the response only if &#39;expand&#39; parameter is passed in the URL with value as company. Otherwise, company information will not be provided in the response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Passing expand params in the url with valid option, then the response will contain company object fields. Otherwise the company information will not be provided in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        public User GetSelfUser(UserExpandEnum? expand = default(UserExpandEnum?), int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<User> localVarResponse = GetSelfUserWithHttpInfo(expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the current logged in user detail Return the current logged in user detail. Company details are provided in the response only if &#39;expand&#39; parameter is passed in the URL with value as company. Otherwise, company information will not be provided in the response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Passing expand params in the url with valid option, then the response will contain company object fields. Otherwise the company information will not be provided in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        public EnphaseOpenAPI.Commissioning.Client.ApiResponse<User> GetSelfUserWithHttpInfo(UserExpandEnum? expand = default(UserExpandEnum?), int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "UsersApi.GetSelfUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<User>("/users/self", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSelfUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the current logged in user detail Return the current logged in user detail. Company details are provided in the response only if &#39;expand&#39; parameter is passed in the URL with value as company. Otherwise, company information will not be provided in the response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Passing expand params in the url with valid option, then the response will contain company object fields. Otherwise the company information will not be provided in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetSelfUserAsync(UserExpandEnum? expand = default(UserExpandEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<User> localVarResponse = await GetSelfUserWithHttpInfoAsync(expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the current logged in user detail Return the current logged in user detail. Company details are provided in the response only if &#39;expand&#39; parameter is passed in the URL with value as company. Otherwise, company information will not be provided in the response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Passing expand params in the url with valid option, then the response will contain company object fields. Otherwise the company information will not be provided in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Commissioning.Client.ApiResponse<User>> GetSelfUserWithHttpInfoAsync(UserExpandEnum? expand = default(UserExpandEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "UsersApi.GetSelfUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<User>("/users/self", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSelfUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the requested user You must have permission to view the user. You can view yourself, users you created, and users who belong to your company or its branches. In all other cases, a 401 is returned. Company details are provided in the response only if &#39;expand&#39; parameter is passed in the URL with value as company. Otherwise, company information will not be provided in the response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID.</param>
        /// <param name="expand">Passing expand params in the url with valid option, then the response will contain company object fields. Otherwise the company information will not be provided in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        public User GetUser(int userId, UserExpandEnum? expand = default(UserExpandEnum?), int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<User> localVarResponse = GetUserWithHttpInfo(userId, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the requested user You must have permission to view the user. You can view yourself, users you created, and users who belong to your company or its branches. In all other cases, a 401 is returned. Company details are provided in the response only if &#39;expand&#39; parameter is passed in the URL with value as company. Otherwise, company information will not be provided in the response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID.</param>
        /// <param name="expand">Passing expand params in the url with valid option, then the response will contain company object fields. Otherwise the company information will not be provided in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        public EnphaseOpenAPI.Commissioning.Client.ApiResponse<User> GetUserWithHttpInfo(int userId, UserExpandEnum? expand = default(UserExpandEnum?), int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "UsersApi.GetUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<User>("/users/{user_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the requested user You must have permission to view the user. You can view yourself, users you created, and users who belong to your company or its branches. In all other cases, a 401 is returned. Company details are provided in the response only if &#39;expand&#39; parameter is passed in the URL with value as company. Otherwise, company information will not be provided in the response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID.</param>
        /// <param name="expand">Passing expand params in the url with valid option, then the response will contain company object fields. Otherwise the company information will not be provided in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUserAsync(int userId, UserExpandEnum? expand = default(UserExpandEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<User> localVarResponse = await GetUserWithHttpInfoAsync(userId, expand, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the requested user You must have permission to view the user. You can view yourself, users you created, and users who belong to your company or its branches. In all other cases, a 401 is returned. Company details are provided in the response only if &#39;expand&#39; parameter is passed in the URL with value as company. Otherwise, company information will not be provided in the response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID.</param>
        /// <param name="expand">Passing expand params in the url with valid option, then the response will contain company object fields. Otherwise the company information will not be provided in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Commissioning.Client.ApiResponse<User>> GetUserWithHttpInfoAsync(int userId, UserExpandEnum? expand = default(UserExpandEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }

            localVarRequestOptions.Operation = "UsersApi.GetUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<User>("/users/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search user Returns the user ID for the given email ID only if the user exists.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address of the user. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchUsersResponse</returns>
        public SearchUsersResponse SearchUsers(string email = default(string), int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<SearchUsersResponse> localVarResponse = SearchUsersWithHttpInfo(email);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search user Returns the user ID for the given email ID only if the user exists.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address of the user. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchUsersResponse</returns>
        public EnphaseOpenAPI.Commissioning.Client.ApiResponse<SearchUsersResponse> SearchUsersWithHttpInfo(string email = default(string), int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }

            localVarRequestOptions.Operation = "UsersApi.SearchUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchUsersResponse>("/users/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search user Returns the user ID for the given email ID only if the user exists.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address of the user. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchUsersResponse</returns>
        public async System.Threading.Tasks.Task<SearchUsersResponse> SearchUsersAsync(string email = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<SearchUsersResponse> localVarResponse = await SearchUsersWithHttpInfoAsync(email, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search user Returns the user ID for the given email ID only if the user exists.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address of the user. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchUsersResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Commissioning.Client.ApiResponse<SearchUsersResponse>> SearchUsersWithHttpInfoAsync(string email = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }

            localVarRequestOptions.Operation = "UsersApi.SearchUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchUsersResponse>("/users/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update user You must have access to the requested activation and user; otherwise a 401 is returned. The user is requested in the scope of an activation, then it must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. When &#39;company_id&#39; is passed in the body param or the user company_id is already defined, we will not consider the &#39;enlighten_view&#39; field value and the user will become an enlighten manager. You may change a user&#39;s company if you have access to the user, the old company, and the new company.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="userId">Enlighten ID of the user. System-generated.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        public User UpdateActivationUser(int activationId, int userId, UserParams _params = default(UserParams), int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<User> localVarResponse = UpdateActivationUserWithHttpInfo(activationId, userId, _params);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update user You must have access to the requested activation and user; otherwise a 401 is returned. The user is requested in the scope of an activation, then it must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. When &#39;company_id&#39; is passed in the body param or the user company_id is already defined, we will not consider the &#39;enlighten_view&#39; field value and the user will become an enlighten manager. You may change a user&#39;s company if you have access to the user, the old company, and the new company.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="userId">Enlighten ID of the user. System-generated.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        public EnphaseOpenAPI.Commissioning.Client.ApiResponse<User> UpdateActivationUserWithHttpInfo(int activationId, int userId, UserParams _params = default(UserParams), int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activation_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(activationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = _params;

            localVarRequestOptions.Operation = "UsersApi.UpdateActivationUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<User>("/activations/{activation_id}/users/{user_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateActivationUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update user You must have access to the requested activation and user; otherwise a 401 is returned. The user is requested in the scope of an activation, then it must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. When &#39;company_id&#39; is passed in the body param or the user company_id is already defined, we will not consider the &#39;enlighten_view&#39; field value and the user will become an enlighten manager. You may change a user&#39;s company if you have access to the user, the old company, and the new company.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="userId">Enlighten ID of the user. System-generated.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UpdateActivationUserAsync(int activationId, int userId, UserParams _params = default(UserParams), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<User> localVarResponse = await UpdateActivationUserWithHttpInfoAsync(activationId, userId, _params, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update user You must have access to the requested activation and user; otherwise a 401 is returned. The user is requested in the scope of an activation, then it must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. When &#39;company_id&#39; is passed in the body param or the user company_id is already defined, we will not consider the &#39;enlighten_view&#39; field value and the user will become an enlighten manager. You may change a user&#39;s company if you have access to the user, the old company, and the new company.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Enlighten ID of the activation(system). System-generated.</param>
        /// <param name="userId">Enlighten ID of the user. System-generated.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Commissioning.Client.ApiResponse<User>> UpdateActivationUserWithHttpInfoAsync(int activationId, int userId, UserParams _params = default(UserParams), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activation_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(activationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = _params;

            localVarRequestOptions.Operation = "UsersApi.UpdateActivationUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<User>("/activations/{activation_id}/users/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateActivationUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update user You must have permission to view the user. You can view yourself, users you created, and users who belong to your company or its branches. In all other cases, a 401 is returned. &#39;company_id&#39; is an optional field. When you passing a &#39;company_id&#39;, the user become an enlighten manager and we will not consider &#39;enlighten_view&#39; field value. You may change a user&#39;s company if you have access to the user, the old company, and the new company.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        public User UpdateUser(int userId, UserParams _params = default(UserParams), int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<User> localVarResponse = UpdateUserWithHttpInfo(userId, _params);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update user You must have permission to view the user. You can view yourself, users you created, and users who belong to your company or its branches. In all other cases, a 401 is returned. &#39;company_id&#39; is an optional field. When you passing a &#39;company_id&#39;, the user become an enlighten manager and we will not consider &#39;enlighten_view&#39; field value. You may change a user&#39;s company if you have access to the user, the old company, and the new company.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        public EnphaseOpenAPI.Commissioning.Client.ApiResponse<User> UpdateUserWithHttpInfo(int userId, UserParams _params = default(UserParams), int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = _params;

            localVarRequestOptions.Operation = "UsersApi.UpdateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<User>("/users/{user_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update user You must have permission to view the user. You can view yourself, users you created, and users who belong to your company or its branches. In all other cases, a 401 is returned. &#39;company_id&#39; is an optional field. When you passing a &#39;company_id&#39;, the user become an enlighten manager and we will not consider &#39;enlighten_view&#39; field value. You may change a user&#39;s company if you have access to the user, the old company, and the new company.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UpdateUserAsync(int userId, UserParams _params = default(UserParams), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<User> localVarResponse = await UpdateUserWithHttpInfoAsync(userId, _params, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update user You must have permission to view the user. You can view yourself, users you created, and users who belong to your company or its branches. In all other cases, a 401 is returned. &#39;company_id&#39; is an optional field. When you passing a &#39;company_id&#39;, the user become an enlighten manager and we will not consider &#39;enlighten_view&#39; field value. You may change a user&#39;s company if you have access to the user, the old company, and the new company.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Commissioning.Client.ApiResponse<User>> UpdateUserWithHttpInfoAsync(int userId, UserParams _params = default(UserParams), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = _params;

            localVarRequestOptions.Operation = "UsersApi.UpdateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<User>("/users/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
