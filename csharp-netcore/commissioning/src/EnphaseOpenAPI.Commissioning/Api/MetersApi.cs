/*
 * The Enphase Commissioning API
 *
 * Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EnphaseOpenAPI.Commissioning.Client;
using EnphaseOpenAPI.Commissioning.Client.Auth;
using EnphaseOpenAPI.Commissioning.Model;

namespace EnphaseOpenAPI.Commissioning.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the requested meter detail.
        /// </summary>
        /// <remarks>
        /// Returns the requested meter by serial number. You must have access to the requested system and meter; otherwise a 401 is returned.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">System ID.</param>
        /// <param name="serialNumber">Meter serial number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemMeterResponse</returns>
        GetSystemMeterResponse GetSystemMeter(int systemId, string serialNumber, int operationIndex = 0);

        /// <summary>
        /// Returns the requested meter detail.
        /// </summary>
        /// <remarks>
        /// Returns the requested meter by serial number. You must have access to the requested system and meter; otherwise a 401 is returned.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">System ID.</param>
        /// <param name="serialNumber">Meter serial number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemMeterResponse</returns>
        ApiResponse<GetSystemMeterResponse> GetSystemMeterWithHttpInfo(int systemId, string serialNumber, int operationIndex = 0);
        /// <summary>
        /// Enable or Disable the meters.
        /// </summary>
        /// <remarks>
        /// Enable or Disable the meters. You must have access to the requested system and meter; otherwise a 401 is returned.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Activation ID.</param>
        /// <param name="serialNumber">Meter serial number.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetActivationMeterStatusResponse</returns>
        SetActivationMeterStatusResponse SetActivationMeterStatus(int activationId, string serialNumber, SetActivationMeterStatusRequest _params = default(SetActivationMeterStatusRequest), int operationIndex = 0);

        /// <summary>
        /// Enable or Disable the meters.
        /// </summary>
        /// <remarks>
        /// Enable or Disable the meters. You must have access to the requested system and meter; otherwise a 401 is returned.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Activation ID.</param>
        /// <param name="serialNumber">Meter serial number.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetActivationMeterStatusResponse</returns>
        ApiResponse<SetActivationMeterStatusResponse> SetActivationMeterStatusWithHttpInfo(int activationId, string serialNumber, SetActivationMeterStatusRequest _params = default(SetActivationMeterStatusRequest), int operationIndex = 0);
        /// <summary>
        /// Update the operational date of a meter by serial number.
        /// </summary>
        /// <remarks>
        /// Update the operational date of a meter. You must have access to the requested system and meter; otherwise a 401 is returned.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">System ID.</param>
        /// <param name="serialNumber">Meter serial number.</param>
        /// <param name="operationalDate">Operational date in the following format YYYY-MM-DD. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateSystemMeterResponse</returns>
        UpdateSystemMeterResponse UpdateSystemMeter(int systemId, string serialNumber, DateTimeOffset? operationalDate = default(DateTimeOffset?), int operationIndex = 0);

        /// <summary>
        /// Update the operational date of a meter by serial number.
        /// </summary>
        /// <remarks>
        /// Update the operational date of a meter. You must have access to the requested system and meter; otherwise a 401 is returned.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">System ID.</param>
        /// <param name="serialNumber">Meter serial number.</param>
        /// <param name="operationalDate">Operational date in the following format YYYY-MM-DD. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateSystemMeterResponse</returns>
        ApiResponse<UpdateSystemMeterResponse> UpdateSystemMeterWithHttpInfo(int systemId, string serialNumber, DateTimeOffset? operationalDate = default(DateTimeOffset?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns the requested meter detail.
        /// </summary>
        /// <remarks>
        /// Returns the requested meter by serial number. You must have access to the requested system and meter; otherwise a 401 is returned.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">System ID.</param>
        /// <param name="serialNumber">Meter serial number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemMeterResponse</returns>
        System.Threading.Tasks.Task<GetSystemMeterResponse> GetSystemMeterAsync(int systemId, string serialNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the requested meter detail.
        /// </summary>
        /// <remarks>
        /// Returns the requested meter by serial number. You must have access to the requested system and meter; otherwise a 401 is returned.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">System ID.</param>
        /// <param name="serialNumber">Meter serial number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemMeterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSystemMeterResponse>> GetSystemMeterWithHttpInfoAsync(int systemId, string serialNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Enable or Disable the meters.
        /// </summary>
        /// <remarks>
        /// Enable or Disable the meters. You must have access to the requested system and meter; otherwise a 401 is returned.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Activation ID.</param>
        /// <param name="serialNumber">Meter serial number.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetActivationMeterStatusResponse</returns>
        System.Threading.Tasks.Task<SetActivationMeterStatusResponse> SetActivationMeterStatusAsync(int activationId, string serialNumber, SetActivationMeterStatusRequest _params = default(SetActivationMeterStatusRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Enable or Disable the meters.
        /// </summary>
        /// <remarks>
        /// Enable or Disable the meters. You must have access to the requested system and meter; otherwise a 401 is returned.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Activation ID.</param>
        /// <param name="serialNumber">Meter serial number.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetActivationMeterStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetActivationMeterStatusResponse>> SetActivationMeterStatusWithHttpInfoAsync(int activationId, string serialNumber, SetActivationMeterStatusRequest _params = default(SetActivationMeterStatusRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the operational date of a meter by serial number.
        /// </summary>
        /// <remarks>
        /// Update the operational date of a meter. You must have access to the requested system and meter; otherwise a 401 is returned.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">System ID.</param>
        /// <param name="serialNumber">Meter serial number.</param>
        /// <param name="operationalDate">Operational date in the following format YYYY-MM-DD. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateSystemMeterResponse</returns>
        System.Threading.Tasks.Task<UpdateSystemMeterResponse> UpdateSystemMeterAsync(int systemId, string serialNumber, DateTimeOffset? operationalDate = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the operational date of a meter by serial number.
        /// </summary>
        /// <remarks>
        /// Update the operational date of a meter. You must have access to the requested system and meter; otherwise a 401 is returned.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">System ID.</param>
        /// <param name="serialNumber">Meter serial number.</param>
        /// <param name="operationalDate">Operational date in the following format YYYY-MM-DD. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateSystemMeterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateSystemMeterResponse>> UpdateSystemMeterWithHttpInfoAsync(int systemId, string serialNumber, DateTimeOffset? operationalDate = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetersApi : IMetersApiSync, IMetersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MetersApi : IMetersApi
    {
        private EnphaseOpenAPI.Commissioning.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MetersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetersApi(string basePath)
        {
            this.Configuration = EnphaseOpenAPI.Commissioning.Client.Configuration.MergeConfigurations(
                EnphaseOpenAPI.Commissioning.Client.GlobalConfiguration.Instance,
                new EnphaseOpenAPI.Commissioning.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EnphaseOpenAPI.Commissioning.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnphaseOpenAPI.Commissioning.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EnphaseOpenAPI.Commissioning.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MetersApi(EnphaseOpenAPI.Commissioning.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EnphaseOpenAPI.Commissioning.Client.Configuration.MergeConfigurations(
                EnphaseOpenAPI.Commissioning.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EnphaseOpenAPI.Commissioning.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnphaseOpenAPI.Commissioning.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EnphaseOpenAPI.Commissioning.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MetersApi(EnphaseOpenAPI.Commissioning.Client.ISynchronousClient client, EnphaseOpenAPI.Commissioning.Client.IAsynchronousClient asyncClient, EnphaseOpenAPI.Commissioning.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EnphaseOpenAPI.Commissioning.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EnphaseOpenAPI.Commissioning.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EnphaseOpenAPI.Commissioning.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EnphaseOpenAPI.Commissioning.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EnphaseOpenAPI.Commissioning.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns the requested meter detail. Returns the requested meter by serial number. You must have access to the requested system and meter; otherwise a 401 is returned.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">System ID.</param>
        /// <param name="serialNumber">Meter serial number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemMeterResponse</returns>
        public GetSystemMeterResponse GetSystemMeter(int systemId, string serialNumber, int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<GetSystemMeterResponse> localVarResponse = GetSystemMeterWithHttpInfo(systemId, serialNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the requested meter detail. Returns the requested meter by serial number. You must have access to the requested system and meter; otherwise a 401 is returned.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">System ID.</param>
        /// <param name="serialNumber">Meter serial number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemMeterResponse</returns>
        public EnphaseOpenAPI.Commissioning.Client.ApiResponse<GetSystemMeterResponse> GetSystemMeterWithHttpInfo(int systemId, string serialNumber, int operationIndex = 0)
        {
            // verify the required parameter 'serialNumber' is set
            if (serialNumber == null)
            {
                throw new EnphaseOpenAPI.Commissioning.Client.ApiException(400, "Missing required parameter 'serialNumber' when calling MetersApi->GetSystemMeter");
            }

            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("serial_number", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(serialNumber)); // path parameter

            localVarRequestOptions.Operation = "MetersApi.GetSystemMeter";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSystemMeterResponse>("/systems/{system_id}/meters/{serial_number}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemMeter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the requested meter detail. Returns the requested meter by serial number. You must have access to the requested system and meter; otherwise a 401 is returned.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">System ID.</param>
        /// <param name="serialNumber">Meter serial number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemMeterResponse</returns>
        public async System.Threading.Tasks.Task<GetSystemMeterResponse> GetSystemMeterAsync(int systemId, string serialNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<GetSystemMeterResponse> localVarResponse = await GetSystemMeterWithHttpInfoAsync(systemId, serialNumber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the requested meter detail. Returns the requested meter by serial number. You must have access to the requested system and meter; otherwise a 401 is returned.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">System ID.</param>
        /// <param name="serialNumber">Meter serial number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemMeterResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Commissioning.Client.ApiResponse<GetSystemMeterResponse>> GetSystemMeterWithHttpInfoAsync(int systemId, string serialNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serialNumber' is set
            if (serialNumber == null)
            {
                throw new EnphaseOpenAPI.Commissioning.Client.ApiException(400, "Missing required parameter 'serialNumber' when calling MetersApi->GetSystemMeter");
            }


            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("serial_number", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(serialNumber)); // path parameter

            localVarRequestOptions.Operation = "MetersApi.GetSystemMeter";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSystemMeterResponse>("/systems/{system_id}/meters/{serial_number}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemMeter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enable or Disable the meters. Enable or Disable the meters. You must have access to the requested system and meter; otherwise a 401 is returned.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Activation ID.</param>
        /// <param name="serialNumber">Meter serial number.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetActivationMeterStatusResponse</returns>
        public SetActivationMeterStatusResponse SetActivationMeterStatus(int activationId, string serialNumber, SetActivationMeterStatusRequest _params = default(SetActivationMeterStatusRequest), int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<SetActivationMeterStatusResponse> localVarResponse = SetActivationMeterStatusWithHttpInfo(activationId, serialNumber, _params);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enable or Disable the meters. Enable or Disable the meters. You must have access to the requested system and meter; otherwise a 401 is returned.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Activation ID.</param>
        /// <param name="serialNumber">Meter serial number.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetActivationMeterStatusResponse</returns>
        public EnphaseOpenAPI.Commissioning.Client.ApiResponse<SetActivationMeterStatusResponse> SetActivationMeterStatusWithHttpInfo(int activationId, string serialNumber, SetActivationMeterStatusRequest _params = default(SetActivationMeterStatusRequest), int operationIndex = 0)
        {
            // verify the required parameter 'serialNumber' is set
            if (serialNumber == null)
            {
                throw new EnphaseOpenAPI.Commissioning.Client.ApiException(400, "Missing required parameter 'serialNumber' when calling MetersApi->SetActivationMeterStatus");
            }

            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activation_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(activationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("serial_number", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(serialNumber)); // path parameter
            localVarRequestOptions.Data = _params;

            localVarRequestOptions.Operation = "MetersApi.SetActivationMeterStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SetActivationMeterStatusResponse>("/activations/{activation_id}/meters/{serial_number}/meter_control", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetActivationMeterStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enable or Disable the meters. Enable or Disable the meters. You must have access to the requested system and meter; otherwise a 401 is returned.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Activation ID.</param>
        /// <param name="serialNumber">Meter serial number.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetActivationMeterStatusResponse</returns>
        public async System.Threading.Tasks.Task<SetActivationMeterStatusResponse> SetActivationMeterStatusAsync(int activationId, string serialNumber, SetActivationMeterStatusRequest _params = default(SetActivationMeterStatusRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<SetActivationMeterStatusResponse> localVarResponse = await SetActivationMeterStatusWithHttpInfoAsync(activationId, serialNumber, _params, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enable or Disable the meters. Enable or Disable the meters. You must have access to the requested system and meter; otherwise a 401 is returned.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activationId">Activation ID.</param>
        /// <param name="serialNumber">Meter serial number.</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetActivationMeterStatusResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Commissioning.Client.ApiResponse<SetActivationMeterStatusResponse>> SetActivationMeterStatusWithHttpInfoAsync(int activationId, string serialNumber, SetActivationMeterStatusRequest _params = default(SetActivationMeterStatusRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serialNumber' is set
            if (serialNumber == null)
            {
                throw new EnphaseOpenAPI.Commissioning.Client.ApiException(400, "Missing required parameter 'serialNumber' when calling MetersApi->SetActivationMeterStatus");
            }


            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activation_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(activationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("serial_number", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(serialNumber)); // path parameter
            localVarRequestOptions.Data = _params;

            localVarRequestOptions.Operation = "MetersApi.SetActivationMeterStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SetActivationMeterStatusResponse>("/activations/{activation_id}/meters/{serial_number}/meter_control", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetActivationMeterStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the operational date of a meter by serial number. Update the operational date of a meter. You must have access to the requested system and meter; otherwise a 401 is returned.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">System ID.</param>
        /// <param name="serialNumber">Meter serial number.</param>
        /// <param name="operationalDate">Operational date in the following format YYYY-MM-DD. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateSystemMeterResponse</returns>
        public UpdateSystemMeterResponse UpdateSystemMeter(int systemId, string serialNumber, DateTimeOffset? operationalDate = default(DateTimeOffset?), int operationIndex = 0)
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<UpdateSystemMeterResponse> localVarResponse = UpdateSystemMeterWithHttpInfo(systemId, serialNumber, operationalDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the operational date of a meter by serial number. Update the operational date of a meter. You must have access to the requested system and meter; otherwise a 401 is returned.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">System ID.</param>
        /// <param name="serialNumber">Meter serial number.</param>
        /// <param name="operationalDate">Operational date in the following format YYYY-MM-DD. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateSystemMeterResponse</returns>
        public EnphaseOpenAPI.Commissioning.Client.ApiResponse<UpdateSystemMeterResponse> UpdateSystemMeterWithHttpInfo(int systemId, string serialNumber, DateTimeOffset? operationalDate = default(DateTimeOffset?), int operationIndex = 0)
        {
            // verify the required parameter 'serialNumber' is set
            if (serialNumber == null)
            {
                throw new EnphaseOpenAPI.Commissioning.Client.ApiException(400, "Missing required parameter 'serialNumber' when calling MetersApi->UpdateSystemMeter");
            }

            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("serial_number", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(serialNumber)); // path parameter
            if (operationalDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "operational_date", operationalDate));
            }

            localVarRequestOptions.Operation = "MetersApi.UpdateSystemMeter";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<UpdateSystemMeterResponse>("/systems/{system_id}/meters/{serial_number}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSystemMeter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the operational date of a meter by serial number. Update the operational date of a meter. You must have access to the requested system and meter; otherwise a 401 is returned.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">System ID.</param>
        /// <param name="serialNumber">Meter serial number.</param>
        /// <param name="operationalDate">Operational date in the following format YYYY-MM-DD. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateSystemMeterResponse</returns>
        public async System.Threading.Tasks.Task<UpdateSystemMeterResponse> UpdateSystemMeterAsync(int systemId, string serialNumber, DateTimeOffset? operationalDate = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Commissioning.Client.ApiResponse<UpdateSystemMeterResponse> localVarResponse = await UpdateSystemMeterWithHttpInfoAsync(systemId, serialNumber, operationalDate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the operational date of a meter by serial number. Update the operational date of a meter. You must have access to the requested system and meter; otherwise a 401 is returned.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Commissioning.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">System ID.</param>
        /// <param name="serialNumber">Meter serial number.</param>
        /// <param name="operationalDate">Operational date in the following format YYYY-MM-DD. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateSystemMeterResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Commissioning.Client.ApiResponse<UpdateSystemMeterResponse>> UpdateSystemMeterWithHttpInfoAsync(int systemId, string serialNumber, DateTimeOffset? operationalDate = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serialNumber' is set
            if (serialNumber == null)
            {
                throw new EnphaseOpenAPI.Commissioning.Client.ApiException(400, "Missing required parameter 'serialNumber' when calling MetersApi->UpdateSystemMeter");
            }


            EnphaseOpenAPI.Commissioning.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Commissioning.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Commissioning.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("serial_number", EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToString(serialNumber)); // path parameter
            if (operationalDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "operational_date", operationalDate));
            }

            localVarRequestOptions.Operation = "MetersApi.UpdateSystemMeter";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Commissioning.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<UpdateSystemMeterResponse>("/systems/{system_id}/meters/{serial_number}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSystemMeter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
