/*
 * The Enphase Commissioning API
 *
 * Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Commissioning.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Commissioning.Model
{
    /// <summary>
    /// TariffSeasonsInnerDaysInnerPeriodsInner
    /// </summary>
    [DataContract(Name = "TariffSeasons_inner_days_inner_periods_inner")]
    public partial class TariffSeasonsInnerDaysInnerPeriodsInner : IEquatable<TariffSeasonsInnerDaysInnerPeriodsInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TariffSeasonsInnerDaysInnerPeriodsInner" /> class.
        /// </summary>
        /// <param name="id">Period ID. e.g&#x3D;&#39;period_1&#39;..</param>
        /// <param name="start">Period start. e.g&#x3D;0..</param>
        /// <param name="rate">Period rate. e.g&#x3D;0.0..</param>
        /// <param name="error">Dynamic fields will appear..</param>
        public TariffSeasonsInnerDaysInnerPeriodsInner(string id = default(string), string start = default(string), string rate = default(string), Dictionary<string, Object> error = default(Dictionary<string, Object>))
        {
            this.Id = id;
            this.Start = start;
            this.Rate = rate;
            this.Error = error;
        }

        /// <summary>
        /// Period ID. e.g&#x3D;&#39;period_1&#39;.
        /// </summary>
        /// <value>Period ID. e.g&#x3D;&#39;period_1&#39;.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Period start. e.g&#x3D;0.
        /// </summary>
        /// <value>Period start. e.g&#x3D;0.</value>
        [DataMember(Name = "start", EmitDefaultValue = false)]
        public string Start { get; set; }

        /// <summary>
        /// Period rate. e.g&#x3D;0.0.
        /// </summary>
        /// <value>Period rate. e.g&#x3D;0.0.</value>
        [DataMember(Name = "rate", EmitDefaultValue = false)]
        public string Rate { get; set; }

        /// <summary>
        /// Dynamic fields will appear.
        /// </summary>
        /// <value>Dynamic fields will appear.</value>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public Dictionary<string, Object> Error { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TariffSeasonsInnerDaysInnerPeriodsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TariffSeasonsInnerDaysInnerPeriodsInner);
        }

        /// <summary>
        /// Returns true if TariffSeasonsInnerDaysInnerPeriodsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of TariffSeasonsInnerDaysInnerPeriodsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TariffSeasonsInnerDaysInnerPeriodsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.Rate == input.Rate ||
                    (this.Rate != null &&
                    this.Rate.Equals(input.Rate))
                ) && 
                (
                    this.Error == input.Error ||
                    this.Error != null &&
                    input.Error != null &&
                    this.Error.SequenceEqual(input.Error)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Start != null)
                {
                    hashCode = (hashCode * 59) + this.Start.GetHashCode();
                }
                if (this.Rate != null)
                {
                    hashCode = (hashCode * 59) + this.Rate.GetHashCode();
                }
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
