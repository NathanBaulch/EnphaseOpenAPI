/*
 * The Enphase Commissioning API
 *
 * Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Commissioning.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Commissioning.Model
{
    /// <summary>
    /// GetPvManufacturerModelsResponse
    /// </summary>
    [DataContract(Name = "GetPvManufacturerModelsResponse")]
    public partial class GetPvManufacturerModelsResponse : IEquatable<GetPvManufacturerModelsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetPvManufacturerModelsResponse" /> class.
        /// </summary>
        /// <param name="pvManufacturers">pvManufacturers.</param>
        /// <param name="pvModels">A list of PV models for this manufacturer. Each element in the list is an array including the model&#39;s primary key and name. The list may be empty..</param>
        public GetPvManufacturerModelsResponse(GetPvManufacturerModelsResponsePvManufacturers pvManufacturers = default(GetPvManufacturerModelsResponsePvManufacturers), List<List<GetCompanyUsersResponseUsersInner>> pvModels = default(List<List<GetCompanyUsersResponseUsersInner>>))
        {
            this.PvManufacturers = pvManufacturers;
            this.PvModels = pvModels;
        }

        /// <summary>
        /// Gets or Sets PvManufacturers
        /// </summary>
        [DataMember(Name = "pv_manufacturers", EmitDefaultValue = false)]
        public GetPvManufacturerModelsResponsePvManufacturers PvManufacturers { get; set; }

        /// <summary>
        /// A list of PV models for this manufacturer. Each element in the list is an array including the model&#39;s primary key and name. The list may be empty.
        /// </summary>
        /// <value>A list of PV models for this manufacturer. Each element in the list is an array including the model&#39;s primary key and name. The list may be empty.</value>
        [DataMember(Name = "pv_models", EmitDefaultValue = false)]
        public List<List<GetCompanyUsersResponseUsersInner>> PvModels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetPvManufacturerModelsResponse {\n");
            sb.Append("  PvManufacturers: ").Append(PvManufacturers).Append("\n");
            sb.Append("  PvModels: ").Append(PvModels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetPvManufacturerModelsResponse);
        }

        /// <summary>
        /// Returns true if GetPvManufacturerModelsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetPvManufacturerModelsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetPvManufacturerModelsResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PvManufacturers == input.PvManufacturers ||
                    (this.PvManufacturers != null &&
                    this.PvManufacturers.Equals(input.PvManufacturers))
                ) && 
                (
                    this.PvModels == input.PvModels ||
                    this.PvModels != null &&
                    input.PvModels != null &&
                    this.PvModels.SequenceEqual(input.PvModels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PvManufacturers != null)
                {
                    hashCode = (hashCode * 59) + this.PvManufacturers.GetHashCode();
                }
                if (this.PvModels != null)
                {
                    hashCode = (hashCode * 59) + this.PvModels.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
