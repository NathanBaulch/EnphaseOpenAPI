/*
 * The Enphase Commissioning API
 *
 * Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Commissioning.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Commissioning.Model
{
    /// <summary>
    /// GetSelfCompanyAuthorizedSubcontractorsResponse
    /// </summary>
    [DataContract(Name = "GetSelfCompanyAuthorizedSubcontractorsResponse")]
    public partial class GetSelfCompanyAuthorizedSubcontractorsResponse : IEquatable<GetSelfCompanyAuthorizedSubcontractorsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSelfCompanyAuthorizedSubcontractorsResponse" /> class.
        /// </summary>
        /// <param name="companyId">Enlighten ID of the API user&#39;s company..</param>
        /// <param name="companyName">Name of the API user&#39;s company..</param>
        /// <param name="authorizedSubcontractors">A list of subcontractors belonging to the API user&#39;s company. May be empty..</param>
        public GetSelfCompanyAuthorizedSubcontractorsResponse(int companyId = default(int), string companyName = default(string), List<GetSelfCompanyAuthorizedSubcontractorsResponseAuthorizedSubcontractorsInner> authorizedSubcontractors = default(List<GetSelfCompanyAuthorizedSubcontractorsResponseAuthorizedSubcontractorsInner>))
        {
            this.CompanyId = companyId;
            this.CompanyName = companyName;
            this.AuthorizedSubcontractors = authorizedSubcontractors;
        }

        /// <summary>
        /// Enlighten ID of the API user&#39;s company.
        /// </summary>
        /// <value>Enlighten ID of the API user&#39;s company.</value>
        [DataMember(Name = "company_id", EmitDefaultValue = false)]
        public int CompanyId { get; set; }

        /// <summary>
        /// Name of the API user&#39;s company.
        /// </summary>
        /// <value>Name of the API user&#39;s company.</value>
        [DataMember(Name = "company_name", EmitDefaultValue = false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// A list of subcontractors belonging to the API user&#39;s company. May be empty.
        /// </summary>
        /// <value>A list of subcontractors belonging to the API user&#39;s company. May be empty.</value>
        [DataMember(Name = "authorized_subcontractors", EmitDefaultValue = false)]
        public List<GetSelfCompanyAuthorizedSubcontractorsResponseAuthorizedSubcontractorsInner> AuthorizedSubcontractors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSelfCompanyAuthorizedSubcontractorsResponse {\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  AuthorizedSubcontractors: ").Append(AuthorizedSubcontractors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetSelfCompanyAuthorizedSubcontractorsResponse);
        }

        /// <summary>
        /// Returns true if GetSelfCompanyAuthorizedSubcontractorsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetSelfCompanyAuthorizedSubcontractorsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetSelfCompanyAuthorizedSubcontractorsResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.AuthorizedSubcontractors == input.AuthorizedSubcontractors ||
                    this.AuthorizedSubcontractors != null &&
                    input.AuthorizedSubcontractors != null &&
                    this.AuthorizedSubcontractors.SequenceEqual(input.AuthorizedSubcontractors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                if (this.CompanyName != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyName.GetHashCode();
                }
                if (this.AuthorizedSubcontractors != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorizedSubcontractors.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
