/*
 * The Enphase Commissioning API
 *
 * Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Commissioning.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Commissioning.Model
{
    /// <summary>
    /// TariffSettingsTariff
    /// </summary>
    [DataContract(Name = "TariffSettings_tariff")]
    public partial class TariffSettingsTariff : IEquatable<TariffSettingsTariff>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TariffSettingsTariff" /> class.
        /// </summary>
        /// <param name="currencyType">currencyType.</param>
        /// <param name="singleRate">singleRate.</param>
        /// <param name="seasons">ToU seasons..</param>
        /// <param name="seasonsSell">ToU seasons..</param>
        public TariffSettingsTariff(TariffSettingsTariffCurrencyType currencyType = default(TariffSettingsTariffCurrencyType), TariffSettingsTariffSingleRate singleRate = default(TariffSettingsTariffSingleRate), List<TariffSeasonsInner> seasons = default(List<TariffSeasonsInner>), List<TariffSeasonsInner> seasonsSell = default(List<TariffSeasonsInner>))
        {
            this.CurrencyType = currencyType;
            this.SingleRate = singleRate;
            this.Seasons = seasons;
            this.SeasonsSell = seasonsSell;
        }

        /// <summary>
        /// Gets or Sets CurrencyType
        /// </summary>
        [DataMember(Name = "currency_type", EmitDefaultValue = false)]
        public TariffSettingsTariffCurrencyType CurrencyType { get; set; }

        /// <summary>
        /// Gets or Sets SingleRate
        /// </summary>
        [DataMember(Name = "single_rate", EmitDefaultValue = false)]
        public TariffSettingsTariffSingleRate SingleRate { get; set; }

        /// <summary>
        /// ToU seasons.
        /// </summary>
        /// <value>ToU seasons.</value>
        [DataMember(Name = "seasons", EmitDefaultValue = false)]
        public List<TariffSeasonsInner> Seasons { get; set; }

        /// <summary>
        /// ToU seasons.
        /// </summary>
        /// <value>ToU seasons.</value>
        [DataMember(Name = "seasons_sell", EmitDefaultValue = false)]
        public List<TariffSeasonsInner> SeasonsSell { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TariffSettingsTariff {\n");
            sb.Append("  CurrencyType: ").Append(CurrencyType).Append("\n");
            sb.Append("  SingleRate: ").Append(SingleRate).Append("\n");
            sb.Append("  Seasons: ").Append(Seasons).Append("\n");
            sb.Append("  SeasonsSell: ").Append(SeasonsSell).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TariffSettingsTariff);
        }

        /// <summary>
        /// Returns true if TariffSettingsTariff instances are equal
        /// </summary>
        /// <param name="input">Instance of TariffSettingsTariff to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TariffSettingsTariff input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CurrencyType == input.CurrencyType ||
                    (this.CurrencyType != null &&
                    this.CurrencyType.Equals(input.CurrencyType))
                ) && 
                (
                    this.SingleRate == input.SingleRate ||
                    (this.SingleRate != null &&
                    this.SingleRate.Equals(input.SingleRate))
                ) && 
                (
                    this.Seasons == input.Seasons ||
                    this.Seasons != null &&
                    input.Seasons != null &&
                    this.Seasons.SequenceEqual(input.Seasons)
                ) && 
                (
                    this.SeasonsSell == input.SeasonsSell ||
                    this.SeasonsSell != null &&
                    input.SeasonsSell != null &&
                    this.SeasonsSell.SequenceEqual(input.SeasonsSell)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyType != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyType.GetHashCode();
                }
                if (this.SingleRate != null)
                {
                    hashCode = (hashCode * 59) + this.SingleRate.GetHashCode();
                }
                if (this.Seasons != null)
                {
                    hashCode = (hashCode * 59) + this.Seasons.GetHashCode();
                }
                if (this.SeasonsSell != null)
                {
                    hashCode = (hashCode * 59) + this.SeasonsSell.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
