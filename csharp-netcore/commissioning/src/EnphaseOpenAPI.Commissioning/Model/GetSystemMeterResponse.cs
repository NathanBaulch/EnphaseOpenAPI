/*
 * The Enphase Commissioning API
 *
 * Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Commissioning.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Commissioning.Model
{
    /// <summary>
    /// GetSystemMeterResponse
    /// </summary>
    [DataContract(Name = "GetSystemMeterResponse")]
    public partial class GetSystemMeterResponse : IEquatable<GetSystemMeterResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSystemMeterResponse" /> class.
        /// </summary>
        /// <param name="serialNumber">Meter serial number..</param>
        /// <param name="manufacturer">Name of the manufacturer..</param>
        /// <param name="model">Model..</param>
        /// <param name="type">Meter type..</param>
        /// <param name="operationalDate">Operational date..</param>
        /// <param name="firstReportDate">First report date..</param>
        /// <param name="lastReportDate">Last report date..</param>
        /// <param name="phase">Phase..</param>
        /// <param name="envoySerialNumber">Envoy serial number..</param>
        /// <param name="status">Meter status..</param>
        /// <param name="state">Meter state..</param>
        public GetSystemMeterResponse(string serialNumber = default(string), string manufacturer = default(string), string model = default(string), string type = default(string), DateTimeOffset operationalDate = default(DateTimeOffset), DateTimeOffset firstReportDate = default(DateTimeOffset), DateTimeOffset lastReportDate = default(DateTimeOffset), string phase = default(string), string envoySerialNumber = default(string), string status = default(string), string state = default(string))
        {
            this.SerialNumber = serialNumber;
            this.Manufacturer = manufacturer;
            this.Model = model;
            this.Type = type;
            this.OperationalDate = operationalDate;
            this.FirstReportDate = firstReportDate;
            this.LastReportDate = lastReportDate;
            this.Phase = phase;
            this.EnvoySerialNumber = envoySerialNumber;
            this.Status = status;
            this.State = state;
        }

        /// <summary>
        /// Meter serial number.
        /// </summary>
        /// <value>Meter serial number.</value>
        [DataMember(Name = "serial_number", EmitDefaultValue = false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Name of the manufacturer.
        /// </summary>
        /// <value>Name of the manufacturer.</value>
        [DataMember(Name = "manufacturer", EmitDefaultValue = false)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Model.
        /// </summary>
        /// <value>Model.</value>
        [DataMember(Name = "model", EmitDefaultValue = false)]
        public string Model { get; set; }

        /// <summary>
        /// Meter type.
        /// </summary>
        /// <value>Meter type.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Operational date.
        /// </summary>
        /// <value>Operational date.</value>
        [DataMember(Name = "operational_date", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTimeOffset OperationalDate { get; set; }

        /// <summary>
        /// First report date.
        /// </summary>
        /// <value>First report date.</value>
        [DataMember(Name = "first_report_date", EmitDefaultValue = false)]
        public DateTimeOffset FirstReportDate { get; set; }

        /// <summary>
        /// Last report date.
        /// </summary>
        /// <value>Last report date.</value>
        [DataMember(Name = "last_report_date", EmitDefaultValue = false)]
        public DateTimeOffset LastReportDate { get; set; }

        /// <summary>
        /// Phase.
        /// </summary>
        /// <value>Phase.</value>
        [DataMember(Name = "phase", EmitDefaultValue = false)]
        public string Phase { get; set; }

        /// <summary>
        /// Envoy serial number.
        /// </summary>
        /// <value>Envoy serial number.</value>
        [DataMember(Name = "envoy_serial_number", EmitDefaultValue = false)]
        public string EnvoySerialNumber { get; set; }

        /// <summary>
        /// Meter status.
        /// </summary>
        /// <value>Meter status.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Meter state.
        /// </summary>
        /// <value>Meter state.</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSystemMeterResponse {\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  OperationalDate: ").Append(OperationalDate).Append("\n");
            sb.Append("  FirstReportDate: ").Append(FirstReportDate).Append("\n");
            sb.Append("  LastReportDate: ").Append(LastReportDate).Append("\n");
            sb.Append("  Phase: ").Append(Phase).Append("\n");
            sb.Append("  EnvoySerialNumber: ").Append(EnvoySerialNumber).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetSystemMeterResponse);
        }

        /// <summary>
        /// Returns true if GetSystemMeterResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetSystemMeterResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetSystemMeterResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.Manufacturer == input.Manufacturer ||
                    (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.OperationalDate == input.OperationalDate ||
                    (this.OperationalDate != null &&
                    this.OperationalDate.Equals(input.OperationalDate))
                ) && 
                (
                    this.FirstReportDate == input.FirstReportDate ||
                    (this.FirstReportDate != null &&
                    this.FirstReportDate.Equals(input.FirstReportDate))
                ) && 
                (
                    this.LastReportDate == input.LastReportDate ||
                    (this.LastReportDate != null &&
                    this.LastReportDate.Equals(input.LastReportDate))
                ) && 
                (
                    this.Phase == input.Phase ||
                    (this.Phase != null &&
                    this.Phase.Equals(input.Phase))
                ) && 
                (
                    this.EnvoySerialNumber == input.EnvoySerialNumber ||
                    (this.EnvoySerialNumber != null &&
                    this.EnvoySerialNumber.Equals(input.EnvoySerialNumber))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SerialNumber != null)
                {
                    hashCode = (hashCode * 59) + this.SerialNumber.GetHashCode();
                }
                if (this.Manufacturer != null)
                {
                    hashCode = (hashCode * 59) + this.Manufacturer.GetHashCode();
                }
                if (this.Model != null)
                {
                    hashCode = (hashCode * 59) + this.Model.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.OperationalDate != null)
                {
                    hashCode = (hashCode * 59) + this.OperationalDate.GetHashCode();
                }
                if (this.FirstReportDate != null)
                {
                    hashCode = (hashCode * 59) + this.FirstReportDate.GetHashCode();
                }
                if (this.LastReportDate != null)
                {
                    hashCode = (hashCode * 59) + this.LastReportDate.GetHashCode();
                }
                if (this.Phase != null)
                {
                    hashCode = (hashCode * 59) + this.Phase.GetHashCode();
                }
                if (this.EnvoySerialNumber != null)
                {
                    hashCode = (hashCode * 59) + this.EnvoySerialNumber.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
