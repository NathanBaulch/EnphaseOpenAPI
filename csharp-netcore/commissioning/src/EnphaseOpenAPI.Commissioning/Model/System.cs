/*
 * The Enphase Commissioning API
 *
 * Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Commissioning.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Commissioning.Model
{
    /// <summary>
    /// System
    /// </summary>
    [DataContract(Name = "System")]
    public partial class System : IEquatable<System>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets SystemType
        /// </summary>
        [DataMember(Name = "system_type", EmitDefaultValue = false)]
        public SystemTypeEnum? SystemType { get; set; }

        /// <summary>
        /// Gets or Sets InternetConnection
        /// </summary>
        [DataMember(Name = "internet_connection", EmitDefaultValue = false)]
        public SystemInternetConnectionEnum? InternetConnection { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public SystemSourceEnum? Source { get; set; }

        /// <summary>
        /// Gets or Sets ArrayType
        /// </summary>
        [DataMember(Name = "array_type", EmitDefaultValue = false)]
        public SystemArrayTypeEnum? ArrayType { get; set; }

        /// <summary>
        /// Gets or Sets AttachmentType
        /// </summary>
        [DataMember(Name = "attachment_type", EmitDefaultValue = false)]
        public SystemAttachmentTypeEnum? AttachmentType { get; set; }

        /// <summary>
        /// Gets or Sets ProductionMode
        /// </summary>
        [DataMember(Name = "production_mode", EmitDefaultValue = false)]
        public SystemProductionModeEnum? ProductionMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="System" /> class.
        /// </summary>
        /// <param name="systemId">Enlighten ID of this system. System-generated..</param>
        /// <param name="systemName">Name of the system..</param>
        /// <param name="systemType">systemType.</param>
        /// <param name="status">System&#39;s status..</param>
        /// <param name="stage">What stage of the activation process this activation is in. System-generated..</param>
        /// <param name="internetConnection">internetConnection.</param>
        /// <param name="lease">Whether the system is leased. Default false..</param>
        /// <param name="operational">Whether this system is permitted to operate. Default true..</param>
        /// <param name="owner">owner.</param>
        /// <param name="ownerId">Enlighten ID of this system owner. System-generated. This field is optional..</param>
        /// <param name="host">host.</param>
        /// <param name="hostId">Enlighten ID of this system host. System-generated. This field is optional..</param>
        /// <param name="installerName">Name of the installer..</param>
        /// <param name="installerId">Enlighten ID of the installer of this system. Defaults to current user&#39;s company ID..</param>
        /// <param name="uri">URI for this activation..</param>
        /// <param name="updatedAt">Activation last updated timestamp..</param>
        /// <param name="reference">Identifier of this system as provided by the calling user&#39;s company. This attribute is not present if the calling user&#39;s company does not have a reference for this system..</param>
        /// <param name="otherReferences">Identifiers assigned to this activation by other companies which have access to it. This attribute is not present if there are no other references for this system..</param>
        /// <param name="allowPublicAccess">When true, the system will be eligible to appear in the public systems lists of Enphase and the system&#39;s installer. Default true..</param>
        /// <param name="interconnectDate">When the system was approved to connect to the grid..</param>
        /// <param name="installerSupportEmail">Installer support email..</param>
        /// <param name="source">source.</param>
        /// <param name="arrayType">arrayType.</param>
        /// <param name="attachmentType">attachmentType.</param>
        /// <param name="ensembleEnvoy">Specifies serial number of ensemble envoy in multi envoy system..</param>
        /// <param name="productionMode">productionMode.</param>
        /// <param name="gridProfile">Grid profile to set on this system&#39;s microinverters. See GridProfiles API for how to retrieve a list of known profiles..</param>
        /// <param name="requestedProfile">requestedProfile.</param>
        /// <param name="requestedReportFreq">requestedReportFreq.</param>
        /// <param name="voltage">Supported voltage/phase associated with a commercial system inside North America. If system type is not commercial, or if the installer exists &amp; installer&#39;s country is not inside North America, or if the system&#39;s country is not inside North America, then the voltage value would be null..</param>
        /// <param name="envoySerialNumbers">A list of Envoys installed on this system..</param>
        /// <param name="expectedEnvoyCount">Total envoys the system is supposed to have..</param>
        /// <param name="expectedPcuCount">Total PCUs the system is supposed to have..</param>
        /// <param name="expectedNsrCount">Total nsrs the system is supposed to have..</param>
        /// <param name="expectedMeterCount">Total meters the system is supposed to have..</param>
        /// <param name="expectedEnchargeCount">Total encharges the system is supposed to have..</param>
        /// <param name="expectedEnpowerCount">Total enpowers the system is supposed to have..</param>
        /// <param name="pvManufacturer">Enlighten ID of the PV manufacturer associated with the PV model installed on the system. See PvManufacturers for how to retrieve PV manufacturer IDs..</param>
        /// <param name="pvManufacturerName">Name of the Custom PV module manufacturer associated with the system..</param>
        /// <param name="pvModel">Enlighten ID of the PV model installed on the system. See PvManufacturers and PvModels for how to retrieve PV model IDs..</param>
        /// <param name="pvModelName">Name of the Custom PV module model associated with the system..</param>
        /// <param name="pvModulePowerRating">Power rating (in W) of the PV module installed on the system..</param>
        /// <param name="pvModuleType">Type ID of the PV module installed on the system. 1 -&gt; &#39;Mono-facial&#39;, 2 -&gt; &#39;Bi-facial&#39;, 3 -&gt; &#39;Split cell&#39;, 4 -&gt; &#39;Other&#39;..</param>
        /// <param name="encharge">Encharge detail..</param>
        /// <param name="enpower">Enpower detail..</param>
        /// <param name="address">address.</param>
        public System(int systemId = default(int), string systemName = default(string), SystemTypeEnum? systemType = default(SystemTypeEnum?), string status = default(string), int stage = default(int), SystemInternetConnectionEnum? internetConnection = default(SystemInternetConnectionEnum?), bool lease = default(bool), bool operational = default(bool), SystemOwner owner = default(SystemOwner), int ownerId = default(int), SystemHost host = default(SystemHost), int hostId = default(int), string installerName = default(string), int installerId = default(int), string uri = default(string), long updatedAt = default(long), string reference = default(string), List<string> otherReferences = default(List<string>), bool allowPublicAccess = default(bool), DateTimeOffset interconnectDate = default(DateTimeOffset), string installerSupportEmail = default(string), SystemSourceEnum? source = default(SystemSourceEnum?), SystemArrayTypeEnum? arrayType = default(SystemArrayTypeEnum?), SystemAttachmentTypeEnum? attachmentType = default(SystemAttachmentTypeEnum?), string ensembleEnvoy = default(string), SystemProductionModeEnum? productionMode = default(SystemProductionModeEnum?), string gridProfile = default(string), string requestedProfile = default(string), string requestedReportFreq = default(string), string voltage = default(string), List<string> envoySerialNumbers = default(List<string>), int expectedEnvoyCount = default(int), int expectedPcuCount = default(int), int expectedNsrCount = default(int), int expectedMeterCount = default(int), int expectedEnchargeCount = default(int), int expectedEnpowerCount = default(int), int pvManufacturer = default(int), string pvManufacturerName = default(string), int pvModel = default(int), string pvModelName = default(string), float pvModulePowerRating = default(float), int pvModuleType = default(int), List<SystemEnchargeInner> encharge = default(List<SystemEnchargeInner>), List<SystemEnpowerInner> enpower = default(List<SystemEnpowerInner>), Address address = default(Address))
        {
            this.SystemId = systemId;
            this.SystemName = systemName;
            this.SystemType = systemType;
            this.Status = status;
            this.Stage = stage;
            this.InternetConnection = internetConnection;
            this.Lease = lease;
            this.Operational = operational;
            this.Owner = owner;
            this.OwnerId = ownerId;
            this.Host = host;
            this.HostId = hostId;
            this.InstallerName = installerName;
            this.InstallerId = installerId;
            this.Uri = uri;
            this.UpdatedAt = updatedAt;
            this.Reference = reference;
            this.OtherReferences = otherReferences;
            this.AllowPublicAccess = allowPublicAccess;
            this.InterconnectDate = interconnectDate;
            this.InstallerSupportEmail = installerSupportEmail;
            this.Source = source;
            this.ArrayType = arrayType;
            this.AttachmentType = attachmentType;
            this.EnsembleEnvoy = ensembleEnvoy;
            this.ProductionMode = productionMode;
            this.GridProfile = gridProfile;
            this.RequestedProfile = requestedProfile;
            this.RequestedReportFreq = requestedReportFreq;
            this.Voltage = voltage;
            this.EnvoySerialNumbers = envoySerialNumbers;
            this.ExpectedEnvoyCount = expectedEnvoyCount;
            this.ExpectedPcuCount = expectedPcuCount;
            this.ExpectedNsrCount = expectedNsrCount;
            this.ExpectedMeterCount = expectedMeterCount;
            this.ExpectedEnchargeCount = expectedEnchargeCount;
            this.ExpectedEnpowerCount = expectedEnpowerCount;
            this.PvManufacturer = pvManufacturer;
            this.PvManufacturerName = pvManufacturerName;
            this.PvModel = pvModel;
            this.PvModelName = pvModelName;
            this.PvModulePowerRating = pvModulePowerRating;
            this.PvModuleType = pvModuleType;
            this.Encharge = encharge;
            this.Enpower = enpower;
            this.Address = address;
        }

        /// <summary>
        /// Enlighten ID of this system. System-generated.
        /// </summary>
        /// <value>Enlighten ID of this system. System-generated.</value>
        [DataMember(Name = "system_id", EmitDefaultValue = false)]
        public int SystemId { get; set; }

        /// <summary>
        /// Name of the system.
        /// </summary>
        /// <value>Name of the system.</value>
        [DataMember(Name = "system_name", EmitDefaultValue = false)]
        public string SystemName { get; set; }

        /// <summary>
        /// System&#39;s status.
        /// </summary>
        /// <value>System&#39;s status.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// What stage of the activation process this activation is in. System-generated.
        /// </summary>
        /// <value>What stage of the activation process this activation is in. System-generated.</value>
        [DataMember(Name = "stage", EmitDefaultValue = false)]
        public int Stage { get; set; }

        /// <summary>
        /// Whether the system is leased. Default false.
        /// </summary>
        /// <value>Whether the system is leased. Default false.</value>
        [DataMember(Name = "lease", EmitDefaultValue = true)]
        public bool Lease { get; set; }

        /// <summary>
        /// Whether this system is permitted to operate. Default true.
        /// </summary>
        /// <value>Whether this system is permitted to operate. Default true.</value>
        [DataMember(Name = "operational", EmitDefaultValue = true)]
        public bool Operational { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name = "owner", EmitDefaultValue = false)]
        public SystemOwner Owner { get; set; }

        /// <summary>
        /// Enlighten ID of this system owner. System-generated. This field is optional.
        /// </summary>
        /// <value>Enlighten ID of this system owner. System-generated. This field is optional.</value>
        [DataMember(Name = "owner_id", EmitDefaultValue = false)]
        public int OwnerId { get; set; }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [DataMember(Name = "host", EmitDefaultValue = false)]
        public SystemHost Host { get; set; }

        /// <summary>
        /// Enlighten ID of this system host. System-generated. This field is optional.
        /// </summary>
        /// <value>Enlighten ID of this system host. System-generated. This field is optional.</value>
        [DataMember(Name = "host_id", EmitDefaultValue = false)]
        public int HostId { get; set; }

        /// <summary>
        /// Name of the installer.
        /// </summary>
        /// <value>Name of the installer.</value>
        [DataMember(Name = "installer_name", EmitDefaultValue = false)]
        public string InstallerName { get; set; }

        /// <summary>
        /// Enlighten ID of the installer of this system. Defaults to current user&#39;s company ID.
        /// </summary>
        /// <value>Enlighten ID of the installer of this system. Defaults to current user&#39;s company ID.</value>
        [DataMember(Name = "installer_id", EmitDefaultValue = false)]
        public int InstallerId { get; set; }

        /// <summary>
        /// URI for this activation.
        /// </summary>
        /// <value>URI for this activation.</value>
        [DataMember(Name = "uri", EmitDefaultValue = false)]
        public string Uri { get; set; }

        /// <summary>
        /// Activation last updated timestamp.
        /// </summary>
        /// <value>Activation last updated timestamp.</value>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public long UpdatedAt { get; set; }

        /// <summary>
        /// Identifier of this system as provided by the calling user&#39;s company. This attribute is not present if the calling user&#39;s company does not have a reference for this system.
        /// </summary>
        /// <value>Identifier of this system as provided by the calling user&#39;s company. This attribute is not present if the calling user&#39;s company does not have a reference for this system.</value>
        [DataMember(Name = "reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// Identifiers assigned to this activation by other companies which have access to it. This attribute is not present if there are no other references for this system.
        /// </summary>
        /// <value>Identifiers assigned to this activation by other companies which have access to it. This attribute is not present if there are no other references for this system.</value>
        [DataMember(Name = "other_references", EmitDefaultValue = false)]
        public List<string> OtherReferences { get; set; }

        /// <summary>
        /// When true, the system will be eligible to appear in the public systems lists of Enphase and the system&#39;s installer. Default true.
        /// </summary>
        /// <value>When true, the system will be eligible to appear in the public systems lists of Enphase and the system&#39;s installer. Default true.</value>
        [DataMember(Name = "allow_public_access", EmitDefaultValue = true)]
        public bool AllowPublicAccess { get; set; }

        /// <summary>
        /// When the system was approved to connect to the grid.
        /// </summary>
        /// <value>When the system was approved to connect to the grid.</value>
        [DataMember(Name = "interconnect_date", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTimeOffset InterconnectDate { get; set; }

        /// <summary>
        /// Installer support email.
        /// </summary>
        /// <value>Installer support email.</value>
        [DataMember(Name = "installer_support_email", EmitDefaultValue = false)]
        public string InstallerSupportEmail { get; set; }

        /// <summary>
        /// Specifies serial number of ensemble envoy in multi envoy system.
        /// </summary>
        /// <value>Specifies serial number of ensemble envoy in multi envoy system.</value>
        [DataMember(Name = "ensemble_envoy", EmitDefaultValue = false)]
        public string EnsembleEnvoy { get; set; }

        /// <summary>
        /// Grid profile to set on this system&#39;s microinverters. See GridProfiles API for how to retrieve a list of known profiles.
        /// </summary>
        /// <value>Grid profile to set on this system&#39;s microinverters. See GridProfiles API for how to retrieve a list of known profiles.</value>
        [DataMember(Name = "grid_profile", EmitDefaultValue = false)]
        public string GridProfile { get; set; }

        /// <summary>
        /// Gets or Sets RequestedProfile
        /// </summary>
        [DataMember(Name = "requested_profile", EmitDefaultValue = false)]
        public string RequestedProfile { get; set; }

        /// <summary>
        /// Gets or Sets RequestedReportFreq
        /// </summary>
        [DataMember(Name = "requested_report_freq", EmitDefaultValue = false)]
        public string RequestedReportFreq { get; set; }

        /// <summary>
        /// Supported voltage/phase associated with a commercial system inside North America. If system type is not commercial, or if the installer exists &amp; installer&#39;s country is not inside North America, or if the system&#39;s country is not inside North America, then the voltage value would be null.
        /// </summary>
        /// <value>Supported voltage/phase associated with a commercial system inside North America. If system type is not commercial, or if the installer exists &amp; installer&#39;s country is not inside North America, or if the system&#39;s country is not inside North America, then the voltage value would be null.</value>
        [DataMember(Name = "voltage", EmitDefaultValue = false)]
        public string Voltage { get; set; }

        /// <summary>
        /// A list of Envoys installed on this system.
        /// </summary>
        /// <value>A list of Envoys installed on this system.</value>
        [DataMember(Name = "envoy_serial_numbers", EmitDefaultValue = false)]
        public List<string> EnvoySerialNumbers { get; set; }

        /// <summary>
        /// Total envoys the system is supposed to have.
        /// </summary>
        /// <value>Total envoys the system is supposed to have.</value>
        [DataMember(Name = "expected_envoy_count", EmitDefaultValue = false)]
        public int ExpectedEnvoyCount { get; set; }

        /// <summary>
        /// Total PCUs the system is supposed to have.
        /// </summary>
        /// <value>Total PCUs the system is supposed to have.</value>
        [DataMember(Name = "expected_pcu_count", EmitDefaultValue = false)]
        public int ExpectedPcuCount { get; set; }

        /// <summary>
        /// Total nsrs the system is supposed to have.
        /// </summary>
        /// <value>Total nsrs the system is supposed to have.</value>
        [DataMember(Name = "expected_nsr_count", EmitDefaultValue = false)]
        public int ExpectedNsrCount { get; set; }

        /// <summary>
        /// Total meters the system is supposed to have.
        /// </summary>
        /// <value>Total meters the system is supposed to have.</value>
        [DataMember(Name = "expected_meter_count", EmitDefaultValue = false)]
        public int ExpectedMeterCount { get; set; }

        /// <summary>
        /// Total encharges the system is supposed to have.
        /// </summary>
        /// <value>Total encharges the system is supposed to have.</value>
        [DataMember(Name = "expected_encharge_count", EmitDefaultValue = false)]
        public int ExpectedEnchargeCount { get; set; }

        /// <summary>
        /// Total enpowers the system is supposed to have.
        /// </summary>
        /// <value>Total enpowers the system is supposed to have.</value>
        [DataMember(Name = "expected_enpower_count", EmitDefaultValue = false)]
        public int ExpectedEnpowerCount { get; set; }

        /// <summary>
        /// Enlighten ID of the PV manufacturer associated with the PV model installed on the system. See PvManufacturers for how to retrieve PV manufacturer IDs.
        /// </summary>
        /// <value>Enlighten ID of the PV manufacturer associated with the PV model installed on the system. See PvManufacturers for how to retrieve PV manufacturer IDs.</value>
        [DataMember(Name = "pv_manufacturer", EmitDefaultValue = false)]
        public int PvManufacturer { get; set; }

        /// <summary>
        /// Name of the Custom PV module manufacturer associated with the system.
        /// </summary>
        /// <value>Name of the Custom PV module manufacturer associated with the system.</value>
        [DataMember(Name = "pv_manufacturer_name", EmitDefaultValue = false)]
        public string PvManufacturerName { get; set; }

        /// <summary>
        /// Enlighten ID of the PV model installed on the system. See PvManufacturers and PvModels for how to retrieve PV model IDs.
        /// </summary>
        /// <value>Enlighten ID of the PV model installed on the system. See PvManufacturers and PvModels for how to retrieve PV model IDs.</value>
        [DataMember(Name = "pv_model", EmitDefaultValue = false)]
        public int PvModel { get; set; }

        /// <summary>
        /// Name of the Custom PV module model associated with the system.
        /// </summary>
        /// <value>Name of the Custom PV module model associated with the system.</value>
        [DataMember(Name = "pv_model_name", EmitDefaultValue = false)]
        public string PvModelName { get; set; }

        /// <summary>
        /// Power rating (in W) of the PV module installed on the system.
        /// </summary>
        /// <value>Power rating (in W) of the PV module installed on the system.</value>
        [DataMember(Name = "pv_module_power_rating", EmitDefaultValue = false)]
        public float PvModulePowerRating { get; set; }

        /// <summary>
        /// Type ID of the PV module installed on the system. 1 -&gt; &#39;Mono-facial&#39;, 2 -&gt; &#39;Bi-facial&#39;, 3 -&gt; &#39;Split cell&#39;, 4 -&gt; &#39;Other&#39;.
        /// </summary>
        /// <value>Type ID of the PV module installed on the system. 1 -&gt; &#39;Mono-facial&#39;, 2 -&gt; &#39;Bi-facial&#39;, 3 -&gt; &#39;Split cell&#39;, 4 -&gt; &#39;Other&#39;.</value>
        [DataMember(Name = "pv_module_type", EmitDefaultValue = false)]
        public int PvModuleType { get; set; }

        /// <summary>
        /// Encharge detail.
        /// </summary>
        /// <value>Encharge detail.</value>
        [DataMember(Name = "encharge", EmitDefaultValue = false)]
        public List<SystemEnchargeInner> Encharge { get; set; }

        /// <summary>
        /// Enpower detail.
        /// </summary>
        /// <value>Enpower detail.</value>
        [DataMember(Name = "enpower", EmitDefaultValue = false)]
        public List<SystemEnpowerInner> Enpower { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public Address Address { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class System {\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  SystemName: ").Append(SystemName).Append("\n");
            sb.Append("  SystemType: ").Append(SystemType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Stage: ").Append(Stage).Append("\n");
            sb.Append("  InternetConnection: ").Append(InternetConnection).Append("\n");
            sb.Append("  Lease: ").Append(Lease).Append("\n");
            sb.Append("  Operational: ").Append(Operational).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  HostId: ").Append(HostId).Append("\n");
            sb.Append("  InstallerName: ").Append(InstallerName).Append("\n");
            sb.Append("  InstallerId: ").Append(InstallerId).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  OtherReferences: ").Append(OtherReferences).Append("\n");
            sb.Append("  AllowPublicAccess: ").Append(AllowPublicAccess).Append("\n");
            sb.Append("  InterconnectDate: ").Append(InterconnectDate).Append("\n");
            sb.Append("  InstallerSupportEmail: ").Append(InstallerSupportEmail).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  ArrayType: ").Append(ArrayType).Append("\n");
            sb.Append("  AttachmentType: ").Append(AttachmentType).Append("\n");
            sb.Append("  EnsembleEnvoy: ").Append(EnsembleEnvoy).Append("\n");
            sb.Append("  ProductionMode: ").Append(ProductionMode).Append("\n");
            sb.Append("  GridProfile: ").Append(GridProfile).Append("\n");
            sb.Append("  RequestedProfile: ").Append(RequestedProfile).Append("\n");
            sb.Append("  RequestedReportFreq: ").Append(RequestedReportFreq).Append("\n");
            sb.Append("  Voltage: ").Append(Voltage).Append("\n");
            sb.Append("  EnvoySerialNumbers: ").Append(EnvoySerialNumbers).Append("\n");
            sb.Append("  ExpectedEnvoyCount: ").Append(ExpectedEnvoyCount).Append("\n");
            sb.Append("  ExpectedPcuCount: ").Append(ExpectedPcuCount).Append("\n");
            sb.Append("  ExpectedNsrCount: ").Append(ExpectedNsrCount).Append("\n");
            sb.Append("  ExpectedMeterCount: ").Append(ExpectedMeterCount).Append("\n");
            sb.Append("  ExpectedEnchargeCount: ").Append(ExpectedEnchargeCount).Append("\n");
            sb.Append("  ExpectedEnpowerCount: ").Append(ExpectedEnpowerCount).Append("\n");
            sb.Append("  PvManufacturer: ").Append(PvManufacturer).Append("\n");
            sb.Append("  PvManufacturerName: ").Append(PvManufacturerName).Append("\n");
            sb.Append("  PvModel: ").Append(PvModel).Append("\n");
            sb.Append("  PvModelName: ").Append(PvModelName).Append("\n");
            sb.Append("  PvModulePowerRating: ").Append(PvModulePowerRating).Append("\n");
            sb.Append("  PvModuleType: ").Append(PvModuleType).Append("\n");
            sb.Append("  Encharge: ").Append(Encharge).Append("\n");
            sb.Append("  Enpower: ").Append(Enpower).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as System);
        }

        /// <summary>
        /// Returns true if System instances are equal
        /// </summary>
        /// <param name="input">Instance of System to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(System input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SystemId == input.SystemId ||
                    this.SystemId.Equals(input.SystemId)
                ) && 
                (
                    this.SystemName == input.SystemName ||
                    (this.SystemName != null &&
                    this.SystemName.Equals(input.SystemName))
                ) && 
                (
                    this.SystemType == input.SystemType ||
                    this.SystemType.Equals(input.SystemType)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Stage == input.Stage ||
                    this.Stage.Equals(input.Stage)
                ) && 
                (
                    this.InternetConnection == input.InternetConnection ||
                    this.InternetConnection.Equals(input.InternetConnection)
                ) && 
                (
                    this.Lease == input.Lease ||
                    this.Lease.Equals(input.Lease)
                ) && 
                (
                    this.Operational == input.Operational ||
                    this.Operational.Equals(input.Operational)
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    this.OwnerId.Equals(input.OwnerId)
                ) && 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.HostId == input.HostId ||
                    this.HostId.Equals(input.HostId)
                ) && 
                (
                    this.InstallerName == input.InstallerName ||
                    (this.InstallerName != null &&
                    this.InstallerName.Equals(input.InstallerName))
                ) && 
                (
                    this.InstallerId == input.InstallerId ||
                    this.InstallerId.Equals(input.InstallerId)
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    this.UpdatedAt.Equals(input.UpdatedAt)
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.OtherReferences == input.OtherReferences ||
                    this.OtherReferences != null &&
                    input.OtherReferences != null &&
                    this.OtherReferences.SequenceEqual(input.OtherReferences)
                ) && 
                (
                    this.AllowPublicAccess == input.AllowPublicAccess ||
                    this.AllowPublicAccess.Equals(input.AllowPublicAccess)
                ) && 
                (
                    this.InterconnectDate == input.InterconnectDate ||
                    (this.InterconnectDate != null &&
                    this.InterconnectDate.Equals(input.InterconnectDate))
                ) && 
                (
                    this.InstallerSupportEmail == input.InstallerSupportEmail ||
                    (this.InstallerSupportEmail != null &&
                    this.InstallerSupportEmail.Equals(input.InstallerSupportEmail))
                ) && 
                (
                    this.Source == input.Source ||
                    this.Source.Equals(input.Source)
                ) && 
                (
                    this.ArrayType == input.ArrayType ||
                    this.ArrayType.Equals(input.ArrayType)
                ) && 
                (
                    this.AttachmentType == input.AttachmentType ||
                    this.AttachmentType.Equals(input.AttachmentType)
                ) && 
                (
                    this.EnsembleEnvoy == input.EnsembleEnvoy ||
                    (this.EnsembleEnvoy != null &&
                    this.EnsembleEnvoy.Equals(input.EnsembleEnvoy))
                ) && 
                (
                    this.ProductionMode == input.ProductionMode ||
                    this.ProductionMode.Equals(input.ProductionMode)
                ) && 
                (
                    this.GridProfile == input.GridProfile ||
                    (this.GridProfile != null &&
                    this.GridProfile.Equals(input.GridProfile))
                ) && 
                (
                    this.RequestedProfile == input.RequestedProfile ||
                    (this.RequestedProfile != null &&
                    this.RequestedProfile.Equals(input.RequestedProfile))
                ) && 
                (
                    this.RequestedReportFreq == input.RequestedReportFreq ||
                    (this.RequestedReportFreq != null &&
                    this.RequestedReportFreq.Equals(input.RequestedReportFreq))
                ) && 
                (
                    this.Voltage == input.Voltage ||
                    (this.Voltage != null &&
                    this.Voltage.Equals(input.Voltage))
                ) && 
                (
                    this.EnvoySerialNumbers == input.EnvoySerialNumbers ||
                    this.EnvoySerialNumbers != null &&
                    input.EnvoySerialNumbers != null &&
                    this.EnvoySerialNumbers.SequenceEqual(input.EnvoySerialNumbers)
                ) && 
                (
                    this.ExpectedEnvoyCount == input.ExpectedEnvoyCount ||
                    this.ExpectedEnvoyCount.Equals(input.ExpectedEnvoyCount)
                ) && 
                (
                    this.ExpectedPcuCount == input.ExpectedPcuCount ||
                    this.ExpectedPcuCount.Equals(input.ExpectedPcuCount)
                ) && 
                (
                    this.ExpectedNsrCount == input.ExpectedNsrCount ||
                    this.ExpectedNsrCount.Equals(input.ExpectedNsrCount)
                ) && 
                (
                    this.ExpectedMeterCount == input.ExpectedMeterCount ||
                    this.ExpectedMeterCount.Equals(input.ExpectedMeterCount)
                ) && 
                (
                    this.ExpectedEnchargeCount == input.ExpectedEnchargeCount ||
                    this.ExpectedEnchargeCount.Equals(input.ExpectedEnchargeCount)
                ) && 
                (
                    this.ExpectedEnpowerCount == input.ExpectedEnpowerCount ||
                    this.ExpectedEnpowerCount.Equals(input.ExpectedEnpowerCount)
                ) && 
                (
                    this.PvManufacturer == input.PvManufacturer ||
                    this.PvManufacturer.Equals(input.PvManufacturer)
                ) && 
                (
                    this.PvManufacturerName == input.PvManufacturerName ||
                    (this.PvManufacturerName != null &&
                    this.PvManufacturerName.Equals(input.PvManufacturerName))
                ) && 
                (
                    this.PvModel == input.PvModel ||
                    this.PvModel.Equals(input.PvModel)
                ) && 
                (
                    this.PvModelName == input.PvModelName ||
                    (this.PvModelName != null &&
                    this.PvModelName.Equals(input.PvModelName))
                ) && 
                (
                    this.PvModulePowerRating == input.PvModulePowerRating ||
                    this.PvModulePowerRating.Equals(input.PvModulePowerRating)
                ) && 
                (
                    this.PvModuleType == input.PvModuleType ||
                    this.PvModuleType.Equals(input.PvModuleType)
                ) && 
                (
                    this.Encharge == input.Encharge ||
                    this.Encharge != null &&
                    input.Encharge != null &&
                    this.Encharge.SequenceEqual(input.Encharge)
                ) && 
                (
                    this.Enpower == input.Enpower ||
                    this.Enpower != null &&
                    input.Enpower != null &&
                    this.Enpower.SequenceEqual(input.Enpower)
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SystemId.GetHashCode();
                if (this.SystemName != null)
                {
                    hashCode = (hashCode * 59) + this.SystemName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SystemType.GetHashCode();
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Stage.GetHashCode();
                hashCode = (hashCode * 59) + this.InternetConnection.GetHashCode();
                hashCode = (hashCode * 59) + this.Lease.GetHashCode();
                hashCode = (hashCode * 59) + this.Operational.GetHashCode();
                if (this.Owner != null)
                {
                    hashCode = (hashCode * 59) + this.Owner.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OwnerId.GetHashCode();
                if (this.Host != null)
                {
                    hashCode = (hashCode * 59) + this.Host.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HostId.GetHashCode();
                if (this.InstallerName != null)
                {
                    hashCode = (hashCode * 59) + this.InstallerName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InstallerId.GetHashCode();
                if (this.Uri != null)
                {
                    hashCode = (hashCode * 59) + this.Uri.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.OtherReferences != null)
                {
                    hashCode = (hashCode * 59) + this.OtherReferences.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllowPublicAccess.GetHashCode();
                if (this.InterconnectDate != null)
                {
                    hashCode = (hashCode * 59) + this.InterconnectDate.GetHashCode();
                }
                if (this.InstallerSupportEmail != null)
                {
                    hashCode = (hashCode * 59) + this.InstallerSupportEmail.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Source.GetHashCode();
                hashCode = (hashCode * 59) + this.ArrayType.GetHashCode();
                hashCode = (hashCode * 59) + this.AttachmentType.GetHashCode();
                if (this.EnsembleEnvoy != null)
                {
                    hashCode = (hashCode * 59) + this.EnsembleEnvoy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProductionMode.GetHashCode();
                if (this.GridProfile != null)
                {
                    hashCode = (hashCode * 59) + this.GridProfile.GetHashCode();
                }
                if (this.RequestedProfile != null)
                {
                    hashCode = (hashCode * 59) + this.RequestedProfile.GetHashCode();
                }
                if (this.RequestedReportFreq != null)
                {
                    hashCode = (hashCode * 59) + this.RequestedReportFreq.GetHashCode();
                }
                if (this.Voltage != null)
                {
                    hashCode = (hashCode * 59) + this.Voltage.GetHashCode();
                }
                if (this.EnvoySerialNumbers != null)
                {
                    hashCode = (hashCode * 59) + this.EnvoySerialNumbers.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExpectedEnvoyCount.GetHashCode();
                hashCode = (hashCode * 59) + this.ExpectedPcuCount.GetHashCode();
                hashCode = (hashCode * 59) + this.ExpectedNsrCount.GetHashCode();
                hashCode = (hashCode * 59) + this.ExpectedMeterCount.GetHashCode();
                hashCode = (hashCode * 59) + this.ExpectedEnchargeCount.GetHashCode();
                hashCode = (hashCode * 59) + this.ExpectedEnpowerCount.GetHashCode();
                hashCode = (hashCode * 59) + this.PvManufacturer.GetHashCode();
                if (this.PvManufacturerName != null)
                {
                    hashCode = (hashCode * 59) + this.PvManufacturerName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PvModel.GetHashCode();
                if (this.PvModelName != null)
                {
                    hashCode = (hashCode * 59) + this.PvModelName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PvModulePowerRating.GetHashCode();
                hashCode = (hashCode * 59) + this.PvModuleType.GetHashCode();
                if (this.Encharge != null)
                {
                    hashCode = (hashCode * 59) + this.Encharge.GetHashCode();
                }
                if (this.Enpower != null)
                {
                    hashCode = (hashCode * 59) + this.Enpower.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PvModulePowerRating (float) minimum
            if (this.PvModulePowerRating < (float)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PvModulePowerRating, must be a value greater than or equal to 0.", new [] { "PvModulePowerRating" });
            }

            yield break;
        }
    }

}
