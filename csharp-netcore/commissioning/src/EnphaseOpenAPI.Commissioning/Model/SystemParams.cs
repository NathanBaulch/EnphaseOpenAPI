/*
 * The Enphase Commissioning API
 *
 * Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Commissioning.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Commissioning.Model
{
    /// <summary>
    /// SystemParams
    /// </summary>
    [DataContract(Name = "SystemParams")]
    public partial class SystemParams : IEquatable<SystemParams>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets SystemType
        /// </summary>
        [DataMember(Name = "system_type", EmitDefaultValue = false)]
        public SystemTypeEnum? SystemType { get; set; }

        /// <summary>
        /// Gets or Sets InternetConnection
        /// </summary>
        [DataMember(Name = "internet_connection", EmitDefaultValue = false)]
        public SystemInternetConnectionEnum? InternetConnection { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public SystemSourceEnum? Source { get; set; }

        /// <summary>
        /// Gets or Sets ArrayType
        /// </summary>
        [DataMember(Name = "array_type", EmitDefaultValue = false)]
        public SystemArrayTypeEnum? ArrayType { get; set; }

        /// <summary>
        /// Gets or Sets AttachmentType
        /// </summary>
        [DataMember(Name = "attachment_type", EmitDefaultValue = false)]
        public SystemAttachmentTypeEnum? AttachmentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemParams" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SystemParams() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemParams" /> class.
        /// </summary>
        /// <param name="systemName">Name of the system. Limit 255 characters. (required).</param>
        /// <param name="systemType">systemType.</param>
        /// <param name="internetConnection">internetConnection.</param>
        /// <param name="lease">Whether the system is leased. Default false..</param>
        /// <param name="operational">Whether this system is permitted to operate. Default true..</param>
        /// <param name="ownerId">Enlighten ID of the system owner. Owner must be an Enlighten user. Optional. If the user of the API is a self-installer, the owner must be himself. If the user of the API is an installer then use the Search user API to get the owner user ID. If the owner not exist in the enlighten then use Create home owner API to create it newly..</param>
        /// <param name="hostId">Enlighten ID of the system host. System host must be an Enlighten user. Optional. If the user of the API is an installer then use the Search user API to get the host user ID. If the host not exist in the enlighten then use Create home owner API to create it newly..</param>
        /// <param name="authorizedSubcontractorId">Enlighten ID of the sub-contractor you want to add to the system. Optional. If you are the home owner, you cannot add subcontractors for the site..</param>
        /// <param name="installerId">Enlighten ID of the installer of this system. Defaults to current user&#39;s company ID..</param>
        /// <param name="maintainerName">Name of the maintainer..</param>
        /// <param name="maintainerId">The Enlighten ID of the maintainer of this system. Defaults to current user&#39;s company ID..</param>
        /// <param name="authorizedSubcontractors">List of sub-contractors of this system..</param>
        /// <param name="allowPublicAccess">When true, the system will be eligible to appear in the public systems lists of Enphase and the system&#39;s installer. Default true..</param>
        /// <param name="interconnectDate">When the system was approved to connect to the grid..</param>
        /// <param name="source">source.</param>
        /// <param name="arrayType">arrayType.</param>
        /// <param name="attachmentType">attachmentType.</param>
        /// <param name="ensembleEnvoy">Specifies serial number of ensemble envoy in multi envoy system..</param>
        /// <param name="gridProfile">Grid profile to set on this system&#39;s microinverters. See GridProfiles API for how to retrieve a list of known profiles..</param>
        /// <param name="requestedProfile">requestedProfile.</param>
        /// <param name="requestedReportFreq">requestedReportFreq.</param>
        /// <param name="voltage">Supported voltage/phase associated with a commercial system inside North America. If system type is not commercial, or if the installer exists &amp; installer&#39;s country is not inside North America, or if the system&#39;s country is not inside North America, then the voltage value would be null..</param>
        /// <param name="envoySerialNumbers">A list of Envoys installed on this system..</param>
        /// <param name="pvManufacturer">Enlighten ID of the PV manufacturer associated with the PV model installed on the system. See PvManufacturers for how to retrieve PV manufacturer IDs..</param>
        /// <param name="pvManufacturerName">Name of the Custom PV module manufacturer associated with the system..</param>
        /// <param name="pvModel">Enlighten ID of the PV model installed on the system. See PvManufacturers and PvModels for how to retrieve PV model IDs..</param>
        /// <param name="pvModelName">Name of the Custom PV module model associated with the system..</param>
        /// <param name="pvModulePowerRating">Power rating (in W) of the PV module installed on the system..</param>
        /// <param name="pvModuleType">Type ID of the PV module installed on the system. 1 -&gt; &#39;Mono-facial&#39;, 2 -&gt; &#39;Bi-facial&#39;, 3 -&gt; &#39;Split cell&#39;, 4 -&gt; &#39;Other&#39;..</param>
        /// <param name="expectedEnvoyCount">Total envoys the system is supposed to have..</param>
        /// <param name="expectedPcuCount">Total PCUs the system is supposed to have..</param>
        /// <param name="expectedAcbCount">Total acbs the system is supposed to have..</param>
        /// <param name="expectedNsrCount">Total nsrs the system is supposed to have..</param>
        /// <param name="expectedMeterCount">Total meters the system is supposed to have..</param>
        /// <param name="expectedEnchargeCount">Total encharges the system is supposed to have..</param>
        /// <param name="expectedEnpowerCount">Total enpowers the system is supposed to have..</param>
        /// <param name="reference">Identifier of this system as provided by the calling user&#39;s company. This attribute is not present if the calling user&#39;s company does not have a reference for this system. This value should be alphanumeric..</param>
        /// <param name="encharge">Encharge detail..</param>
        /// <param name="enpower">Enpower detail..</param>
        /// <param name="address">address.</param>
        public SystemParams(string systemName = default(string), SystemTypeEnum? systemType = default(SystemTypeEnum?), SystemInternetConnectionEnum? internetConnection = default(SystemInternetConnectionEnum?), bool lease = default(bool), bool operational = default(bool), int ownerId = default(int), int hostId = default(int), int authorizedSubcontractorId = default(int), int installerId = default(int), string maintainerName = default(string), int maintainerId = default(int), List<GetPartnerActivationsResponseSystemsInnerAuthorizedSubcontractorsInner> authorizedSubcontractors = default(List<GetPartnerActivationsResponseSystemsInnerAuthorizedSubcontractorsInner>), bool allowPublicAccess = default(bool), DateTimeOffset interconnectDate = default(DateTimeOffset), SystemSourceEnum? source = default(SystemSourceEnum?), SystemArrayTypeEnum? arrayType = default(SystemArrayTypeEnum?), SystemAttachmentTypeEnum? attachmentType = default(SystemAttachmentTypeEnum?), string ensembleEnvoy = default(string), string gridProfile = default(string), string requestedProfile = default(string), string requestedReportFreq = default(string), string voltage = default(string), List<string> envoySerialNumbers = default(List<string>), int pvManufacturer = default(int), string pvManufacturerName = default(string), int pvModel = default(int), string pvModelName = default(string), float pvModulePowerRating = default(float), int pvModuleType = default(int), int expectedEnvoyCount = default(int), int expectedPcuCount = default(int), int expectedAcbCount = default(int), int expectedNsrCount = default(int), int expectedMeterCount = default(int), int expectedEnchargeCount = default(int), int expectedEnpowerCount = default(int), string reference = default(string), List<SystemParamsEnchargeInner> encharge = default(List<SystemParamsEnchargeInner>), List<SystemParamsEnpowerInner> enpower = default(List<SystemParamsEnpowerInner>), SystemParamsAddress address = default(SystemParamsAddress))
        {
            // to ensure "systemName" is required (not null)
            if (systemName == null)
            {
                throw new ArgumentNullException("systemName is a required property for SystemParams and cannot be null");
            }
            this.SystemName = systemName;
            this.SystemType = systemType;
            this.InternetConnection = internetConnection;
            this.Lease = lease;
            this.Operational = operational;
            this.OwnerId = ownerId;
            this.HostId = hostId;
            this.AuthorizedSubcontractorId = authorizedSubcontractorId;
            this.InstallerId = installerId;
            this.MaintainerName = maintainerName;
            this.MaintainerId = maintainerId;
            this.AuthorizedSubcontractors = authorizedSubcontractors;
            this.AllowPublicAccess = allowPublicAccess;
            this.InterconnectDate = interconnectDate;
            this.Source = source;
            this.ArrayType = arrayType;
            this.AttachmentType = attachmentType;
            this.EnsembleEnvoy = ensembleEnvoy;
            this.GridProfile = gridProfile;
            this.RequestedProfile = requestedProfile;
            this.RequestedReportFreq = requestedReportFreq;
            this.Voltage = voltage;
            this.EnvoySerialNumbers = envoySerialNumbers;
            this.PvManufacturer = pvManufacturer;
            this.PvManufacturerName = pvManufacturerName;
            this.PvModel = pvModel;
            this.PvModelName = pvModelName;
            this.PvModulePowerRating = pvModulePowerRating;
            this.PvModuleType = pvModuleType;
            this.ExpectedEnvoyCount = expectedEnvoyCount;
            this.ExpectedPcuCount = expectedPcuCount;
            this.ExpectedAcbCount = expectedAcbCount;
            this.ExpectedNsrCount = expectedNsrCount;
            this.ExpectedMeterCount = expectedMeterCount;
            this.ExpectedEnchargeCount = expectedEnchargeCount;
            this.ExpectedEnpowerCount = expectedEnpowerCount;
            this.Reference = reference;
            this.Encharge = encharge;
            this.Enpower = enpower;
            this.Address = address;
        }

        /// <summary>
        /// Name of the system. Limit 255 characters.
        /// </summary>
        /// <value>Name of the system. Limit 255 characters.</value>
        [DataMember(Name = "system_name", IsRequired = true, EmitDefaultValue = true)]
        public string SystemName { get; set; }

        /// <summary>
        /// Whether the system is leased. Default false.
        /// </summary>
        /// <value>Whether the system is leased. Default false.</value>
        [DataMember(Name = "lease", EmitDefaultValue = true)]
        public bool Lease { get; set; }

        /// <summary>
        /// Whether this system is permitted to operate. Default true.
        /// </summary>
        /// <value>Whether this system is permitted to operate. Default true.</value>
        [DataMember(Name = "operational", EmitDefaultValue = true)]
        public bool Operational { get; set; }

        /// <summary>
        /// Enlighten ID of the system owner. Owner must be an Enlighten user. Optional. If the user of the API is a self-installer, the owner must be himself. If the user of the API is an installer then use the Search user API to get the owner user ID. If the owner not exist in the enlighten then use Create home owner API to create it newly.
        /// </summary>
        /// <value>Enlighten ID of the system owner. Owner must be an Enlighten user. Optional. If the user of the API is a self-installer, the owner must be himself. If the user of the API is an installer then use the Search user API to get the owner user ID. If the owner not exist in the enlighten then use Create home owner API to create it newly.</value>
        [DataMember(Name = "owner_id", EmitDefaultValue = false)]
        public int OwnerId { get; set; }

        /// <summary>
        /// Enlighten ID of the system host. System host must be an Enlighten user. Optional. If the user of the API is an installer then use the Search user API to get the host user ID. If the host not exist in the enlighten then use Create home owner API to create it newly.
        /// </summary>
        /// <value>Enlighten ID of the system host. System host must be an Enlighten user. Optional. If the user of the API is an installer then use the Search user API to get the host user ID. If the host not exist in the enlighten then use Create home owner API to create it newly.</value>
        [DataMember(Name = "host_id", EmitDefaultValue = false)]
        public int HostId { get; set; }

        /// <summary>
        /// Enlighten ID of the sub-contractor you want to add to the system. Optional. If you are the home owner, you cannot add subcontractors for the site.
        /// </summary>
        /// <value>Enlighten ID of the sub-contractor you want to add to the system. Optional. If you are the home owner, you cannot add subcontractors for the site.</value>
        [DataMember(Name = "authorized_subcontractor_id", EmitDefaultValue = false)]
        public int AuthorizedSubcontractorId { get; set; }

        /// <summary>
        /// Enlighten ID of the installer of this system. Defaults to current user&#39;s company ID.
        /// </summary>
        /// <value>Enlighten ID of the installer of this system. Defaults to current user&#39;s company ID.</value>
        [DataMember(Name = "installer_id", EmitDefaultValue = false)]
        public int InstallerId { get; set; }

        /// <summary>
        /// Name of the maintainer.
        /// </summary>
        /// <value>Name of the maintainer.</value>
        [DataMember(Name = "maintainer_name", EmitDefaultValue = false)]
        public string MaintainerName { get; set; }

        /// <summary>
        /// The Enlighten ID of the maintainer of this system. Defaults to current user&#39;s company ID.
        /// </summary>
        /// <value>The Enlighten ID of the maintainer of this system. Defaults to current user&#39;s company ID.</value>
        [DataMember(Name = "maintainer_id", EmitDefaultValue = false)]
        public int MaintainerId { get; set; }

        /// <summary>
        /// List of sub-contractors of this system.
        /// </summary>
        /// <value>List of sub-contractors of this system.</value>
        [DataMember(Name = "authorized_subcontractors", EmitDefaultValue = false)]
        public List<GetPartnerActivationsResponseSystemsInnerAuthorizedSubcontractorsInner> AuthorizedSubcontractors { get; set; }

        /// <summary>
        /// When true, the system will be eligible to appear in the public systems lists of Enphase and the system&#39;s installer. Default true.
        /// </summary>
        /// <value>When true, the system will be eligible to appear in the public systems lists of Enphase and the system&#39;s installer. Default true.</value>
        [DataMember(Name = "allow_public_access", EmitDefaultValue = true)]
        public bool AllowPublicAccess { get; set; }

        /// <summary>
        /// When the system was approved to connect to the grid.
        /// </summary>
        /// <value>When the system was approved to connect to the grid.</value>
        [DataMember(Name = "interconnect_date", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTimeOffset InterconnectDate { get; set; }

        /// <summary>
        /// Specifies serial number of ensemble envoy in multi envoy system.
        /// </summary>
        /// <value>Specifies serial number of ensemble envoy in multi envoy system.</value>
        [DataMember(Name = "ensemble_envoy", EmitDefaultValue = false)]
        public string EnsembleEnvoy { get; set; }

        /// <summary>
        /// Grid profile to set on this system&#39;s microinverters. See GridProfiles API for how to retrieve a list of known profiles.
        /// </summary>
        /// <value>Grid profile to set on this system&#39;s microinverters. See GridProfiles API for how to retrieve a list of known profiles.</value>
        [DataMember(Name = "grid_profile", EmitDefaultValue = false)]
        public string GridProfile { get; set; }

        /// <summary>
        /// Gets or Sets RequestedProfile
        /// </summary>
        [DataMember(Name = "requested_profile", EmitDefaultValue = false)]
        public string RequestedProfile { get; set; }

        /// <summary>
        /// Gets or Sets RequestedReportFreq
        /// </summary>
        [DataMember(Name = "requested_report_freq", EmitDefaultValue = false)]
        public string RequestedReportFreq { get; set; }

        /// <summary>
        /// Supported voltage/phase associated with a commercial system inside North America. If system type is not commercial, or if the installer exists &amp; installer&#39;s country is not inside North America, or if the system&#39;s country is not inside North America, then the voltage value would be null.
        /// </summary>
        /// <value>Supported voltage/phase associated with a commercial system inside North America. If system type is not commercial, or if the installer exists &amp; installer&#39;s country is not inside North America, or if the system&#39;s country is not inside North America, then the voltage value would be null.</value>
        [DataMember(Name = "voltage", EmitDefaultValue = false)]
        public string Voltage { get; set; }

        /// <summary>
        /// A list of Envoys installed on this system.
        /// </summary>
        /// <value>A list of Envoys installed on this system.</value>
        [DataMember(Name = "envoy_serial_numbers", EmitDefaultValue = false)]
        public List<string> EnvoySerialNumbers { get; set; }

        /// <summary>
        /// Enlighten ID of the PV manufacturer associated with the PV model installed on the system. See PvManufacturers for how to retrieve PV manufacturer IDs.
        /// </summary>
        /// <value>Enlighten ID of the PV manufacturer associated with the PV model installed on the system. See PvManufacturers for how to retrieve PV manufacturer IDs.</value>
        [DataMember(Name = "pv_manufacturer", EmitDefaultValue = false)]
        public int PvManufacturer { get; set; }

        /// <summary>
        /// Name of the Custom PV module manufacturer associated with the system.
        /// </summary>
        /// <value>Name of the Custom PV module manufacturer associated with the system.</value>
        [DataMember(Name = "pv_manufacturer_name", EmitDefaultValue = false)]
        public string PvManufacturerName { get; set; }

        /// <summary>
        /// Enlighten ID of the PV model installed on the system. See PvManufacturers and PvModels for how to retrieve PV model IDs.
        /// </summary>
        /// <value>Enlighten ID of the PV model installed on the system. See PvManufacturers and PvModels for how to retrieve PV model IDs.</value>
        [DataMember(Name = "pv_model", EmitDefaultValue = false)]
        public int PvModel { get; set; }

        /// <summary>
        /// Name of the Custom PV module model associated with the system.
        /// </summary>
        /// <value>Name of the Custom PV module model associated with the system.</value>
        [DataMember(Name = "pv_model_name", EmitDefaultValue = false)]
        public string PvModelName { get; set; }

        /// <summary>
        /// Power rating (in W) of the PV module installed on the system.
        /// </summary>
        /// <value>Power rating (in W) of the PV module installed on the system.</value>
        [DataMember(Name = "pv_module_power_rating", EmitDefaultValue = false)]
        public float PvModulePowerRating { get; set; }

        /// <summary>
        /// Type ID of the PV module installed on the system. 1 -&gt; &#39;Mono-facial&#39;, 2 -&gt; &#39;Bi-facial&#39;, 3 -&gt; &#39;Split cell&#39;, 4 -&gt; &#39;Other&#39;.
        /// </summary>
        /// <value>Type ID of the PV module installed on the system. 1 -&gt; &#39;Mono-facial&#39;, 2 -&gt; &#39;Bi-facial&#39;, 3 -&gt; &#39;Split cell&#39;, 4 -&gt; &#39;Other&#39;.</value>
        [DataMember(Name = "pv_module_type", EmitDefaultValue = false)]
        public int PvModuleType { get; set; }

        /// <summary>
        /// Total envoys the system is supposed to have.
        /// </summary>
        /// <value>Total envoys the system is supposed to have.</value>
        [DataMember(Name = "expected_envoy_count", EmitDefaultValue = false)]
        public int ExpectedEnvoyCount { get; set; }

        /// <summary>
        /// Total PCUs the system is supposed to have.
        /// </summary>
        /// <value>Total PCUs the system is supposed to have.</value>
        [DataMember(Name = "expected_pcu_count", EmitDefaultValue = false)]
        public int ExpectedPcuCount { get; set; }

        /// <summary>
        /// Total acbs the system is supposed to have.
        /// </summary>
        /// <value>Total acbs the system is supposed to have.</value>
        [DataMember(Name = "expected_acb_count", EmitDefaultValue = false)]
        public int ExpectedAcbCount { get; set; }

        /// <summary>
        /// Total nsrs the system is supposed to have.
        /// </summary>
        /// <value>Total nsrs the system is supposed to have.</value>
        [DataMember(Name = "expected_nsr_count", EmitDefaultValue = false)]
        public int ExpectedNsrCount { get; set; }

        /// <summary>
        /// Total meters the system is supposed to have.
        /// </summary>
        /// <value>Total meters the system is supposed to have.</value>
        [DataMember(Name = "expected_meter_count", EmitDefaultValue = false)]
        public int ExpectedMeterCount { get; set; }

        /// <summary>
        /// Total encharges the system is supposed to have.
        /// </summary>
        /// <value>Total encharges the system is supposed to have.</value>
        [DataMember(Name = "expected_encharge_count", EmitDefaultValue = false)]
        public int ExpectedEnchargeCount { get; set; }

        /// <summary>
        /// Total enpowers the system is supposed to have.
        /// </summary>
        /// <value>Total enpowers the system is supposed to have.</value>
        [DataMember(Name = "expected_enpower_count", EmitDefaultValue = false)]
        public int ExpectedEnpowerCount { get; set; }

        /// <summary>
        /// Identifier of this system as provided by the calling user&#39;s company. This attribute is not present if the calling user&#39;s company does not have a reference for this system. This value should be alphanumeric.
        /// </summary>
        /// <value>Identifier of this system as provided by the calling user&#39;s company. This attribute is not present if the calling user&#39;s company does not have a reference for this system. This value should be alphanumeric.</value>
        [DataMember(Name = "reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// Encharge detail.
        /// </summary>
        /// <value>Encharge detail.</value>
        [DataMember(Name = "encharge", EmitDefaultValue = false)]
        public List<SystemParamsEnchargeInner> Encharge { get; set; }

        /// <summary>
        /// Enpower detail.
        /// </summary>
        /// <value>Enpower detail.</value>
        [DataMember(Name = "enpower", EmitDefaultValue = false)]
        public List<SystemParamsEnpowerInner> Enpower { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public SystemParamsAddress Address { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemParams {\n");
            sb.Append("  SystemName: ").Append(SystemName).Append("\n");
            sb.Append("  SystemType: ").Append(SystemType).Append("\n");
            sb.Append("  InternetConnection: ").Append(InternetConnection).Append("\n");
            sb.Append("  Lease: ").Append(Lease).Append("\n");
            sb.Append("  Operational: ").Append(Operational).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  HostId: ").Append(HostId).Append("\n");
            sb.Append("  AuthorizedSubcontractorId: ").Append(AuthorizedSubcontractorId).Append("\n");
            sb.Append("  InstallerId: ").Append(InstallerId).Append("\n");
            sb.Append("  MaintainerName: ").Append(MaintainerName).Append("\n");
            sb.Append("  MaintainerId: ").Append(MaintainerId).Append("\n");
            sb.Append("  AuthorizedSubcontractors: ").Append(AuthorizedSubcontractors).Append("\n");
            sb.Append("  AllowPublicAccess: ").Append(AllowPublicAccess).Append("\n");
            sb.Append("  InterconnectDate: ").Append(InterconnectDate).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  ArrayType: ").Append(ArrayType).Append("\n");
            sb.Append("  AttachmentType: ").Append(AttachmentType).Append("\n");
            sb.Append("  EnsembleEnvoy: ").Append(EnsembleEnvoy).Append("\n");
            sb.Append("  GridProfile: ").Append(GridProfile).Append("\n");
            sb.Append("  RequestedProfile: ").Append(RequestedProfile).Append("\n");
            sb.Append("  RequestedReportFreq: ").Append(RequestedReportFreq).Append("\n");
            sb.Append("  Voltage: ").Append(Voltage).Append("\n");
            sb.Append("  EnvoySerialNumbers: ").Append(EnvoySerialNumbers).Append("\n");
            sb.Append("  PvManufacturer: ").Append(PvManufacturer).Append("\n");
            sb.Append("  PvManufacturerName: ").Append(PvManufacturerName).Append("\n");
            sb.Append("  PvModel: ").Append(PvModel).Append("\n");
            sb.Append("  PvModelName: ").Append(PvModelName).Append("\n");
            sb.Append("  PvModulePowerRating: ").Append(PvModulePowerRating).Append("\n");
            sb.Append("  PvModuleType: ").Append(PvModuleType).Append("\n");
            sb.Append("  ExpectedEnvoyCount: ").Append(ExpectedEnvoyCount).Append("\n");
            sb.Append("  ExpectedPcuCount: ").Append(ExpectedPcuCount).Append("\n");
            sb.Append("  ExpectedAcbCount: ").Append(ExpectedAcbCount).Append("\n");
            sb.Append("  ExpectedNsrCount: ").Append(ExpectedNsrCount).Append("\n");
            sb.Append("  ExpectedMeterCount: ").Append(ExpectedMeterCount).Append("\n");
            sb.Append("  ExpectedEnchargeCount: ").Append(ExpectedEnchargeCount).Append("\n");
            sb.Append("  ExpectedEnpowerCount: ").Append(ExpectedEnpowerCount).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Encharge: ").Append(Encharge).Append("\n");
            sb.Append("  Enpower: ").Append(Enpower).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemParams);
        }

        /// <summary>
        /// Returns true if SystemParams instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemParams input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SystemName == input.SystemName ||
                    (this.SystemName != null &&
                    this.SystemName.Equals(input.SystemName))
                ) && 
                (
                    this.SystemType == input.SystemType ||
                    this.SystemType.Equals(input.SystemType)
                ) && 
                (
                    this.InternetConnection == input.InternetConnection ||
                    this.InternetConnection.Equals(input.InternetConnection)
                ) && 
                (
                    this.Lease == input.Lease ||
                    this.Lease.Equals(input.Lease)
                ) && 
                (
                    this.Operational == input.Operational ||
                    this.Operational.Equals(input.Operational)
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    this.OwnerId.Equals(input.OwnerId)
                ) && 
                (
                    this.HostId == input.HostId ||
                    this.HostId.Equals(input.HostId)
                ) && 
                (
                    this.AuthorizedSubcontractorId == input.AuthorizedSubcontractorId ||
                    this.AuthorizedSubcontractorId.Equals(input.AuthorizedSubcontractorId)
                ) && 
                (
                    this.InstallerId == input.InstallerId ||
                    this.InstallerId.Equals(input.InstallerId)
                ) && 
                (
                    this.MaintainerName == input.MaintainerName ||
                    (this.MaintainerName != null &&
                    this.MaintainerName.Equals(input.MaintainerName))
                ) && 
                (
                    this.MaintainerId == input.MaintainerId ||
                    this.MaintainerId.Equals(input.MaintainerId)
                ) && 
                (
                    this.AuthorizedSubcontractors == input.AuthorizedSubcontractors ||
                    this.AuthorizedSubcontractors != null &&
                    input.AuthorizedSubcontractors != null &&
                    this.AuthorizedSubcontractors.SequenceEqual(input.AuthorizedSubcontractors)
                ) && 
                (
                    this.AllowPublicAccess == input.AllowPublicAccess ||
                    this.AllowPublicAccess.Equals(input.AllowPublicAccess)
                ) && 
                (
                    this.InterconnectDate == input.InterconnectDate ||
                    (this.InterconnectDate != null &&
                    this.InterconnectDate.Equals(input.InterconnectDate))
                ) && 
                (
                    this.Source == input.Source ||
                    this.Source.Equals(input.Source)
                ) && 
                (
                    this.ArrayType == input.ArrayType ||
                    this.ArrayType.Equals(input.ArrayType)
                ) && 
                (
                    this.AttachmentType == input.AttachmentType ||
                    this.AttachmentType.Equals(input.AttachmentType)
                ) && 
                (
                    this.EnsembleEnvoy == input.EnsembleEnvoy ||
                    (this.EnsembleEnvoy != null &&
                    this.EnsembleEnvoy.Equals(input.EnsembleEnvoy))
                ) && 
                (
                    this.GridProfile == input.GridProfile ||
                    (this.GridProfile != null &&
                    this.GridProfile.Equals(input.GridProfile))
                ) && 
                (
                    this.RequestedProfile == input.RequestedProfile ||
                    (this.RequestedProfile != null &&
                    this.RequestedProfile.Equals(input.RequestedProfile))
                ) && 
                (
                    this.RequestedReportFreq == input.RequestedReportFreq ||
                    (this.RequestedReportFreq != null &&
                    this.RequestedReportFreq.Equals(input.RequestedReportFreq))
                ) && 
                (
                    this.Voltage == input.Voltage ||
                    (this.Voltage != null &&
                    this.Voltage.Equals(input.Voltage))
                ) && 
                (
                    this.EnvoySerialNumbers == input.EnvoySerialNumbers ||
                    this.EnvoySerialNumbers != null &&
                    input.EnvoySerialNumbers != null &&
                    this.EnvoySerialNumbers.SequenceEqual(input.EnvoySerialNumbers)
                ) && 
                (
                    this.PvManufacturer == input.PvManufacturer ||
                    this.PvManufacturer.Equals(input.PvManufacturer)
                ) && 
                (
                    this.PvManufacturerName == input.PvManufacturerName ||
                    (this.PvManufacturerName != null &&
                    this.PvManufacturerName.Equals(input.PvManufacturerName))
                ) && 
                (
                    this.PvModel == input.PvModel ||
                    this.PvModel.Equals(input.PvModel)
                ) && 
                (
                    this.PvModelName == input.PvModelName ||
                    (this.PvModelName != null &&
                    this.PvModelName.Equals(input.PvModelName))
                ) && 
                (
                    this.PvModulePowerRating == input.PvModulePowerRating ||
                    this.PvModulePowerRating.Equals(input.PvModulePowerRating)
                ) && 
                (
                    this.PvModuleType == input.PvModuleType ||
                    this.PvModuleType.Equals(input.PvModuleType)
                ) && 
                (
                    this.ExpectedEnvoyCount == input.ExpectedEnvoyCount ||
                    this.ExpectedEnvoyCount.Equals(input.ExpectedEnvoyCount)
                ) && 
                (
                    this.ExpectedPcuCount == input.ExpectedPcuCount ||
                    this.ExpectedPcuCount.Equals(input.ExpectedPcuCount)
                ) && 
                (
                    this.ExpectedAcbCount == input.ExpectedAcbCount ||
                    this.ExpectedAcbCount.Equals(input.ExpectedAcbCount)
                ) && 
                (
                    this.ExpectedNsrCount == input.ExpectedNsrCount ||
                    this.ExpectedNsrCount.Equals(input.ExpectedNsrCount)
                ) && 
                (
                    this.ExpectedMeterCount == input.ExpectedMeterCount ||
                    this.ExpectedMeterCount.Equals(input.ExpectedMeterCount)
                ) && 
                (
                    this.ExpectedEnchargeCount == input.ExpectedEnchargeCount ||
                    this.ExpectedEnchargeCount.Equals(input.ExpectedEnchargeCount)
                ) && 
                (
                    this.ExpectedEnpowerCount == input.ExpectedEnpowerCount ||
                    this.ExpectedEnpowerCount.Equals(input.ExpectedEnpowerCount)
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Encharge == input.Encharge ||
                    this.Encharge != null &&
                    input.Encharge != null &&
                    this.Encharge.SequenceEqual(input.Encharge)
                ) && 
                (
                    this.Enpower == input.Enpower ||
                    this.Enpower != null &&
                    input.Enpower != null &&
                    this.Enpower.SequenceEqual(input.Enpower)
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SystemName != null)
                {
                    hashCode = (hashCode * 59) + this.SystemName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SystemType.GetHashCode();
                hashCode = (hashCode * 59) + this.InternetConnection.GetHashCode();
                hashCode = (hashCode * 59) + this.Lease.GetHashCode();
                hashCode = (hashCode * 59) + this.Operational.GetHashCode();
                hashCode = (hashCode * 59) + this.OwnerId.GetHashCode();
                hashCode = (hashCode * 59) + this.HostId.GetHashCode();
                hashCode = (hashCode * 59) + this.AuthorizedSubcontractorId.GetHashCode();
                hashCode = (hashCode * 59) + this.InstallerId.GetHashCode();
                if (this.MaintainerName != null)
                {
                    hashCode = (hashCode * 59) + this.MaintainerName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MaintainerId.GetHashCode();
                if (this.AuthorizedSubcontractors != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorizedSubcontractors.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllowPublicAccess.GetHashCode();
                if (this.InterconnectDate != null)
                {
                    hashCode = (hashCode * 59) + this.InterconnectDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Source.GetHashCode();
                hashCode = (hashCode * 59) + this.ArrayType.GetHashCode();
                hashCode = (hashCode * 59) + this.AttachmentType.GetHashCode();
                if (this.EnsembleEnvoy != null)
                {
                    hashCode = (hashCode * 59) + this.EnsembleEnvoy.GetHashCode();
                }
                if (this.GridProfile != null)
                {
                    hashCode = (hashCode * 59) + this.GridProfile.GetHashCode();
                }
                if (this.RequestedProfile != null)
                {
                    hashCode = (hashCode * 59) + this.RequestedProfile.GetHashCode();
                }
                if (this.RequestedReportFreq != null)
                {
                    hashCode = (hashCode * 59) + this.RequestedReportFreq.GetHashCode();
                }
                if (this.Voltage != null)
                {
                    hashCode = (hashCode * 59) + this.Voltage.GetHashCode();
                }
                if (this.EnvoySerialNumbers != null)
                {
                    hashCode = (hashCode * 59) + this.EnvoySerialNumbers.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PvManufacturer.GetHashCode();
                if (this.PvManufacturerName != null)
                {
                    hashCode = (hashCode * 59) + this.PvManufacturerName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PvModel.GetHashCode();
                if (this.PvModelName != null)
                {
                    hashCode = (hashCode * 59) + this.PvModelName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PvModulePowerRating.GetHashCode();
                hashCode = (hashCode * 59) + this.PvModuleType.GetHashCode();
                hashCode = (hashCode * 59) + this.ExpectedEnvoyCount.GetHashCode();
                hashCode = (hashCode * 59) + this.ExpectedPcuCount.GetHashCode();
                hashCode = (hashCode * 59) + this.ExpectedAcbCount.GetHashCode();
                hashCode = (hashCode * 59) + this.ExpectedNsrCount.GetHashCode();
                hashCode = (hashCode * 59) + this.ExpectedMeterCount.GetHashCode();
                hashCode = (hashCode * 59) + this.ExpectedEnchargeCount.GetHashCode();
                hashCode = (hashCode * 59) + this.ExpectedEnpowerCount.GetHashCode();
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.Encharge != null)
                {
                    hashCode = (hashCode * 59) + this.Encharge.GetHashCode();
                }
                if (this.Enpower != null)
                {
                    hashCode = (hashCode * 59) + this.Enpower.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PvModulePowerRating (float) minimum
            if (this.PvModulePowerRating < (float)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PvModulePowerRating, must be a value greater than or equal to 0.", new [] { "PvModulePowerRating" });
            }

            yield break;
        }
    }

}
