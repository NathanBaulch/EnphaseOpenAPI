/*
 * The Enphase Commissioning API
 *
 * Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Commissioning.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Commissioning.Model
{
    /// <summary>
    /// SystemArraysInventoryDetailsInner
    /// </summary>
    [DataContract(Name = "SystemArrays_inventory_details_inner")]
    public partial class SystemArraysInventoryDetailsInner : IEquatable<SystemArraysInventoryDetailsInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemArraysInventoryDetailsInner" /> class.
        /// </summary>
        /// <param name="type">Device type..</param>
        /// <param name="count">Device count..</param>
        /// <param name="serialNum">Device serial number..</param>
        public SystemArraysInventoryDetailsInner(string type = default(string), int count = default(int), string serialNum = default(string))
        {
            this.Type = type;
            this.Count = count;
            this.SerialNum = serialNum;
        }

        /// <summary>
        /// Device type.
        /// </summary>
        /// <value>Device type.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Device count.
        /// </summary>
        /// <value>Device count.</value>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        public int Count { get; set; }

        /// <summary>
        /// Device serial number.
        /// </summary>
        /// <value>Device serial number.</value>
        [DataMember(Name = "serialNum", EmitDefaultValue = false)]
        public string SerialNum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemArraysInventoryDetailsInner {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  SerialNum: ").Append(SerialNum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemArraysInventoryDetailsInner);
        }

        /// <summary>
        /// Returns true if SystemArraysInventoryDetailsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemArraysInventoryDetailsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemArraysInventoryDetailsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.SerialNum == input.SerialNum ||
                    (this.SerialNum != null &&
                    this.SerialNum.Equals(input.SerialNum))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                if (this.SerialNum != null)
                {
                    hashCode = (hashCode * 59) + this.SerialNum.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
