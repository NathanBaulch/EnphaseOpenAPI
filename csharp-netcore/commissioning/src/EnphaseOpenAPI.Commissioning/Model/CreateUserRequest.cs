/*
 * The Enphase Commissioning API
 *
 * Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Commissioning.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Commissioning.Model
{
    /// <summary>
    /// CreateUserRequest
    /// </summary>
    [DataContract(Name = "CreateUserRequest")]
    public partial class CreateUserRequest : IEquatable<CreateUserRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateUserRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateUserRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateUserRequest" /> class.
        /// </summary>
        /// <param name="email">Email address of the user. Must be unique within Enlighten. Required. (required).</param>
        /// <param name="enlightenEmails">Whether the user receives automated emails from Enlighten. Default false..</param>
        /// <param name="enlightenView">Which view of Enlighten the user has. Options &#39;my&#39; for MyEnlighten, &#39;manager&#39; for Enlighten Manager. Default &#39;my&#39;. Users who do not belong to companies should be set to &#39;my&#39;. You must have an agreement with Enphase Energy to set a user to &#39;manager&#39;. Company ID is required when enlighten_view is &#39;manager&#39;..</param>
        /// <param name="firstName">User&#39;s first name. Required. (required).</param>
        /// <param name="lastName">User&#39;s last name. Required. (required).</param>
        /// <param name="phone">Telephone number of the user. Optional..</param>
        /// <param name="companyId">Enlighten-generated ID of the company to which the user belongs, if any..</param>
        public CreateUserRequest(string email = default(string), bool enlightenEmails = default(bool), string enlightenView = default(string), string firstName = default(string), string lastName = default(string), string phone = default(string), int companyId = default(int))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for CreateUserRequest and cannot be null");
            }
            this.Email = email;
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new ArgumentNullException("firstName is a required property for CreateUserRequest and cannot be null");
            }
            this.FirstName = firstName;
            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new ArgumentNullException("lastName is a required property for CreateUserRequest and cannot be null");
            }
            this.LastName = lastName;
            this.EnlightenEmails = enlightenEmails;
            this.EnlightenView = enlightenView;
            this.Phone = phone;
            this.CompanyId = companyId;
        }

        /// <summary>
        /// Email address of the user. Must be unique within Enlighten. Required.
        /// </summary>
        /// <value>Email address of the user. Must be unique within Enlighten. Required.</value>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Whether the user receives automated emails from Enlighten. Default false.
        /// </summary>
        /// <value>Whether the user receives automated emails from Enlighten. Default false.</value>
        [DataMember(Name = "enlighten_emails", EmitDefaultValue = true)]
        public bool EnlightenEmails { get; set; }

        /// <summary>
        /// Which view of Enlighten the user has. Options &#39;my&#39; for MyEnlighten, &#39;manager&#39; for Enlighten Manager. Default &#39;my&#39;. Users who do not belong to companies should be set to &#39;my&#39;. You must have an agreement with Enphase Energy to set a user to &#39;manager&#39;. Company ID is required when enlighten_view is &#39;manager&#39;.
        /// </summary>
        /// <value>Which view of Enlighten the user has. Options &#39;my&#39; for MyEnlighten, &#39;manager&#39; for Enlighten Manager. Default &#39;my&#39;. Users who do not belong to companies should be set to &#39;my&#39;. You must have an agreement with Enphase Energy to set a user to &#39;manager&#39;. Company ID is required when enlighten_view is &#39;manager&#39;.</value>
        [DataMember(Name = "enlighten_view", EmitDefaultValue = false)]
        public string EnlightenView { get; set; }

        /// <summary>
        /// User&#39;s first name. Required.
        /// </summary>
        /// <value>User&#39;s first name. Required.</value>
        [DataMember(Name = "first_name", IsRequired = true, EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// User&#39;s last name. Required.
        /// </summary>
        /// <value>User&#39;s last name. Required.</value>
        [DataMember(Name = "last_name", IsRequired = true, EmitDefaultValue = true)]
        public string LastName { get; set; }

        /// <summary>
        /// Telephone number of the user. Optional.
        /// </summary>
        /// <value>Telephone number of the user. Optional.</value>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// Enlighten-generated ID of the company to which the user belongs, if any.
        /// </summary>
        /// <value>Enlighten-generated ID of the company to which the user belongs, if any.</value>
        [DataMember(Name = "company_id", EmitDefaultValue = false)]
        public int CompanyId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateUserRequest {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EnlightenEmails: ").Append(EnlightenEmails).Append("\n");
            sb.Append("  EnlightenView: ").Append(EnlightenView).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateUserRequest);
        }

        /// <summary>
        /// Returns true if CreateUserRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateUserRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateUserRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.EnlightenEmails == input.EnlightenEmails ||
                    this.EnlightenEmails.Equals(input.EnlightenEmails)
                ) && 
                (
                    this.EnlightenView == input.EnlightenView ||
                    (this.EnlightenView != null &&
                    this.EnlightenView.Equals(input.EnlightenView))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EnlightenEmails.GetHashCode();
                if (this.EnlightenView != null)
                {
                    hashCode = (hashCode * 59) + this.EnlightenView.GetHashCode();
                }
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.Phone != null)
                {
                    hashCode = (hashCode * 59) + this.Phone.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Phone (string) maxLength
            if (this.Phone != null && this.Phone.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Phone, length must be less than 255.", new [] { "Phone" });
            }

            yield break;
        }
    }

}
