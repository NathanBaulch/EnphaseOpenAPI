/*
 * The Enphase Commissioning API
 *
 * Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Commissioning.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Commissioning.Model
{
    /// <summary>
    /// UpdateSystemArraysRequest
    /// </summary>
    [DataContract(Name = "UpdateSystemArraysRequest")]
    public partial class UpdateSystemArraysRequest : IEquatable<UpdateSystemArraysRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateSystemArraysRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateSystemArraysRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateSystemArraysRequest" /> class.
        /// </summary>
        /// <param name="angle">Angle of the system. (required).</param>
        /// <param name="arrays">arrays (required).</param>
        public UpdateSystemArraysRequest(int angle = default(int), List<ArrayParams> arrays = default(List<ArrayParams>))
        {
            this.Angle = angle;
            // to ensure "arrays" is required (not null)
            if (arrays == null)
            {
                throw new ArgumentNullException("arrays is a required property for UpdateSystemArraysRequest and cannot be null");
            }
            this.Arrays = arrays;
        }

        /// <summary>
        /// Angle of the system.
        /// </summary>
        /// <value>Angle of the system.</value>
        [DataMember(Name = "angle", IsRequired = true, EmitDefaultValue = true)]
        public int Angle { get; set; }

        /// <summary>
        /// Gets or Sets Arrays
        /// </summary>
        [DataMember(Name = "arrays", IsRequired = true, EmitDefaultValue = true)]
        public List<ArrayParams> Arrays { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateSystemArraysRequest {\n");
            sb.Append("  Angle: ").Append(Angle).Append("\n");
            sb.Append("  Arrays: ").Append(Arrays).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateSystemArraysRequest);
        }

        /// <summary>
        /// Returns true if UpdateSystemArraysRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateSystemArraysRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateSystemArraysRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Angle == input.Angle ||
                    this.Angle.Equals(input.Angle)
                ) && 
                (
                    this.Arrays == input.Arrays ||
                    this.Arrays != null &&
                    input.Arrays != null &&
                    this.Arrays.SequenceEqual(input.Arrays)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Angle.GetHashCode();
                if (this.Arrays != null)
                {
                    hashCode = (hashCode * 59) + this.Arrays.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
