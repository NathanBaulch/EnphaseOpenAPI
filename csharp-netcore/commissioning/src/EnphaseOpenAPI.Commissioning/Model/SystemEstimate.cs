/*
 * The Enphase Commissioning API
 *
 * Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Commissioning.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Commissioning.Model
{
    /// <summary>
    /// SystemEstimate
    /// </summary>
    [DataContract(Name = "SystemEstimate")]
    public partial class SystemEstimate : IEquatable<SystemEstimate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemEstimate" /> class.
        /// </summary>
        /// <param name="systemId">System this estimate is for..</param>
        /// <param name="degradeFactor">Annual production degradation factor for the system, from year 0 of the system&#39;s life. Must be 0.0% or higher. Default 0.5%..</param>
        /// <param name="monthEstimates">Estimated monthly production of the system, in kWh. A value for each month must be provided, and must be greater than 0. Send an empty array if you need to remove monthly estimates. Default empty array..</param>
        public SystemEstimate(int systemId = default(int), string degradeFactor = default(string), List<string> monthEstimates = default(List<string>))
        {
            this.SystemId = systemId;
            this.DegradeFactor = degradeFactor;
            this.MonthEstimates = monthEstimates;
        }

        /// <summary>
        /// System this estimate is for.
        /// </summary>
        /// <value>System this estimate is for.</value>
        [DataMember(Name = "system_id", EmitDefaultValue = false)]
        public int SystemId { get; set; }

        /// <summary>
        /// Annual production degradation factor for the system, from year 0 of the system&#39;s life. Must be 0.0% or higher. Default 0.5%.
        /// </summary>
        /// <value>Annual production degradation factor for the system, from year 0 of the system&#39;s life. Must be 0.0% or higher. Default 0.5%.</value>
        [DataMember(Name = "degrade_factor", EmitDefaultValue = false)]
        public string DegradeFactor { get; set; }

        /// <summary>
        /// Estimated monthly production of the system, in kWh. A value for each month must be provided, and must be greater than 0. Send an empty array if you need to remove monthly estimates. Default empty array.
        /// </summary>
        /// <value>Estimated monthly production of the system, in kWh. A value for each month must be provided, and must be greater than 0. Send an empty array if you need to remove monthly estimates. Default empty array.</value>
        [DataMember(Name = "month_estimates", EmitDefaultValue = false)]
        public List<string> MonthEstimates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemEstimate {\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  DegradeFactor: ").Append(DegradeFactor).Append("\n");
            sb.Append("  MonthEstimates: ").Append(MonthEstimates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemEstimate);
        }

        /// <summary>
        /// Returns true if SystemEstimate instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemEstimate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemEstimate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SystemId == input.SystemId ||
                    this.SystemId.Equals(input.SystemId)
                ) && 
                (
                    this.DegradeFactor == input.DegradeFactor ||
                    (this.DegradeFactor != null &&
                    this.DegradeFactor.Equals(input.DegradeFactor))
                ) && 
                (
                    this.MonthEstimates == input.MonthEstimates ||
                    this.MonthEstimates != null &&
                    input.MonthEstimates != null &&
                    this.MonthEstimates.SequenceEqual(input.MonthEstimates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SystemId.GetHashCode();
                if (this.DegradeFactor != null)
                {
                    hashCode = (hashCode * 59) + this.DegradeFactor.GetHashCode();
                }
                if (this.MonthEstimates != null)
                {
                    hashCode = (hashCode * 59) + this.MonthEstimates.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
