/*
 * The Enphase Commissioning API
 *
 * Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Commissioning.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Commissioning.Model
{
    /// <summary>
    /// TariffSeasonsInnerDaysInner
    /// </summary>
    [DataContract(Name = "TariffSeasons_inner_days_inner")]
    public partial class TariffSeasonsInnerDaysInner : IEquatable<TariffSeasonsInnerDaysInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TariffSeasonsInnerDaysInner" /> class.
        /// </summary>
        /// <param name="id">ToU days ID. e.g&#x3D;&#39;all_days&#39;..</param>
        /// <param name="days">Comma separated days. e.g&#x3D;&#39;Sun,Mon,Tue,Wed,Thu,Fri,Sat&#39;..</param>
        /// <param name="mustChargeStart">Must charge start field. e.g&#x3D;0..</param>
        /// <param name="mustChargeDuration">Must charge duration field. e.g&#x3D;0..</param>
        /// <param name="periods">Periods..</param>
        public TariffSeasonsInnerDaysInner(string id = default(string), string days = default(string), int mustChargeStart = default(int), int mustChargeDuration = default(int), List<TariffSeasonsInnerDaysInnerPeriodsInner> periods = default(List<TariffSeasonsInnerDaysInnerPeriodsInner>))
        {
            this.Id = id;
            this.Days = days;
            this.MustChargeStart = mustChargeStart;
            this.MustChargeDuration = mustChargeDuration;
            this.Periods = periods;
        }

        /// <summary>
        /// ToU days ID. e.g&#x3D;&#39;all_days&#39;.
        /// </summary>
        /// <value>ToU days ID. e.g&#x3D;&#39;all_days&#39;.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Comma separated days. e.g&#x3D;&#39;Sun,Mon,Tue,Wed,Thu,Fri,Sat&#39;.
        /// </summary>
        /// <value>Comma separated days. e.g&#x3D;&#39;Sun,Mon,Tue,Wed,Thu,Fri,Sat&#39;.</value>
        [DataMember(Name = "days", EmitDefaultValue = false)]
        public string Days { get; set; }

        /// <summary>
        /// Must charge start field. e.g&#x3D;0.
        /// </summary>
        /// <value>Must charge start field. e.g&#x3D;0.</value>
        [DataMember(Name = "must_charge_start", EmitDefaultValue = false)]
        public int MustChargeStart { get; set; }

        /// <summary>
        /// Must charge duration field. e.g&#x3D;0.
        /// </summary>
        /// <value>Must charge duration field. e.g&#x3D;0.</value>
        [DataMember(Name = "must_charge_duration", EmitDefaultValue = false)]
        public int MustChargeDuration { get; set; }

        /// <summary>
        /// Periods.
        /// </summary>
        /// <value>Periods.</value>
        [DataMember(Name = "periods", EmitDefaultValue = false)]
        public List<TariffSeasonsInnerDaysInnerPeriodsInner> Periods { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TariffSeasonsInnerDaysInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  MustChargeStart: ").Append(MustChargeStart).Append("\n");
            sb.Append("  MustChargeDuration: ").Append(MustChargeDuration).Append("\n");
            sb.Append("  Periods: ").Append(Periods).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TariffSeasonsInnerDaysInner);
        }

        /// <summary>
        /// Returns true if TariffSeasonsInnerDaysInner instances are equal
        /// </summary>
        /// <param name="input">Instance of TariffSeasonsInnerDaysInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TariffSeasonsInnerDaysInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Days == input.Days ||
                    (this.Days != null &&
                    this.Days.Equals(input.Days))
                ) && 
                (
                    this.MustChargeStart == input.MustChargeStart ||
                    this.MustChargeStart.Equals(input.MustChargeStart)
                ) && 
                (
                    this.MustChargeDuration == input.MustChargeDuration ||
                    this.MustChargeDuration.Equals(input.MustChargeDuration)
                ) && 
                (
                    this.Periods == input.Periods ||
                    this.Periods != null &&
                    input.Periods != null &&
                    this.Periods.SequenceEqual(input.Periods)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Days != null)
                {
                    hashCode = (hashCode * 59) + this.Days.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MustChargeStart.GetHashCode();
                hashCode = (hashCode * 59) + this.MustChargeDuration.GetHashCode();
                if (this.Periods != null)
                {
                    hashCode = (hashCode * 59) + this.Periods.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
