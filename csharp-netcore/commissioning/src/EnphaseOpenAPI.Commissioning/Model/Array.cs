/*
 * The Enphase Commissioning API
 *
 * Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Commissioning.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Commissioning.Model
{
    /// <summary>
    /// Array
    /// </summary>
    [DataContract(Name = "Array")]
    public partial class Array : IEquatable<Array>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Array" /> class.
        /// </summary>
        /// <param name="id">ID of the array..</param>
        /// <param name="label">Name of the array..</param>
        /// <param name="angle">Angle of the array..</param>
        /// <param name="tilt">Tilt of the array..</param>
        /// <param name="reportingEnvoys">List of envoys serial numbers..</param>
        /// <param name="provisionedEnvoy">Provisioned envoy..</param>
        /// <param name="updatedAt">Last updated Epoch time..</param>
        /// <param name="left">Left axis position of array..</param>
        /// <param name="top">Top axis position of array..</param>
        /// <param name="modules">modules.</param>
        public Array(int id = default(int), string label = default(string), int angle = default(int), string tilt = default(string), List<string> reportingEnvoys = default(List<string>), string provisionedEnvoy = default(string), long updatedAt = default(long), int left = default(int), int top = default(int), List<ArrayModulesInner> modules = default(List<ArrayModulesInner>))
        {
            this.Id = id;
            this.Label = label;
            this.Angle = angle;
            this.Tilt = tilt;
            this.ReportingEnvoys = reportingEnvoys;
            this.ProvisionedEnvoy = provisionedEnvoy;
            this.UpdatedAt = updatedAt;
            this.Left = left;
            this.Top = top;
            this.Modules = modules;
        }

        /// <summary>
        /// ID of the array.
        /// </summary>
        /// <value>ID of the array.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Name of the array.
        /// </summary>
        /// <value>Name of the array.</value>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// Angle of the array.
        /// </summary>
        /// <value>Angle of the array.</value>
        [DataMember(Name = "angle", EmitDefaultValue = false)]
        public int Angle { get; set; }

        /// <summary>
        /// Tilt of the array.
        /// </summary>
        /// <value>Tilt of the array.</value>
        [DataMember(Name = "tilt", EmitDefaultValue = false)]
        public string Tilt { get; set; }

        /// <summary>
        /// List of envoys serial numbers.
        /// </summary>
        /// <value>List of envoys serial numbers.</value>
        [DataMember(Name = "reporting_envoys", EmitDefaultValue = false)]
        public List<string> ReportingEnvoys { get; set; }

        /// <summary>
        /// Provisioned envoy.
        /// </summary>
        /// <value>Provisioned envoy.</value>
        [DataMember(Name = "provisioned_envoy", EmitDefaultValue = false)]
        public string ProvisionedEnvoy { get; set; }

        /// <summary>
        /// Last updated Epoch time.
        /// </summary>
        /// <value>Last updated Epoch time.</value>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public long UpdatedAt { get; set; }

        /// <summary>
        /// Left axis position of array.
        /// </summary>
        /// <value>Left axis position of array.</value>
        [DataMember(Name = "left", EmitDefaultValue = false)]
        public int Left { get; set; }

        /// <summary>
        /// Top axis position of array.
        /// </summary>
        /// <value>Top axis position of array.</value>
        [DataMember(Name = "top", EmitDefaultValue = false)]
        public int Top { get; set; }

        /// <summary>
        /// Gets or Sets Modules
        /// </summary>
        [DataMember(Name = "modules", EmitDefaultValue = false)]
        public List<ArrayModulesInner> Modules { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Array {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Angle: ").Append(Angle).Append("\n");
            sb.Append("  Tilt: ").Append(Tilt).Append("\n");
            sb.Append("  ReportingEnvoys: ").Append(ReportingEnvoys).Append("\n");
            sb.Append("  ProvisionedEnvoy: ").Append(ProvisionedEnvoy).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Left: ").Append(Left).Append("\n");
            sb.Append("  Top: ").Append(Top).Append("\n");
            sb.Append("  Modules: ").Append(Modules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Array);
        }

        /// <summary>
        /// Returns true if Array instances are equal
        /// </summary>
        /// <param name="input">Instance of Array to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Array input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Angle == input.Angle ||
                    this.Angle.Equals(input.Angle)
                ) && 
                (
                    this.Tilt == input.Tilt ||
                    (this.Tilt != null &&
                    this.Tilt.Equals(input.Tilt))
                ) && 
                (
                    this.ReportingEnvoys == input.ReportingEnvoys ||
                    this.ReportingEnvoys != null &&
                    input.ReportingEnvoys != null &&
                    this.ReportingEnvoys.SequenceEqual(input.ReportingEnvoys)
                ) && 
                (
                    this.ProvisionedEnvoy == input.ProvisionedEnvoy ||
                    (this.ProvisionedEnvoy != null &&
                    this.ProvisionedEnvoy.Equals(input.ProvisionedEnvoy))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    this.UpdatedAt.Equals(input.UpdatedAt)
                ) && 
                (
                    this.Left == input.Left ||
                    this.Left.Equals(input.Left)
                ) && 
                (
                    this.Top == input.Top ||
                    this.Top.Equals(input.Top)
                ) && 
                (
                    this.Modules == input.Modules ||
                    this.Modules != null &&
                    input.Modules != null &&
                    this.Modules.SequenceEqual(input.Modules)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Angle.GetHashCode();
                if (this.Tilt != null)
                {
                    hashCode = (hashCode * 59) + this.Tilt.GetHashCode();
                }
                if (this.ReportingEnvoys != null)
                {
                    hashCode = (hashCode * 59) + this.ReportingEnvoys.GetHashCode();
                }
                if (this.ProvisionedEnvoy != null)
                {
                    hashCode = (hashCode * 59) + this.ProvisionedEnvoy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                hashCode = (hashCode * 59) + this.Left.GetHashCode();
                hashCode = (hashCode * 59) + this.Top.GetHashCode();
                if (this.Modules != null)
                {
                    hashCode = (hashCode * 59) + this.Modules.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
