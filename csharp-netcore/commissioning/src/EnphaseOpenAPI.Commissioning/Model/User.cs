/*
 * The Enphase Commissioning API
 *
 * Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Commissioning.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Commissioning.Model
{
    /// <summary>
    /// User
    /// </summary>
    [DataContract(Name = "User")]
    public partial class User : IEquatable<User>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="active">Whether the user is allowed to log in to Enlighten..</param>
        /// <param name="userRoles">What type of user this is in Enlighten. For self installer user user_roles will be [&#39;self_installer&#39;]. For other users user_roles will be empty..</param>
        /// <param name="email">Email address of the user..</param>
        /// <param name="enlightenEmails">Whether the user receives automated emails from Enlighten..</param>
        /// <param name="enlightenView">Which view of Enlighten the user has..</param>
        /// <param name="firstName">User&#39;s first name..</param>
        /// <param name="lastName">User&#39;s last name..</param>
        /// <param name="phone">Telephone number of the user..</param>
        /// <param name="uri">URI to the show() method for the user. System-generated..</param>
        /// <param name="userId">Enlighten ID of the user. System-generated..</param>
        /// <param name="updatedAt">Last updated date and time in Epoch format..</param>
        /// <param name="company">company.</param>
        public User(bool active = default(bool), List<UserRoleEnum> userRoles = default(List<UserRoleEnum>), string email = default(string), bool enlightenEmails = default(bool), string enlightenView = default(string), string firstName = default(string), string lastName = default(string), string phone = default(string), string uri = default(string), int userId = default(int), long updatedAt = default(long), Company company = default(Company))
        {
            this.Active = active;
            this.UserRoles = userRoles;
            this.Email = email;
            this.EnlightenEmails = enlightenEmails;
            this.EnlightenView = enlightenView;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.Phone = phone;
            this.Uri = uri;
            this.UserId = userId;
            this.UpdatedAt = updatedAt;
            this.Company = company;
        }

        /// <summary>
        /// Whether the user is allowed to log in to Enlighten.
        /// </summary>
        /// <value>Whether the user is allowed to log in to Enlighten.</value>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// What type of user this is in Enlighten. For self installer user user_roles will be [&#39;self_installer&#39;]. For other users user_roles will be empty.
        /// </summary>
        /// <value>What type of user this is in Enlighten. For self installer user user_roles will be [&#39;self_installer&#39;]. For other users user_roles will be empty.</value>
        [DataMember(Name = "user_roles", EmitDefaultValue = false)]
        public List<UserRoleEnum> UserRoles { get; set; }

        /// <summary>
        /// Email address of the user.
        /// </summary>
        /// <value>Email address of the user.</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Whether the user receives automated emails from Enlighten.
        /// </summary>
        /// <value>Whether the user receives automated emails from Enlighten.</value>
        [DataMember(Name = "enlighten_emails", EmitDefaultValue = true)]
        public bool EnlightenEmails { get; set; }

        /// <summary>
        /// Which view of Enlighten the user has.
        /// </summary>
        /// <value>Which view of Enlighten the user has.</value>
        [DataMember(Name = "enlighten_view", EmitDefaultValue = false)]
        public string EnlightenView { get; set; }

        /// <summary>
        /// User&#39;s first name.
        /// </summary>
        /// <value>User&#39;s first name.</value>
        [DataMember(Name = "first_name", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// User&#39;s last name.
        /// </summary>
        /// <value>User&#39;s last name.</value>
        [DataMember(Name = "last_name", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// Telephone number of the user.
        /// </summary>
        /// <value>Telephone number of the user.</value>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// URI to the show() method for the user. System-generated.
        /// </summary>
        /// <value>URI to the show() method for the user. System-generated.</value>
        [DataMember(Name = "uri", EmitDefaultValue = false)]
        public string Uri { get; set; }

        /// <summary>
        /// Enlighten ID of the user. System-generated.
        /// </summary>
        /// <value>Enlighten ID of the user. System-generated.</value>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public int UserId { get; set; }

        /// <summary>
        /// Last updated date and time in Epoch format.
        /// </summary>
        /// <value>Last updated date and time in Epoch format.</value>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public long UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name = "company", EmitDefaultValue = false)]
        public Company Company { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  UserRoles: ").Append(UserRoles).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EnlightenEmails: ").Append(EnlightenEmails).Append("\n");
            sb.Append("  EnlightenView: ").Append(EnlightenView).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as User);
        }

        /// <summary>
        /// Returns true if User instances are equal
        /// </summary>
        /// <param name="input">Instance of User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(User input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.UserRoles == input.UserRoles ||
                    this.UserRoles != null &&
                    input.UserRoles != null &&
                    this.UserRoles.SequenceEqual(input.UserRoles)
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.EnlightenEmails == input.EnlightenEmails ||
                    this.EnlightenEmails.Equals(input.EnlightenEmails)
                ) && 
                (
                    this.EnlightenView == input.EnlightenView ||
                    (this.EnlightenView != null &&
                    this.EnlightenView.Equals(input.EnlightenView))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.UserId == input.UserId ||
                    this.UserId.Equals(input.UserId)
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    this.UpdatedAt.Equals(input.UpdatedAt)
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                if (this.UserRoles != null)
                {
                    hashCode = (hashCode * 59) + this.UserRoles.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EnlightenEmails.GetHashCode();
                if (this.EnlightenView != null)
                {
                    hashCode = (hashCode * 59) + this.EnlightenView.GetHashCode();
                }
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.Phone != null)
                {
                    hashCode = (hashCode * 59) + this.Phone.GetHashCode();
                }
                if (this.Uri != null)
                {
                    hashCode = (hashCode * 59) + this.Uri.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                if (this.Company != null)
                {
                    hashCode = (hashCode * 59) + this.Company.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
