/*
 * The Enphase Commissioning API
 *
 * Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Commissioning.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Commissioning.Model
{
    /// <summary>
    /// SystemEnchargeInner
    /// </summary>
    [DataContract(Name = "System_encharge_inner")]
    public partial class SystemEnchargeInner : IEquatable<SystemEnchargeInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemEnchargeInner" /> class.
        /// </summary>
        /// <param name="envoySerialNumber">Envoy serial number..</param>
        /// <param name="enchargeSerialNumbers">Encharge serial numbers..</param>
        public SystemEnchargeInner(string envoySerialNumber = default(string), List<string> enchargeSerialNumbers = default(List<string>))
        {
            this.EnvoySerialNumber = envoySerialNumber;
            this.EnchargeSerialNumbers = enchargeSerialNumbers;
        }

        /// <summary>
        /// Envoy serial number.
        /// </summary>
        /// <value>Envoy serial number.</value>
        [DataMember(Name = "envoy_serial_number", EmitDefaultValue = false)]
        public string EnvoySerialNumber { get; set; }

        /// <summary>
        /// Encharge serial numbers.
        /// </summary>
        /// <value>Encharge serial numbers.</value>
        [DataMember(Name = "encharge_serial_numbers", EmitDefaultValue = false)]
        public List<string> EnchargeSerialNumbers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemEnchargeInner {\n");
            sb.Append("  EnvoySerialNumber: ").Append(EnvoySerialNumber).Append("\n");
            sb.Append("  EnchargeSerialNumbers: ").Append(EnchargeSerialNumbers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemEnchargeInner);
        }

        /// <summary>
        /// Returns true if SystemEnchargeInner instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemEnchargeInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemEnchargeInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EnvoySerialNumber == input.EnvoySerialNumber ||
                    (this.EnvoySerialNumber != null &&
                    this.EnvoySerialNumber.Equals(input.EnvoySerialNumber))
                ) && 
                (
                    this.EnchargeSerialNumbers == input.EnchargeSerialNumbers ||
                    this.EnchargeSerialNumbers != null &&
                    input.EnchargeSerialNumbers != null &&
                    this.EnchargeSerialNumbers.SequenceEqual(input.EnchargeSerialNumbers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnvoySerialNumber != null)
                {
                    hashCode = (hashCode * 59) + this.EnvoySerialNumber.GetHashCode();
                }
                if (this.EnchargeSerialNumbers != null)
                {
                    hashCode = (hashCode * 59) + this.EnchargeSerialNumbers.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
