/*
 * The Enphase Commissioning API
 *
 * Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Commissioning.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Commissioning.Model
{
    /// <summary>
    /// SystemArrayModulesInner
    /// </summary>
    [DataContract(Name = "SystemArray_modules_inner")]
    public partial class SystemArrayModulesInner : IEquatable<SystemArrayModulesInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemArrayModulesInner" /> class.
        /// </summary>
        /// <param name="id">ID of the module..</param>
        /// <param name="left">Left axis position of module..</param>
        /// <param name="top">Top axis position of module..</param>
        /// <param name="angle">Angle of the module..</param>
        /// <param name="serialNum">Inverter serial number mapped with this module..</param>
        public SystemArrayModulesInner(int id = default(int), int left = default(int), int top = default(int), int angle = default(int), string serialNum = default(string))
        {
            this.Id = id;
            this.Left = left;
            this.Top = top;
            this.Angle = angle;
            this.SerialNum = serialNum;
        }

        /// <summary>
        /// ID of the module.
        /// </summary>
        /// <value>ID of the module.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Left axis position of module.
        /// </summary>
        /// <value>Left axis position of module.</value>
        [DataMember(Name = "left", EmitDefaultValue = false)]
        public int Left { get; set; }

        /// <summary>
        /// Top axis position of module.
        /// </summary>
        /// <value>Top axis position of module.</value>
        [DataMember(Name = "top", EmitDefaultValue = false)]
        public int Top { get; set; }

        /// <summary>
        /// Angle of the module.
        /// </summary>
        /// <value>Angle of the module.</value>
        [DataMember(Name = "angle", EmitDefaultValue = false)]
        public int Angle { get; set; }

        /// <summary>
        /// Inverter serial number mapped with this module.
        /// </summary>
        /// <value>Inverter serial number mapped with this module.</value>
        [DataMember(Name = "serial_num", EmitDefaultValue = false)]
        public string SerialNum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemArrayModulesInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Left: ").Append(Left).Append("\n");
            sb.Append("  Top: ").Append(Top).Append("\n");
            sb.Append("  Angle: ").Append(Angle).Append("\n");
            sb.Append("  SerialNum: ").Append(SerialNum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemArrayModulesInner);
        }

        /// <summary>
        /// Returns true if SystemArrayModulesInner instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemArrayModulesInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemArrayModulesInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Left == input.Left ||
                    this.Left.Equals(input.Left)
                ) && 
                (
                    this.Top == input.Top ||
                    this.Top.Equals(input.Top)
                ) && 
                (
                    this.Angle == input.Angle ||
                    this.Angle.Equals(input.Angle)
                ) && 
                (
                    this.SerialNum == input.SerialNum ||
                    (this.SerialNum != null &&
                    this.SerialNum.Equals(input.SerialNum))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.Left.GetHashCode();
                hashCode = (hashCode * 59) + this.Top.GetHashCode();
                hashCode = (hashCode * 59) + this.Angle.GetHashCode();
                if (this.SerialNum != null)
                {
                    hashCode = (hashCode * 59) + this.SerialNum.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
