/*
 * The Enphase Commissioning API
 *
 * Commissioning API can be used to create and update activations on a site, manage companies and users, update Tariff, etc.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Commissioning.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Commissioning.Model
{
    /// <summary>
    /// SystemArraysLayersInner
    /// </summary>
    [DataContract(Name = "SystemArrays_layers_inner")]
    public partial class SystemArraysLayersInner : IEquatable<SystemArraysLayersInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemArraysLayersInner" /> class.
        /// </summary>
        /// <param name="file">Background image url..</param>
        /// <param name="scale">Zoom level..</param>
        /// <param name="angle">Angle of the layer..</param>
        /// <param name="opacity">Opacity of the layer..</param>
        /// <param name="width">Width of the layer..</param>
        /// <param name="height">Height of the layer..</param>
        /// <param name="left">Left of the layer..</param>
        /// <param name="top">Top of the layer..</param>
        public SystemArraysLayersInner(string file = default(string), int scale = default(int), int angle = default(int), int opacity = default(int), int width = default(int), int height = default(int), int left = default(int), int top = default(int))
        {
            this.File = file;
            this.Scale = scale;
            this.Angle = angle;
            this.Opacity = opacity;
            this.Width = width;
            this.Height = height;
            this.Left = left;
            this.Top = top;
        }

        /// <summary>
        /// Background image url.
        /// </summary>
        /// <value>Background image url.</value>
        [DataMember(Name = "file", EmitDefaultValue = false)]
        public string File { get; set; }

        /// <summary>
        /// Zoom level.
        /// </summary>
        /// <value>Zoom level.</value>
        [DataMember(Name = "scale", EmitDefaultValue = false)]
        public int Scale { get; set; }

        /// <summary>
        /// Angle of the layer.
        /// </summary>
        /// <value>Angle of the layer.</value>
        [DataMember(Name = "angle", EmitDefaultValue = false)]
        public int Angle { get; set; }

        /// <summary>
        /// Opacity of the layer.
        /// </summary>
        /// <value>Opacity of the layer.</value>
        [DataMember(Name = "opacity", EmitDefaultValue = false)]
        public int Opacity { get; set; }

        /// <summary>
        /// Width of the layer.
        /// </summary>
        /// <value>Width of the layer.</value>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public int Width { get; set; }

        /// <summary>
        /// Height of the layer.
        /// </summary>
        /// <value>Height of the layer.</value>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public int Height { get; set; }

        /// <summary>
        /// Left of the layer.
        /// </summary>
        /// <value>Left of the layer.</value>
        [DataMember(Name = "left", EmitDefaultValue = false)]
        public int Left { get; set; }

        /// <summary>
        /// Top of the layer.
        /// </summary>
        /// <value>Top of the layer.</value>
        [DataMember(Name = "top", EmitDefaultValue = false)]
        public int Top { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemArraysLayersInner {\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  Scale: ").Append(Scale).Append("\n");
            sb.Append("  Angle: ").Append(Angle).Append("\n");
            sb.Append("  Opacity: ").Append(Opacity).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Left: ").Append(Left).Append("\n");
            sb.Append("  Top: ").Append(Top).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemArraysLayersInner);
        }

        /// <summary>
        /// Returns true if SystemArraysLayersInner instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemArraysLayersInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemArraysLayersInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.File == input.File ||
                    (this.File != null &&
                    this.File.Equals(input.File))
                ) && 
                (
                    this.Scale == input.Scale ||
                    this.Scale.Equals(input.Scale)
                ) && 
                (
                    this.Angle == input.Angle ||
                    this.Angle.Equals(input.Angle)
                ) && 
                (
                    this.Opacity == input.Opacity ||
                    this.Opacity.Equals(input.Opacity)
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                ) && 
                (
                    this.Left == input.Left ||
                    this.Left.Equals(input.Left)
                ) && 
                (
                    this.Top == input.Top ||
                    this.Top.Equals(input.Top)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.File != null)
                {
                    hashCode = (hashCode * 59) + this.File.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Scale.GetHashCode();
                hashCode = (hashCode * 59) + this.Angle.GetHashCode();
                hashCode = (hashCode * 59) + this.Opacity.GetHashCode();
                hashCode = (hashCode * 59) + this.Width.GetHashCode();
                hashCode = (hashCode * 59) + this.Height.GetHashCode();
                hashCode = (hashCode * 59) + this.Left.GetHashCode();
                hashCode = (hashCode * 59) + this.Top.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
