/*
 * The Enphase Monitoring API
 *
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EnphaseOpenAPI.Monitoring.Client;
using EnphaseOpenAPI.Monitoring.Client.Auth;
using EnphaseOpenAPI.Monitoring.Model;

namespace EnphaseOpenAPI.Monitoring.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeviceLevelProductionMonitoringApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieves telemetry for single ACB
        /// </summary>
        /// <remarks>
        /// Retrieves telemetry for single ACB. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="serialNo">Serial number of the acb.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatteryDeviceTelemetry</returns>
        BatteryDeviceTelemetry GetSystemAcbDeviceTelemetry(int systemId, string serialNo, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0);

        /// <summary>
        /// Retrieves telemetry for single ACB
        /// </summary>
        /// <remarks>
        /// Retrieves telemetry for single ACB. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="serialNo">Serial number of the acb.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatteryDeviceTelemetry</returns>
        ApiResponse<BatteryDeviceTelemetry> GetSystemAcbDeviceTelemetryWithHttpInfo(int systemId, string serialNo, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0);
        /// <summary>
        /// Retrieves telemetry for single Encharge
        /// </summary>
        /// <remarks>
        /// Retrieves telemetry for single Encharge. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="serialNo">Serial number of the Encharge.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatteryDeviceTelemetry</returns>
        BatteryDeviceTelemetry GetSystemEnchargeDeviceTelemetry(int systemId, string serialNo, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0);

        /// <summary>
        /// Retrieves telemetry for single Encharge
        /// </summary>
        /// <remarks>
        /// Retrieves telemetry for single Encharge. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="serialNo">Serial number of the Encharge.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatteryDeviceTelemetry</returns>
        ApiResponse<BatteryDeviceTelemetry> GetSystemEnchargeDeviceTelemetryWithHttpInfo(int systemId, string serialNo, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0);
        /// <summary>
        /// Retrieves telemetry for single micro/pcu
        /// </summary>
        /// <remarks>
        /// Retrieves telemetry for single micro/pcu. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 3 intervals will appear in response. If granularity is day, maximum 288 intervals will appear in response where each interval is of 5 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="serialNo">Serial number of the individual solar Microinverter.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemMicroDeviceTelemetryResponse</returns>
        GetSystemMicroDeviceTelemetryResponse GetSystemMicroDeviceTelemetry(int systemId, string serialNo, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0);

        /// <summary>
        /// Retrieves telemetry for single micro/pcu
        /// </summary>
        /// <remarks>
        /// Retrieves telemetry for single micro/pcu. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 3 intervals will appear in response. If granularity is day, maximum 288 intervals will appear in response where each interval is of 5 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="serialNo">Serial number of the individual solar Microinverter.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemMicroDeviceTelemetryResponse</returns>
        ApiResponse<GetSystemMicroDeviceTelemetryResponse> GetSystemMicroDeviceTelemetryWithHttpInfo(int systemId, string serialNo, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeviceLevelProductionMonitoringApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieves telemetry for single ACB
        /// </summary>
        /// <remarks>
        /// Retrieves telemetry for single ACB. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="serialNo">Serial number of the acb.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatteryDeviceTelemetry</returns>
        System.Threading.Tasks.Task<BatteryDeviceTelemetry> GetSystemAcbDeviceTelemetryAsync(int systemId, string serialNo, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves telemetry for single ACB
        /// </summary>
        /// <remarks>
        /// Retrieves telemetry for single ACB. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="serialNo">Serial number of the acb.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatteryDeviceTelemetry)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatteryDeviceTelemetry>> GetSystemAcbDeviceTelemetryWithHttpInfoAsync(int systemId, string serialNo, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves telemetry for single Encharge
        /// </summary>
        /// <remarks>
        /// Retrieves telemetry for single Encharge. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="serialNo">Serial number of the Encharge.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatteryDeviceTelemetry</returns>
        System.Threading.Tasks.Task<BatteryDeviceTelemetry> GetSystemEnchargeDeviceTelemetryAsync(int systemId, string serialNo, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves telemetry for single Encharge
        /// </summary>
        /// <remarks>
        /// Retrieves telemetry for single Encharge. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="serialNo">Serial number of the Encharge.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatteryDeviceTelemetry)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatteryDeviceTelemetry>> GetSystemEnchargeDeviceTelemetryWithHttpInfoAsync(int systemId, string serialNo, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves telemetry for single micro/pcu
        /// </summary>
        /// <remarks>
        /// Retrieves telemetry for single micro/pcu. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 3 intervals will appear in response. If granularity is day, maximum 288 intervals will appear in response where each interval is of 5 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="serialNo">Serial number of the individual solar Microinverter.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemMicroDeviceTelemetryResponse</returns>
        System.Threading.Tasks.Task<GetSystemMicroDeviceTelemetryResponse> GetSystemMicroDeviceTelemetryAsync(int systemId, string serialNo, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves telemetry for single micro/pcu
        /// </summary>
        /// <remarks>
        /// Retrieves telemetry for single micro/pcu. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 3 intervals will appear in response. If granularity is day, maximum 288 intervals will appear in response where each interval is of 5 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="serialNo">Serial number of the individual solar Microinverter.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemMicroDeviceTelemetryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSystemMicroDeviceTelemetryResponse>> GetSystemMicroDeviceTelemetryWithHttpInfoAsync(int systemId, string serialNo, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeviceLevelProductionMonitoringApi : IDeviceLevelProductionMonitoringApiSync, IDeviceLevelProductionMonitoringApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeviceLevelProductionMonitoringApi : IDeviceLevelProductionMonitoringApi
    {
        private EnphaseOpenAPI.Monitoring.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceLevelProductionMonitoringApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeviceLevelProductionMonitoringApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceLevelProductionMonitoringApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeviceLevelProductionMonitoringApi(string basePath)
        {
            this.Configuration = EnphaseOpenAPI.Monitoring.Client.Configuration.MergeConfigurations(
                EnphaseOpenAPI.Monitoring.Client.GlobalConfiguration.Instance,
                new EnphaseOpenAPI.Monitoring.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EnphaseOpenAPI.Monitoring.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnphaseOpenAPI.Monitoring.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EnphaseOpenAPI.Monitoring.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceLevelProductionMonitoringApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeviceLevelProductionMonitoringApi(EnphaseOpenAPI.Monitoring.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EnphaseOpenAPI.Monitoring.Client.Configuration.MergeConfigurations(
                EnphaseOpenAPI.Monitoring.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EnphaseOpenAPI.Monitoring.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnphaseOpenAPI.Monitoring.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EnphaseOpenAPI.Monitoring.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceLevelProductionMonitoringApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DeviceLevelProductionMonitoringApi(EnphaseOpenAPI.Monitoring.Client.ISynchronousClient client, EnphaseOpenAPI.Monitoring.Client.IAsynchronousClient asyncClient, EnphaseOpenAPI.Monitoring.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EnphaseOpenAPI.Monitoring.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EnphaseOpenAPI.Monitoring.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EnphaseOpenAPI.Monitoring.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EnphaseOpenAPI.Monitoring.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EnphaseOpenAPI.Monitoring.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieves telemetry for single ACB Retrieves telemetry for single ACB. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="serialNo">Serial number of the acb.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatteryDeviceTelemetry</returns>
        public BatteryDeviceTelemetry GetSystemAcbDeviceTelemetry(int systemId, string serialNo, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<BatteryDeviceTelemetry> localVarResponse = GetSystemAcbDeviceTelemetryWithHttpInfo(systemId, serialNo, startAt, granularity);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves telemetry for single ACB Retrieves telemetry for single ACB. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="serialNo">Serial number of the acb.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatteryDeviceTelemetry</returns>
        public EnphaseOpenAPI.Monitoring.Client.ApiResponse<BatteryDeviceTelemetry> GetSystemAcbDeviceTelemetryWithHttpInfo(int systemId, string serialNo, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0)
        {
            // verify the required parameter 'serialNo' is set
            if (serialNo == null)
            {
                throw new EnphaseOpenAPI.Monitoring.Client.ApiException(400, "Missing required parameter 'serialNo' when calling DeviceLevelProductionMonitoringApi->GetSystemAcbDeviceTelemetry");
            }

            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("serial_no", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(serialNo)); // path parameter
            if (startAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "start_at", startAt));
            }
            if (granularity != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            }

            localVarRequestOptions.Operation = "DeviceLevelProductionMonitoringApi.GetSystemAcbDeviceTelemetry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BatteryDeviceTelemetry>("/systems/{system_id}/devices/acbs/{serial_no}/telemetry", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemAcbDeviceTelemetry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves telemetry for single ACB Retrieves telemetry for single ACB. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="serialNo">Serial number of the acb.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatteryDeviceTelemetry</returns>
        public async System.Threading.Tasks.Task<BatteryDeviceTelemetry> GetSystemAcbDeviceTelemetryAsync(int systemId, string serialNo, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<BatteryDeviceTelemetry> localVarResponse = await GetSystemAcbDeviceTelemetryWithHttpInfoAsync(systemId, serialNo, startAt, granularity, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves telemetry for single ACB Retrieves telemetry for single ACB. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="serialNo">Serial number of the acb.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatteryDeviceTelemetry)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Monitoring.Client.ApiResponse<BatteryDeviceTelemetry>> GetSystemAcbDeviceTelemetryWithHttpInfoAsync(int systemId, string serialNo, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serialNo' is set
            if (serialNo == null)
            {
                throw new EnphaseOpenAPI.Monitoring.Client.ApiException(400, "Missing required parameter 'serialNo' when calling DeviceLevelProductionMonitoringApi->GetSystemAcbDeviceTelemetry");
            }


            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("serial_no", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(serialNo)); // path parameter
            if (startAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "start_at", startAt));
            }
            if (granularity != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            }

            localVarRequestOptions.Operation = "DeviceLevelProductionMonitoringApi.GetSystemAcbDeviceTelemetry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BatteryDeviceTelemetry>("/systems/{system_id}/devices/acbs/{serial_no}/telemetry", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemAcbDeviceTelemetry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves telemetry for single Encharge Retrieves telemetry for single Encharge. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="serialNo">Serial number of the Encharge.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatteryDeviceTelemetry</returns>
        public BatteryDeviceTelemetry GetSystemEnchargeDeviceTelemetry(int systemId, string serialNo, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<BatteryDeviceTelemetry> localVarResponse = GetSystemEnchargeDeviceTelemetryWithHttpInfo(systemId, serialNo, startAt, granularity);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves telemetry for single Encharge Retrieves telemetry for single Encharge. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="serialNo">Serial number of the Encharge.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatteryDeviceTelemetry</returns>
        public EnphaseOpenAPI.Monitoring.Client.ApiResponse<BatteryDeviceTelemetry> GetSystemEnchargeDeviceTelemetryWithHttpInfo(int systemId, string serialNo, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0)
        {
            // verify the required parameter 'serialNo' is set
            if (serialNo == null)
            {
                throw new EnphaseOpenAPI.Monitoring.Client.ApiException(400, "Missing required parameter 'serialNo' when calling DeviceLevelProductionMonitoringApi->GetSystemEnchargeDeviceTelemetry");
            }

            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("serial_no", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(serialNo)); // path parameter
            if (startAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "start_at", startAt));
            }
            if (granularity != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            }

            localVarRequestOptions.Operation = "DeviceLevelProductionMonitoringApi.GetSystemEnchargeDeviceTelemetry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BatteryDeviceTelemetry>("/systems/{system_id}/devices/encharges/{serial_no}/telemetry", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemEnchargeDeviceTelemetry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves telemetry for single Encharge Retrieves telemetry for single Encharge. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="serialNo">Serial number of the Encharge.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatteryDeviceTelemetry</returns>
        public async System.Threading.Tasks.Task<BatteryDeviceTelemetry> GetSystemEnchargeDeviceTelemetryAsync(int systemId, string serialNo, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<BatteryDeviceTelemetry> localVarResponse = await GetSystemEnchargeDeviceTelemetryWithHttpInfoAsync(systemId, serialNo, startAt, granularity, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves telemetry for single Encharge Retrieves telemetry for single Encharge. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="serialNo">Serial number of the Encharge.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatteryDeviceTelemetry)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Monitoring.Client.ApiResponse<BatteryDeviceTelemetry>> GetSystemEnchargeDeviceTelemetryWithHttpInfoAsync(int systemId, string serialNo, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serialNo' is set
            if (serialNo == null)
            {
                throw new EnphaseOpenAPI.Monitoring.Client.ApiException(400, "Missing required parameter 'serialNo' when calling DeviceLevelProductionMonitoringApi->GetSystemEnchargeDeviceTelemetry");
            }


            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("serial_no", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(serialNo)); // path parameter
            if (startAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "start_at", startAt));
            }
            if (granularity != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            }

            localVarRequestOptions.Operation = "DeviceLevelProductionMonitoringApi.GetSystemEnchargeDeviceTelemetry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BatteryDeviceTelemetry>("/systems/{system_id}/devices/encharges/{serial_no}/telemetry", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemEnchargeDeviceTelemetry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves telemetry for single micro/pcu Retrieves telemetry for single micro/pcu. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 3 intervals will appear in response. If granularity is day, maximum 288 intervals will appear in response where each interval is of 5 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="serialNo">Serial number of the individual solar Microinverter.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemMicroDeviceTelemetryResponse</returns>
        public GetSystemMicroDeviceTelemetryResponse GetSystemMicroDeviceTelemetry(int systemId, string serialNo, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemMicroDeviceTelemetryResponse> localVarResponse = GetSystemMicroDeviceTelemetryWithHttpInfo(systemId, serialNo, startAt, granularity);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves telemetry for single micro/pcu Retrieves telemetry for single micro/pcu. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 3 intervals will appear in response. If granularity is day, maximum 288 intervals will appear in response where each interval is of 5 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="serialNo">Serial number of the individual solar Microinverter.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemMicroDeviceTelemetryResponse</returns>
        public EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemMicroDeviceTelemetryResponse> GetSystemMicroDeviceTelemetryWithHttpInfo(int systemId, string serialNo, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0)
        {
            // verify the required parameter 'serialNo' is set
            if (serialNo == null)
            {
                throw new EnphaseOpenAPI.Monitoring.Client.ApiException(400, "Missing required parameter 'serialNo' when calling DeviceLevelProductionMonitoringApi->GetSystemMicroDeviceTelemetry");
            }

            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("serial_no", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(serialNo)); // path parameter
            if (startAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "start_at", startAt));
            }
            if (granularity != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            }

            localVarRequestOptions.Operation = "DeviceLevelProductionMonitoringApi.GetSystemMicroDeviceTelemetry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSystemMicroDeviceTelemetryResponse>("/systems/{system_id}/devices/micros/{serial_no}/telemetry", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemMicroDeviceTelemetry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves telemetry for single micro/pcu Retrieves telemetry for single micro/pcu. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 3 intervals will appear in response. If granularity is day, maximum 288 intervals will appear in response where each interval is of 5 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="serialNo">Serial number of the individual solar Microinverter.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemMicroDeviceTelemetryResponse</returns>
        public async System.Threading.Tasks.Task<GetSystemMicroDeviceTelemetryResponse> GetSystemMicroDeviceTelemetryAsync(int systemId, string serialNo, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemMicroDeviceTelemetryResponse> localVarResponse = await GetSystemMicroDeviceTelemetryWithHttpInfoAsync(systemId, serialNo, startAt, granularity, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves telemetry for single micro/pcu Retrieves telemetry for single micro/pcu. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 3 intervals will appear in response. If granularity is day, maximum 288 intervals will appear in response where each interval is of 5 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="serialNo">Serial number of the individual solar Microinverter.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemMicroDeviceTelemetryResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemMicroDeviceTelemetryResponse>> GetSystemMicroDeviceTelemetryWithHttpInfoAsync(int systemId, string serialNo, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serialNo' is set
            if (serialNo == null)
            {
                throw new EnphaseOpenAPI.Monitoring.Client.ApiException(400, "Missing required parameter 'serialNo' when calling DeviceLevelProductionMonitoringApi->GetSystemMicroDeviceTelemetry");
            }


            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.PathParameters.Add("serial_no", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(serialNo)); // path parameter
            if (startAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "start_at", startAt));
            }
            if (granularity != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            }

            localVarRequestOptions.Operation = "DeviceLevelProductionMonitoringApi.GetSystemMicroDeviceTelemetry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSystemMicroDeviceTelemetryResponse>("/systems/{system_id}/devices/micros/{serial_no}/telemetry", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemMicroDeviceTelemetry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
