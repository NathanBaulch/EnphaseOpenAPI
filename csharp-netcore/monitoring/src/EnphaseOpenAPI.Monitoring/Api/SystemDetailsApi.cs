/*
 * The Enphase Monitoring API
 *
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EnphaseOpenAPI.Monitoring.Client;
using EnphaseOpenAPI.Monitoring.Client.Auth;
using EnphaseOpenAPI.Monitoring.Model;

namespace EnphaseOpenAPI.Monitoring.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISystemDetailsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// inverters_summary_by_envoy_or_site
        /// </summary>
        /// <remarks>
        /// Returns the microinverters summary based on the specified active envoy serial number or system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID. The response will contain only those microinverters reporting to one of the active envoys of the given site. (optional)</param>
        /// <param name="envoySerialNumber">Active envoy serial number. Only microinverters reporting to the given active envoy will be present in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetInvertersSummaryByEnvoyOrSiteResponseInner&gt;</returns>
        List<GetInvertersSummaryByEnvoyOrSiteResponseInner> GetInvertersSummaryByEnvoyOrSite(int? siteId = default(int?), string envoySerialNumber = default(string), int operationIndex = 0);

        /// <summary>
        /// inverters_summary_by_envoy_or_site
        /// </summary>
        /// <remarks>
        /// Returns the microinverters summary based on the specified active envoy serial number or system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID. The response will contain only those microinverters reporting to one of the active envoys of the given site. (optional)</param>
        /// <param name="envoySerialNumber">Active envoy serial number. Only microinverters reporting to the given active envoy will be present in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetInvertersSummaryByEnvoyOrSiteResponseInner&gt;</returns>
        ApiResponse<List<GetInvertersSummaryByEnvoyOrSiteResponseInner>> GetInvertersSummaryByEnvoyOrSiteWithHttpInfo(int? siteId = default(int?), string envoySerialNumber = default(string), int operationIndex = 0);
        /// <summary>
        /// Retrieves a System by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a system by ID.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System</returns>
        System GetSystem(int systemId, int operationIndex = 0);

        /// <summary>
        /// Retrieves a System by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a system by ID.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System</returns>
        ApiResponse<System> GetSystemWithHttpInfo(int systemId, int operationIndex = 0);
        /// <summary>
        /// Retrieves devices for a given system
        /// </summary>
        /// <remarks>
        /// Retrieves devices for a given system. Only devices that are active will be returned in the response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemDevicesResponse</returns>
        GetSystemDevicesResponse GetSystemDevices(int systemId, int operationIndex = 0);

        /// <summary>
        /// Retrieves devices for a given system
        /// </summary>
        /// <remarks>
        /// Retrieves devices for a given system. Only devices that are active will be returned in the response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemDevicesResponse</returns>
        ApiResponse<GetSystemDevicesResponse> GetSystemDevicesWithHttpInfo(int systemId, int operationIndex = 0);
        /// <summary>
        /// Retrieves a system summary
        /// </summary>
        /// <remarks>
        /// Returns system summary based on the specified system ID.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemSummaryResponse</returns>
        GetSystemSummaryResponse GetSystemSummary(int systemId, int operationIndex = 0);

        /// <summary>
        /// Retrieves a system summary
        /// </summary>
        /// <remarks>
        /// Returns system summary based on the specified system ID.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemSummaryResponse</returns>
        ApiResponse<GetSystemSummaryResponse> GetSystemSummaryWithHttpInfo(int systemId, int operationIndex = 0);
        /// <summary>
        /// Fetch systems
        /// </summary>
        /// <remarks>
        /// Returns a list of systems for which the user can make API requests. By default, systems are returned in batches of 10. The maximum size is 100.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page to be returned. Default&#x3D;1, Min&#x3D;1. For example, if page is set to 2, 2nd page is returned. (optional)</param>
        /// <param name="size">Maximum number of records shown per page. Default&#x3D;10, Min&#x3D;1, Max&#x3D;100.  For example, if set to 5, 5 records are shown per page. (optional)</param>
        /// <param name="sortBy">Returns list of systems sorted by &lt;sort_by&gt; field. To get ASC order sorted list, user sort_by &#x3D; &lt;key&gt;. To get DESC order sorted list, use sort_by &#x3D; (-)&lt;key&gt;. Current sort keys supported are id, name, and last_report_date. By default the list is sorted by decreasing system ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemsResponse</returns>
        GetSystemsResponse GetSystems(int? page = default(int?), int? size = default(int?), SystemSortByEnum? sortBy = default(SystemSortByEnum?), int operationIndex = 0);

        /// <summary>
        /// Fetch systems
        /// </summary>
        /// <remarks>
        /// Returns a list of systems for which the user can make API requests. By default, systems are returned in batches of 10. The maximum size is 100.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page to be returned. Default&#x3D;1, Min&#x3D;1. For example, if page is set to 2, 2nd page is returned. (optional)</param>
        /// <param name="size">Maximum number of records shown per page. Default&#x3D;10, Min&#x3D;1, Max&#x3D;100.  For example, if set to 5, 5 records are shown per page. (optional)</param>
        /// <param name="sortBy">Returns list of systems sorted by &lt;sort_by&gt; field. To get ASC order sorted list, user sort_by &#x3D; &lt;key&gt;. To get DESC order sorted list, use sort_by &#x3D; (-)&lt;key&gt;. Current sort keys supported are id, name, and last_report_date. By default the list is sorted by decreasing system ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemsResponse</returns>
        ApiResponse<GetSystemsResponse> GetSystemsWithHttpInfo(int? page = default(int?), int? size = default(int?), SystemSortByEnum? sortBy = default(SystemSortByEnum?), int operationIndex = 0);
        /// <summary>
        /// Retrieve system for a given envoy serial number
        /// </summary>
        /// <remarks>
        /// Get system ID by passing envoy serial number. If the serial number of a retired envoy is passed in the request param, a 404 Not Found response will be returned.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNum">Envoy serial number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RetrieveSystemIdResponse</returns>
        RetrieveSystemIdResponse RetrieveSystemId(string serialNum, int operationIndex = 0);

        /// <summary>
        /// Retrieve system for a given envoy serial number
        /// </summary>
        /// <remarks>
        /// Get system ID by passing envoy serial number. If the serial number of a retired envoy is passed in the request param, a 404 Not Found response will be returned.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNum">Envoy serial number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RetrieveSystemIdResponse</returns>
        ApiResponse<RetrieveSystemIdResponse> RetrieveSystemIdWithHttpInfo(string serialNum, int operationIndex = 0);
        /// <summary>
        /// Search and filter systems
        /// </summary>
        /// <remarks>
        /// Search and filter systems. Provide only valid values in request parameters. Empty and invalid values will be ignored. Invalid keys will be rejected.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page to be returned. Default&#x3D;1, Min&#x3D;1, e.g&#x3D;2. (optional)</param>
        /// <param name="size">Maximum number of records shown per page. Default&#x3D;10, Min&#x3D;1, Max&#x3D;1000, e.g&#x3D;5. (optional)</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchSystemsResponse</returns>
        SearchSystemsResponse SearchSystems(int? page = default(int?), int? size = default(int?), SearchSystemsRequest _params = default(SearchSystemsRequest), int operationIndex = 0);

        /// <summary>
        /// Search and filter systems
        /// </summary>
        /// <remarks>
        /// Search and filter systems. Provide only valid values in request parameters. Empty and invalid values will be ignored. Invalid keys will be rejected.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page to be returned. Default&#x3D;1, Min&#x3D;1, e.g&#x3D;2. (optional)</param>
        /// <param name="size">Maximum number of records shown per page. Default&#x3D;10, Min&#x3D;1, Max&#x3D;1000, e.g&#x3D;5. (optional)</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchSystemsResponse</returns>
        ApiResponse<SearchSystemsResponse> SearchSystemsWithHttpInfo(int? page = default(int?), int? size = default(int?), SearchSystemsRequest _params = default(SearchSystemsRequest), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISystemDetailsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// inverters_summary_by_envoy_or_site
        /// </summary>
        /// <remarks>
        /// Returns the microinverters summary based on the specified active envoy serial number or system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID. The response will contain only those microinverters reporting to one of the active envoys of the given site. (optional)</param>
        /// <param name="envoySerialNumber">Active envoy serial number. Only microinverters reporting to the given active envoy will be present in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetInvertersSummaryByEnvoyOrSiteResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<GetInvertersSummaryByEnvoyOrSiteResponseInner>> GetInvertersSummaryByEnvoyOrSiteAsync(int? siteId = default(int?), string envoySerialNumber = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// inverters_summary_by_envoy_or_site
        /// </summary>
        /// <remarks>
        /// Returns the microinverters summary based on the specified active envoy serial number or system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID. The response will contain only those microinverters reporting to one of the active envoys of the given site. (optional)</param>
        /// <param name="envoySerialNumber">Active envoy serial number. Only microinverters reporting to the given active envoy will be present in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetInvertersSummaryByEnvoyOrSiteResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetInvertersSummaryByEnvoyOrSiteResponseInner>>> GetInvertersSummaryByEnvoyOrSiteWithHttpInfoAsync(int? siteId = default(int?), string envoySerialNumber = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a System by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a system by ID.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System</returns>
        System.Threading.Tasks.Task<System> GetSystemAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a System by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a system by ID.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System)</returns>
        System.Threading.Tasks.Task<ApiResponse<System>> GetSystemWithHttpInfoAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves devices for a given system
        /// </summary>
        /// <remarks>
        /// Retrieves devices for a given system. Only devices that are active will be returned in the response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemDevicesResponse</returns>
        System.Threading.Tasks.Task<GetSystemDevicesResponse> GetSystemDevicesAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves devices for a given system
        /// </summary>
        /// <remarks>
        /// Retrieves devices for a given system. Only devices that are active will be returned in the response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemDevicesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSystemDevicesResponse>> GetSystemDevicesWithHttpInfoAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a system summary
        /// </summary>
        /// <remarks>
        /// Returns system summary based on the specified system ID.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemSummaryResponse</returns>
        System.Threading.Tasks.Task<GetSystemSummaryResponse> GetSystemSummaryAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a system summary
        /// </summary>
        /// <remarks>
        /// Returns system summary based on the specified system ID.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemSummaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSystemSummaryResponse>> GetSystemSummaryWithHttpInfoAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch systems
        /// </summary>
        /// <remarks>
        /// Returns a list of systems for which the user can make API requests. By default, systems are returned in batches of 10. The maximum size is 100.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page to be returned. Default&#x3D;1, Min&#x3D;1. For example, if page is set to 2, 2nd page is returned. (optional)</param>
        /// <param name="size">Maximum number of records shown per page. Default&#x3D;10, Min&#x3D;1, Max&#x3D;100.  For example, if set to 5, 5 records are shown per page. (optional)</param>
        /// <param name="sortBy">Returns list of systems sorted by &lt;sort_by&gt; field. To get ASC order sorted list, user sort_by &#x3D; &lt;key&gt;. To get DESC order sorted list, use sort_by &#x3D; (-)&lt;key&gt;. Current sort keys supported are id, name, and last_report_date. By default the list is sorted by decreasing system ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemsResponse</returns>
        System.Threading.Tasks.Task<GetSystemsResponse> GetSystemsAsync(int? page = default(int?), int? size = default(int?), SystemSortByEnum? sortBy = default(SystemSortByEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch systems
        /// </summary>
        /// <remarks>
        /// Returns a list of systems for which the user can make API requests. By default, systems are returned in batches of 10. The maximum size is 100.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page to be returned. Default&#x3D;1, Min&#x3D;1. For example, if page is set to 2, 2nd page is returned. (optional)</param>
        /// <param name="size">Maximum number of records shown per page. Default&#x3D;10, Min&#x3D;1, Max&#x3D;100.  For example, if set to 5, 5 records are shown per page. (optional)</param>
        /// <param name="sortBy">Returns list of systems sorted by &lt;sort_by&gt; field. To get ASC order sorted list, user sort_by &#x3D; &lt;key&gt;. To get DESC order sorted list, use sort_by &#x3D; (-)&lt;key&gt;. Current sort keys supported are id, name, and last_report_date. By default the list is sorted by decreasing system ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSystemsResponse>> GetSystemsWithHttpInfoAsync(int? page = default(int?), int? size = default(int?), SystemSortByEnum? sortBy = default(SystemSortByEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve system for a given envoy serial number
        /// </summary>
        /// <remarks>
        /// Get system ID by passing envoy serial number. If the serial number of a retired envoy is passed in the request param, a 404 Not Found response will be returned.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNum">Envoy serial number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RetrieveSystemIdResponse</returns>
        System.Threading.Tasks.Task<RetrieveSystemIdResponse> RetrieveSystemIdAsync(string serialNum, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve system for a given envoy serial number
        /// </summary>
        /// <remarks>
        /// Get system ID by passing envoy serial number. If the serial number of a retired envoy is passed in the request param, a 404 Not Found response will be returned.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNum">Envoy serial number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RetrieveSystemIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrieveSystemIdResponse>> RetrieveSystemIdWithHttpInfoAsync(string serialNum, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search and filter systems
        /// </summary>
        /// <remarks>
        /// Search and filter systems. Provide only valid values in request parameters. Empty and invalid values will be ignored. Invalid keys will be rejected.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page to be returned. Default&#x3D;1, Min&#x3D;1, e.g&#x3D;2. (optional)</param>
        /// <param name="size">Maximum number of records shown per page. Default&#x3D;10, Min&#x3D;1, Max&#x3D;1000, e.g&#x3D;5. (optional)</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchSystemsResponse</returns>
        System.Threading.Tasks.Task<SearchSystemsResponse> SearchSystemsAsync(int? page = default(int?), int? size = default(int?), SearchSystemsRequest _params = default(SearchSystemsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search and filter systems
        /// </summary>
        /// <remarks>
        /// Search and filter systems. Provide only valid values in request parameters. Empty and invalid values will be ignored. Invalid keys will be rejected.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page to be returned. Default&#x3D;1, Min&#x3D;1, e.g&#x3D;2. (optional)</param>
        /// <param name="size">Maximum number of records shown per page. Default&#x3D;10, Min&#x3D;1, Max&#x3D;1000, e.g&#x3D;5. (optional)</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchSystemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchSystemsResponse>> SearchSystemsWithHttpInfoAsync(int? page = default(int?), int? size = default(int?), SearchSystemsRequest _params = default(SearchSystemsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISystemDetailsApi : ISystemDetailsApiSync, ISystemDetailsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SystemDetailsApi : ISystemDetailsApi
    {
        private EnphaseOpenAPI.Monitoring.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemDetailsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SystemDetailsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemDetailsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SystemDetailsApi(string basePath)
        {
            this.Configuration = EnphaseOpenAPI.Monitoring.Client.Configuration.MergeConfigurations(
                EnphaseOpenAPI.Monitoring.Client.GlobalConfiguration.Instance,
                new EnphaseOpenAPI.Monitoring.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EnphaseOpenAPI.Monitoring.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnphaseOpenAPI.Monitoring.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EnphaseOpenAPI.Monitoring.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemDetailsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SystemDetailsApi(EnphaseOpenAPI.Monitoring.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EnphaseOpenAPI.Monitoring.Client.Configuration.MergeConfigurations(
                EnphaseOpenAPI.Monitoring.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EnphaseOpenAPI.Monitoring.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnphaseOpenAPI.Monitoring.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EnphaseOpenAPI.Monitoring.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemDetailsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SystemDetailsApi(EnphaseOpenAPI.Monitoring.Client.ISynchronousClient client, EnphaseOpenAPI.Monitoring.Client.IAsynchronousClient asyncClient, EnphaseOpenAPI.Monitoring.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EnphaseOpenAPI.Monitoring.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EnphaseOpenAPI.Monitoring.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EnphaseOpenAPI.Monitoring.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EnphaseOpenAPI.Monitoring.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EnphaseOpenAPI.Monitoring.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// inverters_summary_by_envoy_or_site Returns the microinverters summary based on the specified active envoy serial number or system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID. The response will contain only those microinverters reporting to one of the active envoys of the given site. (optional)</param>
        /// <param name="envoySerialNumber">Active envoy serial number. Only microinverters reporting to the given active envoy will be present in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetInvertersSummaryByEnvoyOrSiteResponseInner&gt;</returns>
        public List<GetInvertersSummaryByEnvoyOrSiteResponseInner> GetInvertersSummaryByEnvoyOrSite(int? siteId = default(int?), string envoySerialNumber = default(string), int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<List<GetInvertersSummaryByEnvoyOrSiteResponseInner>> localVarResponse = GetInvertersSummaryByEnvoyOrSiteWithHttpInfo(siteId, envoySerialNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// inverters_summary_by_envoy_or_site Returns the microinverters summary based on the specified active envoy serial number or system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID. The response will contain only those microinverters reporting to one of the active envoys of the given site. (optional)</param>
        /// <param name="envoySerialNumber">Active envoy serial number. Only microinverters reporting to the given active envoy will be present in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetInvertersSummaryByEnvoyOrSiteResponseInner&gt;</returns>
        public EnphaseOpenAPI.Monitoring.Client.ApiResponse<List<GetInvertersSummaryByEnvoyOrSiteResponseInner>> GetInvertersSummaryByEnvoyOrSiteWithHttpInfo(int? siteId = default(int?), string envoySerialNumber = default(string), int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (siteId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "site_id", siteId));
            }
            if (envoySerialNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "envoy_serial_number", envoySerialNumber));
            }

            localVarRequestOptions.Operation = "SystemDetailsApi.GetInvertersSummaryByEnvoyOrSite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GetInvertersSummaryByEnvoyOrSiteResponseInner>>("/systems/inverters_summary_by_envoy_or_site", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvertersSummaryByEnvoyOrSite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// inverters_summary_by_envoy_or_site Returns the microinverters summary based on the specified active envoy serial number or system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID. The response will contain only those microinverters reporting to one of the active envoys of the given site. (optional)</param>
        /// <param name="envoySerialNumber">Active envoy serial number. Only microinverters reporting to the given active envoy will be present in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetInvertersSummaryByEnvoyOrSiteResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetInvertersSummaryByEnvoyOrSiteResponseInner>> GetInvertersSummaryByEnvoyOrSiteAsync(int? siteId = default(int?), string envoySerialNumber = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<List<GetInvertersSummaryByEnvoyOrSiteResponseInner>> localVarResponse = await GetInvertersSummaryByEnvoyOrSiteWithHttpInfoAsync(siteId, envoySerialNumber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// inverters_summary_by_envoy_or_site Returns the microinverters summary based on the specified active envoy serial number or system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="siteId">Site ID. The response will contain only those microinverters reporting to one of the active envoys of the given site. (optional)</param>
        /// <param name="envoySerialNumber">Active envoy serial number. Only microinverters reporting to the given active envoy will be present in the response. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetInvertersSummaryByEnvoyOrSiteResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Monitoring.Client.ApiResponse<List<GetInvertersSummaryByEnvoyOrSiteResponseInner>>> GetInvertersSummaryByEnvoyOrSiteWithHttpInfoAsync(int? siteId = default(int?), string envoySerialNumber = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (siteId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "site_id", siteId));
            }
            if (envoySerialNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "envoy_serial_number", envoySerialNumber));
            }

            localVarRequestOptions.Operation = "SystemDetailsApi.GetInvertersSummaryByEnvoyOrSite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GetInvertersSummaryByEnvoyOrSiteResponseInner>>("/systems/inverters_summary_by_envoy_or_site", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvertersSummaryByEnvoyOrSite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a System by ID Retrieves a system by ID.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System</returns>
        public System GetSystem(int systemId, int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<System> localVarResponse = GetSystemWithHttpInfo(systemId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a System by ID Retrieves a system by ID.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System</returns>
        public EnphaseOpenAPI.Monitoring.Client.ApiResponse<System> GetSystemWithHttpInfo(int systemId, int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter

            localVarRequestOptions.Operation = "SystemDetailsApi.GetSystem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System>("/systems/{system_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a System by ID Retrieves a system by ID.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System</returns>
        public async System.Threading.Tasks.Task<System> GetSystemAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<System> localVarResponse = await GetSystemWithHttpInfoAsync(systemId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a System by ID Retrieves a system by ID.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Monitoring.Client.ApiResponse<System>> GetSystemWithHttpInfoAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter

            localVarRequestOptions.Operation = "SystemDetailsApi.GetSystem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System>("/systems/{system_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves devices for a given system Retrieves devices for a given system. Only devices that are active will be returned in the response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemDevicesResponse</returns>
        public GetSystemDevicesResponse GetSystemDevices(int systemId, int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemDevicesResponse> localVarResponse = GetSystemDevicesWithHttpInfo(systemId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves devices for a given system Retrieves devices for a given system. Only devices that are active will be returned in the response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemDevicesResponse</returns>
        public EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemDevicesResponse> GetSystemDevicesWithHttpInfo(int systemId, int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter

            localVarRequestOptions.Operation = "SystemDetailsApi.GetSystemDevices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSystemDevicesResponse>("/systems/{system_id}/devices", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemDevices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves devices for a given system Retrieves devices for a given system. Only devices that are active will be returned in the response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemDevicesResponse</returns>
        public async System.Threading.Tasks.Task<GetSystemDevicesResponse> GetSystemDevicesAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemDevicesResponse> localVarResponse = await GetSystemDevicesWithHttpInfoAsync(systemId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves devices for a given system Retrieves devices for a given system. Only devices that are active will be returned in the response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemDevicesResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemDevicesResponse>> GetSystemDevicesWithHttpInfoAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter

            localVarRequestOptions.Operation = "SystemDetailsApi.GetSystemDevices";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSystemDevicesResponse>("/systems/{system_id}/devices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemDevices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a system summary Returns system summary based on the specified system ID.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemSummaryResponse</returns>
        public GetSystemSummaryResponse GetSystemSummary(int systemId, int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemSummaryResponse> localVarResponse = GetSystemSummaryWithHttpInfo(systemId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a system summary Returns system summary based on the specified system ID.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemSummaryResponse</returns>
        public EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemSummaryResponse> GetSystemSummaryWithHttpInfo(int systemId, int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter

            localVarRequestOptions.Operation = "SystemDetailsApi.GetSystemSummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSystemSummaryResponse>("/systems/{system_id}/summary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a system summary Returns system summary based on the specified system ID.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemSummaryResponse</returns>
        public async System.Threading.Tasks.Task<GetSystemSummaryResponse> GetSystemSummaryAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemSummaryResponse> localVarResponse = await GetSystemSummaryWithHttpInfoAsync(systemId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a system summary Returns system summary based on the specified system ID.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemSummaryResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemSummaryResponse>> GetSystemSummaryWithHttpInfoAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter

            localVarRequestOptions.Operation = "SystemDetailsApi.GetSystemSummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSystemSummaryResponse>("/systems/{system_id}/summary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch systems Returns a list of systems for which the user can make API requests. By default, systems are returned in batches of 10. The maximum size is 100.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page to be returned. Default&#x3D;1, Min&#x3D;1. For example, if page is set to 2, 2nd page is returned. (optional)</param>
        /// <param name="size">Maximum number of records shown per page. Default&#x3D;10, Min&#x3D;1, Max&#x3D;100.  For example, if set to 5, 5 records are shown per page. (optional)</param>
        /// <param name="sortBy">Returns list of systems sorted by &lt;sort_by&gt; field. To get ASC order sorted list, user sort_by &#x3D; &lt;key&gt;. To get DESC order sorted list, use sort_by &#x3D; (-)&lt;key&gt;. Current sort keys supported are id, name, and last_report_date. By default the list is sorted by decreasing system ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemsResponse</returns>
        public GetSystemsResponse GetSystems(int? page = default(int?), int? size = default(int?), SystemSortByEnum? sortBy = default(SystemSortByEnum?), int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemsResponse> localVarResponse = GetSystemsWithHttpInfo(page, size, sortBy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch systems Returns a list of systems for which the user can make API requests. By default, systems are returned in batches of 10. The maximum size is 100.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page to be returned. Default&#x3D;1, Min&#x3D;1. For example, if page is set to 2, 2nd page is returned. (optional)</param>
        /// <param name="size">Maximum number of records shown per page. Default&#x3D;10, Min&#x3D;1, Max&#x3D;100.  For example, if set to 5, 5 records are shown per page. (optional)</param>
        /// <param name="sortBy">Returns list of systems sorted by &lt;sort_by&gt; field. To get ASC order sorted list, user sort_by &#x3D; &lt;key&gt;. To get DESC order sorted list, use sort_by &#x3D; (-)&lt;key&gt;. Current sort keys supported are id, name, and last_report_date. By default the list is sorted by decreasing system ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemsResponse</returns>
        public EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemsResponse> GetSystemsWithHttpInfo(int? page = default(int?), int? size = default(int?), SystemSortByEnum? sortBy = default(SystemSortByEnum?), int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }

            localVarRequestOptions.Operation = "SystemDetailsApi.GetSystems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSystemsResponse>("/systems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch systems Returns a list of systems for which the user can make API requests. By default, systems are returned in batches of 10. The maximum size is 100.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page to be returned. Default&#x3D;1, Min&#x3D;1. For example, if page is set to 2, 2nd page is returned. (optional)</param>
        /// <param name="size">Maximum number of records shown per page. Default&#x3D;10, Min&#x3D;1, Max&#x3D;100.  For example, if set to 5, 5 records are shown per page. (optional)</param>
        /// <param name="sortBy">Returns list of systems sorted by &lt;sort_by&gt; field. To get ASC order sorted list, user sort_by &#x3D; &lt;key&gt;. To get DESC order sorted list, use sort_by &#x3D; (-)&lt;key&gt;. Current sort keys supported are id, name, and last_report_date. By default the list is sorted by decreasing system ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemsResponse</returns>
        public async System.Threading.Tasks.Task<GetSystemsResponse> GetSystemsAsync(int? page = default(int?), int? size = default(int?), SystemSortByEnum? sortBy = default(SystemSortByEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemsResponse> localVarResponse = await GetSystemsWithHttpInfoAsync(page, size, sortBy, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch systems Returns a list of systems for which the user can make API requests. By default, systems are returned in batches of 10. The maximum size is 100.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page to be returned. Default&#x3D;1, Min&#x3D;1. For example, if page is set to 2, 2nd page is returned. (optional)</param>
        /// <param name="size">Maximum number of records shown per page. Default&#x3D;10, Min&#x3D;1, Max&#x3D;100.  For example, if set to 5, 5 records are shown per page. (optional)</param>
        /// <param name="sortBy">Returns list of systems sorted by &lt;sort_by&gt; field. To get ASC order sorted list, user sort_by &#x3D; &lt;key&gt;. To get DESC order sorted list, use sort_by &#x3D; (-)&lt;key&gt;. Current sort keys supported are id, name, and last_report_date. By default the list is sorted by decreasing system ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemsResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemsResponse>> GetSystemsWithHttpInfoAsync(int? page = default(int?), int? size = default(int?), SystemSortByEnum? sortBy = default(SystemSortByEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }

            localVarRequestOptions.Operation = "SystemDetailsApi.GetSystems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSystemsResponse>("/systems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve system for a given envoy serial number Get system ID by passing envoy serial number. If the serial number of a retired envoy is passed in the request param, a 404 Not Found response will be returned.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNum">Envoy serial number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RetrieveSystemIdResponse</returns>
        public RetrieveSystemIdResponse RetrieveSystemId(string serialNum, int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<RetrieveSystemIdResponse> localVarResponse = RetrieveSystemIdWithHttpInfo(serialNum);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve system for a given envoy serial number Get system ID by passing envoy serial number. If the serial number of a retired envoy is passed in the request param, a 404 Not Found response will be returned.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNum">Envoy serial number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RetrieveSystemIdResponse</returns>
        public EnphaseOpenAPI.Monitoring.Client.ApiResponse<RetrieveSystemIdResponse> RetrieveSystemIdWithHttpInfo(string serialNum, int operationIndex = 0)
        {
            // verify the required parameter 'serialNum' is set
            if (serialNum == null)
            {
                throw new EnphaseOpenAPI.Monitoring.Client.ApiException(400, "Missing required parameter 'serialNum' when calling SystemDetailsApi->RetrieveSystemId");
            }

            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "serial_num", serialNum));

            localVarRequestOptions.Operation = "SystemDetailsApi.RetrieveSystemId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RetrieveSystemIdResponse>("/systems/retrieve_system_id", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveSystemId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve system for a given envoy serial number Get system ID by passing envoy serial number. If the serial number of a retired envoy is passed in the request param, a 404 Not Found response will be returned.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNum">Envoy serial number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RetrieveSystemIdResponse</returns>
        public async System.Threading.Tasks.Task<RetrieveSystemIdResponse> RetrieveSystemIdAsync(string serialNum, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<RetrieveSystemIdResponse> localVarResponse = await RetrieveSystemIdWithHttpInfoAsync(serialNum, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve system for a given envoy serial number Get system ID by passing envoy serial number. If the serial number of a retired envoy is passed in the request param, a 404 Not Found response will be returned.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serialNum">Envoy serial number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RetrieveSystemIdResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Monitoring.Client.ApiResponse<RetrieveSystemIdResponse>> RetrieveSystemIdWithHttpInfoAsync(string serialNum, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serialNum' is set
            if (serialNum == null)
            {
                throw new EnphaseOpenAPI.Monitoring.Client.ApiException(400, "Missing required parameter 'serialNum' when calling SystemDetailsApi->RetrieveSystemId");
            }


            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "serial_num", serialNum));

            localVarRequestOptions.Operation = "SystemDetailsApi.RetrieveSystemId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RetrieveSystemIdResponse>("/systems/retrieve_system_id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveSystemId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search and filter systems Search and filter systems. Provide only valid values in request parameters. Empty and invalid values will be ignored. Invalid keys will be rejected.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page to be returned. Default&#x3D;1, Min&#x3D;1, e.g&#x3D;2. (optional)</param>
        /// <param name="size">Maximum number of records shown per page. Default&#x3D;10, Min&#x3D;1, Max&#x3D;1000, e.g&#x3D;5. (optional)</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchSystemsResponse</returns>
        public SearchSystemsResponse SearchSystems(int? page = default(int?), int? size = default(int?), SearchSystemsRequest _params = default(SearchSystemsRequest), int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<SearchSystemsResponse> localVarResponse = SearchSystemsWithHttpInfo(page, size, _params);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search and filter systems Search and filter systems. Provide only valid values in request parameters. Empty and invalid values will be ignored. Invalid keys will be rejected.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page to be returned. Default&#x3D;1, Min&#x3D;1, e.g&#x3D;2. (optional)</param>
        /// <param name="size">Maximum number of records shown per page. Default&#x3D;10, Min&#x3D;1, Max&#x3D;1000, e.g&#x3D;5. (optional)</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchSystemsResponse</returns>
        public EnphaseOpenAPI.Monitoring.Client.ApiResponse<SearchSystemsResponse> SearchSystemsWithHttpInfo(int? page = default(int?), int? size = default(int?), SearchSystemsRequest _params = default(SearchSystemsRequest), int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            localVarRequestOptions.Data = _params;

            localVarRequestOptions.Operation = "SystemDetailsApi.SearchSystems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SearchSystemsResponse>("/systems/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchSystems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search and filter systems Search and filter systems. Provide only valid values in request parameters. Empty and invalid values will be ignored. Invalid keys will be rejected.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page to be returned. Default&#x3D;1, Min&#x3D;1, e.g&#x3D;2. (optional)</param>
        /// <param name="size">Maximum number of records shown per page. Default&#x3D;10, Min&#x3D;1, Max&#x3D;1000, e.g&#x3D;5. (optional)</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchSystemsResponse</returns>
        public async System.Threading.Tasks.Task<SearchSystemsResponse> SearchSystemsAsync(int? page = default(int?), int? size = default(int?), SearchSystemsRequest _params = default(SearchSystemsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<SearchSystemsResponse> localVarResponse = await SearchSystemsWithHttpInfoAsync(page, size, _params, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search and filter systems Search and filter systems. Provide only valid values in request parameters. Empty and invalid values will be ignored. Invalid keys will be rejected.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page to be returned. Default&#x3D;1, Min&#x3D;1, e.g&#x3D;2. (optional)</param>
        /// <param name="size">Maximum number of records shown per page. Default&#x3D;10, Min&#x3D;1, Max&#x3D;1000, e.g&#x3D;5. (optional)</param>
        /// <param name="_params"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchSystemsResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Monitoring.Client.ApiResponse<SearchSystemsResponse>> SearchSystemsWithHttpInfoAsync(int? page = default(int?), int? size = default(int?), SearchSystemsRequest _params = default(SearchSystemsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            localVarRequestOptions.Data = _params;

            localVarRequestOptions.Operation = "SystemDetailsApi.SearchSystems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SearchSystemsResponse>("/systems/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchSystems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
