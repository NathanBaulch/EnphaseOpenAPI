/*
 * The Enphase Monitoring API
 *
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EnphaseOpenAPI.Monitoring.Client;
using EnphaseOpenAPI.Monitoring.Client.Auth;
using EnphaseOpenAPI.Monitoring.Model;

namespace EnphaseOpenAPI.Monitoring.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISiteLevelProductionMonitoringApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// energy_lifetime
        /// </summary>
        /// <remarks>
        /// Returns a daily time series of energy produced by the system over its lifetime. All measurements are in Watt hours. The time series includes one entry for each day from the start_date to the end_date with no gaps in the time series. If the response includes trailing zeroes, such as [909, 4970, 0, 0, 0], then no energy has been reported for the last days in the series. If the system has a meter, the time series includes data as measured by the microinverters until the first full day after the meter has been installed. Later, it switches to using the data as measured by the meter. This is called the \&quot;merged time series\&quot;. The attribute &#39;meter_start_date&#39; indicates the time when the meter measurements begin to be used. You can retrieve the complete time series from the meter and from the microinverters by adding the parameter production&#x3D;all to the request.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startDate">Start date of the time series data. Defaults to the system&#39;s operational date. If the start_date is earlier than the system&#39;s operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format. (optional)</param>
        /// <param name="endDate">End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format. (optional)</param>
        /// <param name="production">When &#39;all&#39;, returns the merged time series plus the time series as reported by the microinverters and the meter on the system. Other values are ignored. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemEnergyLifetimeResponse</returns>
        GetSystemEnergyLifetimeResponse GetSystemEnergyLifetime(int systemId, DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), SystemEnergyLifetimeProductionEnum? production = default(SystemEnergyLifetimeProductionEnum?), int operationIndex = 0);

        /// <summary>
        /// energy_lifetime
        /// </summary>
        /// <remarks>
        /// Returns a daily time series of energy produced by the system over its lifetime. All measurements are in Watt hours. The time series includes one entry for each day from the start_date to the end_date with no gaps in the time series. If the response includes trailing zeroes, such as [909, 4970, 0, 0, 0], then no energy has been reported for the last days in the series. If the system has a meter, the time series includes data as measured by the microinverters until the first full day after the meter has been installed. Later, it switches to using the data as measured by the meter. This is called the \&quot;merged time series\&quot;. The attribute &#39;meter_start_date&#39; indicates the time when the meter measurements begin to be used. You can retrieve the complete time series from the meter and from the microinverters by adding the parameter production&#x3D;all to the request.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startDate">Start date of the time series data. Defaults to the system&#39;s operational date. If the start_date is earlier than the system&#39;s operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format. (optional)</param>
        /// <param name="endDate">End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format. (optional)</param>
        /// <param name="production">When &#39;all&#39;, returns the merged time series plus the time series as reported by the microinverters and the meter on the system. Other values are ignored. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemEnergyLifetimeResponse</returns>
        ApiResponse<GetSystemEnergyLifetimeResponse> GetSystemEnergyLifetimeWithHttpInfo(int systemId, DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), SystemEnergyLifetimeProductionEnum? production = default(SystemEnergyLifetimeProductionEnum?), int operationIndex = 0);
        /// <summary>
        /// production_meter_readings
        /// </summary>
        /// <remarks>
        /// Returns the last known reading of each production meter on the system as of the requested time, regardless of whether the meter is currently in service or retired. Read_at is the time at which the reading was taken, and is always less than or equal to the requested end_at. Commonly, the reading will be within 30 minutes of the requested end_at. However, larger deltas can occur and do not necessarily mean there is a problem with the meter or the system. Systems that are configured to report infrequently can show large deltas on all meters, especially when end_at is close to the current time. Meters that have been retired from a system will show an end_at that doesn&#39;t change, and that eventually is far away from the current time.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, defaults to the time of the request. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemProductionMeterReadingsResponse</returns>
        GetSystemProductionMeterReadingsResponse GetSystemProductionMeterReadings(int systemId, long? endAt = default(long?), int operationIndex = 0);

        /// <summary>
        /// production_meter_readings
        /// </summary>
        /// <remarks>
        /// Returns the last known reading of each production meter on the system as of the requested time, regardless of whether the meter is currently in service or retired. Read_at is the time at which the reading was taken, and is always less than or equal to the requested end_at. Commonly, the reading will be within 30 minutes of the requested end_at. However, larger deltas can occur and do not necessarily mean there is a problem with the meter or the system. Systems that are configured to report infrequently can show large deltas on all meters, especially when end_at is close to the current time. Meters that have been retired from a system will show an end_at that doesn&#39;t change, and that eventually is far away from the current time.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, defaults to the time of the request. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemProductionMeterReadingsResponse</returns>
        ApiResponse<GetSystemProductionMeterReadingsResponse> GetSystemProductionMeterReadingsWithHttpInfo(int systemId, long? endAt = default(long?), int operationIndex = 0);
        /// <summary>
        /// Retrieves telemetry for all production meters for a system
        /// </summary>
        /// <remarks>
        /// Retrieves telemetry for all the production meters of a system. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemProductionMeterTelemetryResponse</returns>
        GetSystemProductionMeterTelemetryResponse GetSystemProductionMeterTelemetry(int systemId, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0);

        /// <summary>
        /// Retrieves telemetry for all production meters for a system
        /// </summary>
        /// <remarks>
        /// Retrieves telemetry for all the production meters of a system. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemProductionMeterTelemetryResponse</returns>
        ApiResponse<GetSystemProductionMeterTelemetryResponse> GetSystemProductionMeterTelemetryWithHttpInfo(int systemId, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0);
        /// <summary>
        /// Retrieves telemetry for all production micros for a system
        /// </summary>
        /// <remarks>
        /// Retrieves telemetry for all the production micros of a system. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 3 intervals will appear in response. If granularity is day, maximum 288 intervals will appear in response where each interval is of 5 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemProductionMicroTelemetryResponse</returns>
        GetSystemProductionMicroTelemetryResponse GetSystemProductionMicroTelemetry(int systemId, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0);

        /// <summary>
        /// Retrieves telemetry for all production micros for a system
        /// </summary>
        /// <remarks>
        /// Retrieves telemetry for all the production micros of a system. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 3 intervals will appear in response. If granularity is day, maximum 288 intervals will appear in response where each interval is of 5 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemProductionMicroTelemetryResponse</returns>
        ApiResponse<GetSystemProductionMicroTelemetryResponse> GetSystemProductionMicroTelemetryWithHttpInfo(int systemId, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0);
        /// <summary>
        /// rgm_stats
        /// </summary>
        /// <remarks>
        /// Returns performance statistics as measured by the revenue-grade meters installed on the specified system. If the total duration requested is more than one week, returns one week of intervals. Intervals are 15 minutes in length and start at the top of the hour. Requests for times that do not fall on the 15-minute marks are rounded down. For example, a request for 08:01, 08:08, 08:11, or 08:14 (in epoch format) is treated as a request for 08:00 (in epoch format). Intervals are listed by their end times in epoch format. The requested date range in one API hit cannot be more than 7 days and the requested start at must be within 2 years from current time. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startAt">Start of period to report on in Unix epoch time. If no start is specified, the assumed start is midnight today, in the timezone of the system. If the start is earlier than one year ago, the response includes an empty intervals list. If the start is earlier than the system&#39;s operational_date, the response data begins at midnight of the first reported interval date. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, default to the time of the request or (start time + 1 week), whichever is earlier. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemRgmStatsResponse</returns>
        GetSystemRgmStatsResponse GetSystemRgmStats(int systemId, long? startAt = default(long?), long? endAt = default(long?), int operationIndex = 0);

        /// <summary>
        /// rgm_stats
        /// </summary>
        /// <remarks>
        /// Returns performance statistics as measured by the revenue-grade meters installed on the specified system. If the total duration requested is more than one week, returns one week of intervals. Intervals are 15 minutes in length and start at the top of the hour. Requests for times that do not fall on the 15-minute marks are rounded down. For example, a request for 08:01, 08:08, 08:11, or 08:14 (in epoch format) is treated as a request for 08:00 (in epoch format). Intervals are listed by their end times in epoch format. The requested date range in one API hit cannot be more than 7 days and the requested start at must be within 2 years from current time. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startAt">Start of period to report on in Unix epoch time. If no start is specified, the assumed start is midnight today, in the timezone of the system. If the start is earlier than one year ago, the response includes an empty intervals list. If the start is earlier than the system&#39;s operational_date, the response data begins at midnight of the first reported interval date. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, default to the time of the request or (start time + 1 week), whichever is earlier. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemRgmStatsResponse</returns>
        ApiResponse<GetSystemRgmStatsResponse> GetSystemRgmStatsWithHttpInfo(int systemId, long? startAt = default(long?), long? endAt = default(long?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISiteLevelProductionMonitoringApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// energy_lifetime
        /// </summary>
        /// <remarks>
        /// Returns a daily time series of energy produced by the system over its lifetime. All measurements are in Watt hours. The time series includes one entry for each day from the start_date to the end_date with no gaps in the time series. If the response includes trailing zeroes, such as [909, 4970, 0, 0, 0], then no energy has been reported for the last days in the series. If the system has a meter, the time series includes data as measured by the microinverters until the first full day after the meter has been installed. Later, it switches to using the data as measured by the meter. This is called the \&quot;merged time series\&quot;. The attribute &#39;meter_start_date&#39; indicates the time when the meter measurements begin to be used. You can retrieve the complete time series from the meter and from the microinverters by adding the parameter production&#x3D;all to the request.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startDate">Start date of the time series data. Defaults to the system&#39;s operational date. If the start_date is earlier than the system&#39;s operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format. (optional)</param>
        /// <param name="endDate">End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format. (optional)</param>
        /// <param name="production">When &#39;all&#39;, returns the merged time series plus the time series as reported by the microinverters and the meter on the system. Other values are ignored. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemEnergyLifetimeResponse</returns>
        System.Threading.Tasks.Task<GetSystemEnergyLifetimeResponse> GetSystemEnergyLifetimeAsync(int systemId, DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), SystemEnergyLifetimeProductionEnum? production = default(SystemEnergyLifetimeProductionEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// energy_lifetime
        /// </summary>
        /// <remarks>
        /// Returns a daily time series of energy produced by the system over its lifetime. All measurements are in Watt hours. The time series includes one entry for each day from the start_date to the end_date with no gaps in the time series. If the response includes trailing zeroes, such as [909, 4970, 0, 0, 0], then no energy has been reported for the last days in the series. If the system has a meter, the time series includes data as measured by the microinverters until the first full day after the meter has been installed. Later, it switches to using the data as measured by the meter. This is called the \&quot;merged time series\&quot;. The attribute &#39;meter_start_date&#39; indicates the time when the meter measurements begin to be used. You can retrieve the complete time series from the meter and from the microinverters by adding the parameter production&#x3D;all to the request.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startDate">Start date of the time series data. Defaults to the system&#39;s operational date. If the start_date is earlier than the system&#39;s operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format. (optional)</param>
        /// <param name="endDate">End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format. (optional)</param>
        /// <param name="production">When &#39;all&#39;, returns the merged time series plus the time series as reported by the microinverters and the meter on the system. Other values are ignored. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemEnergyLifetimeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSystemEnergyLifetimeResponse>> GetSystemEnergyLifetimeWithHttpInfoAsync(int systemId, DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), SystemEnergyLifetimeProductionEnum? production = default(SystemEnergyLifetimeProductionEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// production_meter_readings
        /// </summary>
        /// <remarks>
        /// Returns the last known reading of each production meter on the system as of the requested time, regardless of whether the meter is currently in service or retired. Read_at is the time at which the reading was taken, and is always less than or equal to the requested end_at. Commonly, the reading will be within 30 minutes of the requested end_at. However, larger deltas can occur and do not necessarily mean there is a problem with the meter or the system. Systems that are configured to report infrequently can show large deltas on all meters, especially when end_at is close to the current time. Meters that have been retired from a system will show an end_at that doesn&#39;t change, and that eventually is far away from the current time.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, defaults to the time of the request. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemProductionMeterReadingsResponse</returns>
        System.Threading.Tasks.Task<GetSystemProductionMeterReadingsResponse> GetSystemProductionMeterReadingsAsync(int systemId, long? endAt = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// production_meter_readings
        /// </summary>
        /// <remarks>
        /// Returns the last known reading of each production meter on the system as of the requested time, regardless of whether the meter is currently in service or retired. Read_at is the time at which the reading was taken, and is always less than or equal to the requested end_at. Commonly, the reading will be within 30 minutes of the requested end_at. However, larger deltas can occur and do not necessarily mean there is a problem with the meter or the system. Systems that are configured to report infrequently can show large deltas on all meters, especially when end_at is close to the current time. Meters that have been retired from a system will show an end_at that doesn&#39;t change, and that eventually is far away from the current time.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, defaults to the time of the request. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemProductionMeterReadingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSystemProductionMeterReadingsResponse>> GetSystemProductionMeterReadingsWithHttpInfoAsync(int systemId, long? endAt = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves telemetry for all production meters for a system
        /// </summary>
        /// <remarks>
        /// Retrieves telemetry for all the production meters of a system. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemProductionMeterTelemetryResponse</returns>
        System.Threading.Tasks.Task<GetSystemProductionMeterTelemetryResponse> GetSystemProductionMeterTelemetryAsync(int systemId, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves telemetry for all production meters for a system
        /// </summary>
        /// <remarks>
        /// Retrieves telemetry for all the production meters of a system. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemProductionMeterTelemetryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSystemProductionMeterTelemetryResponse>> GetSystemProductionMeterTelemetryWithHttpInfoAsync(int systemId, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves telemetry for all production micros for a system
        /// </summary>
        /// <remarks>
        /// Retrieves telemetry for all the production micros of a system. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 3 intervals will appear in response. If granularity is day, maximum 288 intervals will appear in response where each interval is of 5 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemProductionMicroTelemetryResponse</returns>
        System.Threading.Tasks.Task<GetSystemProductionMicroTelemetryResponse> GetSystemProductionMicroTelemetryAsync(int systemId, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves telemetry for all production micros for a system
        /// </summary>
        /// <remarks>
        /// Retrieves telemetry for all the production micros of a system. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 3 intervals will appear in response. If granularity is day, maximum 288 intervals will appear in response where each interval is of 5 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemProductionMicroTelemetryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSystemProductionMicroTelemetryResponse>> GetSystemProductionMicroTelemetryWithHttpInfoAsync(int systemId, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// rgm_stats
        /// </summary>
        /// <remarks>
        /// Returns performance statistics as measured by the revenue-grade meters installed on the specified system. If the total duration requested is more than one week, returns one week of intervals. Intervals are 15 minutes in length and start at the top of the hour. Requests for times that do not fall on the 15-minute marks are rounded down. For example, a request for 08:01, 08:08, 08:11, or 08:14 (in epoch format) is treated as a request for 08:00 (in epoch format). Intervals are listed by their end times in epoch format. The requested date range in one API hit cannot be more than 7 days and the requested start at must be within 2 years from current time. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startAt">Start of period to report on in Unix epoch time. If no start is specified, the assumed start is midnight today, in the timezone of the system. If the start is earlier than one year ago, the response includes an empty intervals list. If the start is earlier than the system&#39;s operational_date, the response data begins at midnight of the first reported interval date. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, default to the time of the request or (start time + 1 week), whichever is earlier. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemRgmStatsResponse</returns>
        System.Threading.Tasks.Task<GetSystemRgmStatsResponse> GetSystemRgmStatsAsync(int systemId, long? startAt = default(long?), long? endAt = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// rgm_stats
        /// </summary>
        /// <remarks>
        /// Returns performance statistics as measured by the revenue-grade meters installed on the specified system. If the total duration requested is more than one week, returns one week of intervals. Intervals are 15 minutes in length and start at the top of the hour. Requests for times that do not fall on the 15-minute marks are rounded down. For example, a request for 08:01, 08:08, 08:11, or 08:14 (in epoch format) is treated as a request for 08:00 (in epoch format). Intervals are listed by their end times in epoch format. The requested date range in one API hit cannot be more than 7 days and the requested start at must be within 2 years from current time. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startAt">Start of period to report on in Unix epoch time. If no start is specified, the assumed start is midnight today, in the timezone of the system. If the start is earlier than one year ago, the response includes an empty intervals list. If the start is earlier than the system&#39;s operational_date, the response data begins at midnight of the first reported interval date. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, default to the time of the request or (start time + 1 week), whichever is earlier. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemRgmStatsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSystemRgmStatsResponse>> GetSystemRgmStatsWithHttpInfoAsync(int systemId, long? startAt = default(long?), long? endAt = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISiteLevelProductionMonitoringApi : ISiteLevelProductionMonitoringApiSync, ISiteLevelProductionMonitoringApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SiteLevelProductionMonitoringApi : ISiteLevelProductionMonitoringApi
    {
        private EnphaseOpenAPI.Monitoring.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SiteLevelProductionMonitoringApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SiteLevelProductionMonitoringApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SiteLevelProductionMonitoringApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SiteLevelProductionMonitoringApi(string basePath)
        {
            this.Configuration = EnphaseOpenAPI.Monitoring.Client.Configuration.MergeConfigurations(
                EnphaseOpenAPI.Monitoring.Client.GlobalConfiguration.Instance,
                new EnphaseOpenAPI.Monitoring.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EnphaseOpenAPI.Monitoring.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnphaseOpenAPI.Monitoring.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EnphaseOpenAPI.Monitoring.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SiteLevelProductionMonitoringApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SiteLevelProductionMonitoringApi(EnphaseOpenAPI.Monitoring.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EnphaseOpenAPI.Monitoring.Client.Configuration.MergeConfigurations(
                EnphaseOpenAPI.Monitoring.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EnphaseOpenAPI.Monitoring.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnphaseOpenAPI.Monitoring.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EnphaseOpenAPI.Monitoring.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SiteLevelProductionMonitoringApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SiteLevelProductionMonitoringApi(EnphaseOpenAPI.Monitoring.Client.ISynchronousClient client, EnphaseOpenAPI.Monitoring.Client.IAsynchronousClient asyncClient, EnphaseOpenAPI.Monitoring.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EnphaseOpenAPI.Monitoring.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EnphaseOpenAPI.Monitoring.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EnphaseOpenAPI.Monitoring.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EnphaseOpenAPI.Monitoring.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EnphaseOpenAPI.Monitoring.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// energy_lifetime Returns a daily time series of energy produced by the system over its lifetime. All measurements are in Watt hours. The time series includes one entry for each day from the start_date to the end_date with no gaps in the time series. If the response includes trailing zeroes, such as [909, 4970, 0, 0, 0], then no energy has been reported for the last days in the series. If the system has a meter, the time series includes data as measured by the microinverters until the first full day after the meter has been installed. Later, it switches to using the data as measured by the meter. This is called the \&quot;merged time series\&quot;. The attribute &#39;meter_start_date&#39; indicates the time when the meter measurements begin to be used. You can retrieve the complete time series from the meter and from the microinverters by adding the parameter production&#x3D;all to the request.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startDate">Start date of the time series data. Defaults to the system&#39;s operational date. If the start_date is earlier than the system&#39;s operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format. (optional)</param>
        /// <param name="endDate">End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format. (optional)</param>
        /// <param name="production">When &#39;all&#39;, returns the merged time series plus the time series as reported by the microinverters and the meter on the system. Other values are ignored. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemEnergyLifetimeResponse</returns>
        public GetSystemEnergyLifetimeResponse GetSystemEnergyLifetime(int systemId, DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), SystemEnergyLifetimeProductionEnum? production = default(SystemEnergyLifetimeProductionEnum?), int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemEnergyLifetimeResponse> localVarResponse = GetSystemEnergyLifetimeWithHttpInfo(systemId, startDate, endDate, production);
            return localVarResponse.Data;
        }

        /// <summary>
        /// energy_lifetime Returns a daily time series of energy produced by the system over its lifetime. All measurements are in Watt hours. The time series includes one entry for each day from the start_date to the end_date with no gaps in the time series. If the response includes trailing zeroes, such as [909, 4970, 0, 0, 0], then no energy has been reported for the last days in the series. If the system has a meter, the time series includes data as measured by the microinverters until the first full day after the meter has been installed. Later, it switches to using the data as measured by the meter. This is called the \&quot;merged time series\&quot;. The attribute &#39;meter_start_date&#39; indicates the time when the meter measurements begin to be used. You can retrieve the complete time series from the meter and from the microinverters by adding the parameter production&#x3D;all to the request.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startDate">Start date of the time series data. Defaults to the system&#39;s operational date. If the start_date is earlier than the system&#39;s operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format. (optional)</param>
        /// <param name="endDate">End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format. (optional)</param>
        /// <param name="production">When &#39;all&#39;, returns the merged time series plus the time series as reported by the microinverters and the meter on the system. Other values are ignored. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemEnergyLifetimeResponse</returns>
        public EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemEnergyLifetimeResponse> GetSystemEnergyLifetimeWithHttpInfo(int systemId, DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), SystemEnergyLifetimeProductionEnum? production = default(SystemEnergyLifetimeProductionEnum?), int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }
            if (production != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "production", production));
            }

            localVarRequestOptions.Operation = "SiteLevelProductionMonitoringApi.GetSystemEnergyLifetime";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSystemEnergyLifetimeResponse>("/systems/{system_id}/energy_lifetime", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemEnergyLifetime", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// energy_lifetime Returns a daily time series of energy produced by the system over its lifetime. All measurements are in Watt hours. The time series includes one entry for each day from the start_date to the end_date with no gaps in the time series. If the response includes trailing zeroes, such as [909, 4970, 0, 0, 0], then no energy has been reported for the last days in the series. If the system has a meter, the time series includes data as measured by the microinverters until the first full day after the meter has been installed. Later, it switches to using the data as measured by the meter. This is called the \&quot;merged time series\&quot;. The attribute &#39;meter_start_date&#39; indicates the time when the meter measurements begin to be used. You can retrieve the complete time series from the meter and from the microinverters by adding the parameter production&#x3D;all to the request.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startDate">Start date of the time series data. Defaults to the system&#39;s operational date. If the start_date is earlier than the system&#39;s operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format. (optional)</param>
        /// <param name="endDate">End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format. (optional)</param>
        /// <param name="production">When &#39;all&#39;, returns the merged time series plus the time series as reported by the microinverters and the meter on the system. Other values are ignored. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemEnergyLifetimeResponse</returns>
        public async System.Threading.Tasks.Task<GetSystemEnergyLifetimeResponse> GetSystemEnergyLifetimeAsync(int systemId, DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), SystemEnergyLifetimeProductionEnum? production = default(SystemEnergyLifetimeProductionEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemEnergyLifetimeResponse> localVarResponse = await GetSystemEnergyLifetimeWithHttpInfoAsync(systemId, startDate, endDate, production, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// energy_lifetime Returns a daily time series of energy produced by the system over its lifetime. All measurements are in Watt hours. The time series includes one entry for each day from the start_date to the end_date with no gaps in the time series. If the response includes trailing zeroes, such as [909, 4970, 0, 0, 0], then no energy has been reported for the last days in the series. If the system has a meter, the time series includes data as measured by the microinverters until the first full day after the meter has been installed. Later, it switches to using the data as measured by the meter. This is called the \&quot;merged time series\&quot;. The attribute &#39;meter_start_date&#39; indicates the time when the meter measurements begin to be used. You can retrieve the complete time series from the meter and from the microinverters by adding the parameter production&#x3D;all to the request.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startDate">Start date of the time series data. Defaults to the system&#39;s operational date. If the start_date is earlier than the system&#39;s operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format. (optional)</param>
        /// <param name="endDate">End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format. (optional)</param>
        /// <param name="production">When &#39;all&#39;, returns the merged time series plus the time series as reported by the microinverters and the meter on the system. Other values are ignored. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemEnergyLifetimeResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemEnergyLifetimeResponse>> GetSystemEnergyLifetimeWithHttpInfoAsync(int systemId, DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), SystemEnergyLifetimeProductionEnum? production = default(SystemEnergyLifetimeProductionEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }
            if (production != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "production", production));
            }

            localVarRequestOptions.Operation = "SiteLevelProductionMonitoringApi.GetSystemEnergyLifetime";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSystemEnergyLifetimeResponse>("/systems/{system_id}/energy_lifetime", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemEnergyLifetime", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// production_meter_readings Returns the last known reading of each production meter on the system as of the requested time, regardless of whether the meter is currently in service or retired. Read_at is the time at which the reading was taken, and is always less than or equal to the requested end_at. Commonly, the reading will be within 30 minutes of the requested end_at. However, larger deltas can occur and do not necessarily mean there is a problem with the meter or the system. Systems that are configured to report infrequently can show large deltas on all meters, especially when end_at is close to the current time. Meters that have been retired from a system will show an end_at that doesn&#39;t change, and that eventually is far away from the current time.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, defaults to the time of the request. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemProductionMeterReadingsResponse</returns>
        public GetSystemProductionMeterReadingsResponse GetSystemProductionMeterReadings(int systemId, long? endAt = default(long?), int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemProductionMeterReadingsResponse> localVarResponse = GetSystemProductionMeterReadingsWithHttpInfo(systemId, endAt);
            return localVarResponse.Data;
        }

        /// <summary>
        /// production_meter_readings Returns the last known reading of each production meter on the system as of the requested time, regardless of whether the meter is currently in service or retired. Read_at is the time at which the reading was taken, and is always less than or equal to the requested end_at. Commonly, the reading will be within 30 minutes of the requested end_at. However, larger deltas can occur and do not necessarily mean there is a problem with the meter or the system. Systems that are configured to report infrequently can show large deltas on all meters, especially when end_at is close to the current time. Meters that have been retired from a system will show an end_at that doesn&#39;t change, and that eventually is far away from the current time.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, defaults to the time of the request. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemProductionMeterReadingsResponse</returns>
        public EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemProductionMeterReadingsResponse> GetSystemProductionMeterReadingsWithHttpInfo(int systemId, long? endAt = default(long?), int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            if (endAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "end_at", endAt));
            }

            localVarRequestOptions.Operation = "SiteLevelProductionMonitoringApi.GetSystemProductionMeterReadings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSystemProductionMeterReadingsResponse>("/systems/{system_id}/production_meter_readings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemProductionMeterReadings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// production_meter_readings Returns the last known reading of each production meter on the system as of the requested time, regardless of whether the meter is currently in service or retired. Read_at is the time at which the reading was taken, and is always less than or equal to the requested end_at. Commonly, the reading will be within 30 minutes of the requested end_at. However, larger deltas can occur and do not necessarily mean there is a problem with the meter or the system. Systems that are configured to report infrequently can show large deltas on all meters, especially when end_at is close to the current time. Meters that have been retired from a system will show an end_at that doesn&#39;t change, and that eventually is far away from the current time.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, defaults to the time of the request. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemProductionMeterReadingsResponse</returns>
        public async System.Threading.Tasks.Task<GetSystemProductionMeterReadingsResponse> GetSystemProductionMeterReadingsAsync(int systemId, long? endAt = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemProductionMeterReadingsResponse> localVarResponse = await GetSystemProductionMeterReadingsWithHttpInfoAsync(systemId, endAt, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// production_meter_readings Returns the last known reading of each production meter on the system as of the requested time, regardless of whether the meter is currently in service or retired. Read_at is the time at which the reading was taken, and is always less than or equal to the requested end_at. Commonly, the reading will be within 30 minutes of the requested end_at. However, larger deltas can occur and do not necessarily mean there is a problem with the meter or the system. Systems that are configured to report infrequently can show large deltas on all meters, especially when end_at is close to the current time. Meters that have been retired from a system will show an end_at that doesn&#39;t change, and that eventually is far away from the current time.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, defaults to the time of the request. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemProductionMeterReadingsResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemProductionMeterReadingsResponse>> GetSystemProductionMeterReadingsWithHttpInfoAsync(int systemId, long? endAt = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            if (endAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "end_at", endAt));
            }

            localVarRequestOptions.Operation = "SiteLevelProductionMonitoringApi.GetSystemProductionMeterReadings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSystemProductionMeterReadingsResponse>("/systems/{system_id}/production_meter_readings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemProductionMeterReadings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves telemetry for all production meters for a system Retrieves telemetry for all the production meters of a system. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemProductionMeterTelemetryResponse</returns>
        public GetSystemProductionMeterTelemetryResponse GetSystemProductionMeterTelemetry(int systemId, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemProductionMeterTelemetryResponse> localVarResponse = GetSystemProductionMeterTelemetryWithHttpInfo(systemId, startAt, granularity);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves telemetry for all production meters for a system Retrieves telemetry for all the production meters of a system. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemProductionMeterTelemetryResponse</returns>
        public EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemProductionMeterTelemetryResponse> GetSystemProductionMeterTelemetryWithHttpInfo(int systemId, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            if (startAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "start_at", startAt));
            }
            if (granularity != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            }

            localVarRequestOptions.Operation = "SiteLevelProductionMonitoringApi.GetSystemProductionMeterTelemetry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSystemProductionMeterTelemetryResponse>("/systems/{system_id}/telemetry/production_meter", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemProductionMeterTelemetry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves telemetry for all production meters for a system Retrieves telemetry for all the production meters of a system. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemProductionMeterTelemetryResponse</returns>
        public async System.Threading.Tasks.Task<GetSystemProductionMeterTelemetryResponse> GetSystemProductionMeterTelemetryAsync(int systemId, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemProductionMeterTelemetryResponse> localVarResponse = await GetSystemProductionMeterTelemetryWithHttpInfoAsync(systemId, startAt, granularity, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves telemetry for all production meters for a system Retrieves telemetry for all the production meters of a system. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemProductionMeterTelemetryResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemProductionMeterTelemetryResponse>> GetSystemProductionMeterTelemetryWithHttpInfoAsync(int systemId, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            if (startAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "start_at", startAt));
            }
            if (granularity != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            }

            localVarRequestOptions.Operation = "SiteLevelProductionMonitoringApi.GetSystemProductionMeterTelemetry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSystemProductionMeterTelemetryResponse>("/systems/{system_id}/telemetry/production_meter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemProductionMeterTelemetry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves telemetry for all production micros for a system Retrieves telemetry for all the production micros of a system. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 3 intervals will appear in response. If granularity is day, maximum 288 intervals will appear in response where each interval is of 5 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemProductionMicroTelemetryResponse</returns>
        public GetSystemProductionMicroTelemetryResponse GetSystemProductionMicroTelemetry(int systemId, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemProductionMicroTelemetryResponse> localVarResponse = GetSystemProductionMicroTelemetryWithHttpInfo(systemId, startAt, granularity);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves telemetry for all production micros for a system Retrieves telemetry for all the production micros of a system. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 3 intervals will appear in response. If granularity is day, maximum 288 intervals will appear in response where each interval is of 5 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemProductionMicroTelemetryResponse</returns>
        public EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemProductionMicroTelemetryResponse> GetSystemProductionMicroTelemetryWithHttpInfo(int systemId, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            if (startAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "start_at", startAt));
            }
            if (granularity != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            }

            localVarRequestOptions.Operation = "SiteLevelProductionMonitoringApi.GetSystemProductionMicroTelemetry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSystemProductionMicroTelemetryResponse>("/systems/{system_id}/telemetry/production_micro", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemProductionMicroTelemetry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves telemetry for all production micros for a system Retrieves telemetry for all the production micros of a system. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 3 intervals will appear in response. If granularity is day, maximum 288 intervals will appear in response where each interval is of 5 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemProductionMicroTelemetryResponse</returns>
        public async System.Threading.Tasks.Task<GetSystemProductionMicroTelemetryResponse> GetSystemProductionMicroTelemetryAsync(int systemId, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemProductionMicroTelemetryResponse> localVarResponse = await GetSystemProductionMicroTelemetryWithHttpInfoAsync(systemId, startAt, granularity, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves telemetry for all production micros for a system Retrieves telemetry for all the production micros of a system. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 3 intervals will appear in response. If granularity is day, maximum 288 intervals will appear in response where each interval is of 5 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startAt">Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)</param>
        /// <param name="granularity">Granularity of the telemetry data. Default is &#39;day&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemProductionMicroTelemetryResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemProductionMicroTelemetryResponse>> GetSystemProductionMicroTelemetryWithHttpInfoAsync(int systemId, long? startAt = default(long?), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            if (startAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "start_at", startAt));
            }
            if (granularity != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            }

            localVarRequestOptions.Operation = "SiteLevelProductionMonitoringApi.GetSystemProductionMicroTelemetry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSystemProductionMicroTelemetryResponse>("/systems/{system_id}/telemetry/production_micro", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemProductionMicroTelemetry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// rgm_stats Returns performance statistics as measured by the revenue-grade meters installed on the specified system. If the total duration requested is more than one week, returns one week of intervals. Intervals are 15 minutes in length and start at the top of the hour. Requests for times that do not fall on the 15-minute marks are rounded down. For example, a request for 08:01, 08:08, 08:11, or 08:14 (in epoch format) is treated as a request for 08:00 (in epoch format). Intervals are listed by their end times in epoch format. The requested date range in one API hit cannot be more than 7 days and the requested start at must be within 2 years from current time. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startAt">Start of period to report on in Unix epoch time. If no start is specified, the assumed start is midnight today, in the timezone of the system. If the start is earlier than one year ago, the response includes an empty intervals list. If the start is earlier than the system&#39;s operational_date, the response data begins at midnight of the first reported interval date. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, default to the time of the request or (start time + 1 week), whichever is earlier. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemRgmStatsResponse</returns>
        public GetSystemRgmStatsResponse GetSystemRgmStats(int systemId, long? startAt = default(long?), long? endAt = default(long?), int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemRgmStatsResponse> localVarResponse = GetSystemRgmStatsWithHttpInfo(systemId, startAt, endAt);
            return localVarResponse.Data;
        }

        /// <summary>
        /// rgm_stats Returns performance statistics as measured by the revenue-grade meters installed on the specified system. If the total duration requested is more than one week, returns one week of intervals. Intervals are 15 minutes in length and start at the top of the hour. Requests for times that do not fall on the 15-minute marks are rounded down. For example, a request for 08:01, 08:08, 08:11, or 08:14 (in epoch format) is treated as a request for 08:00 (in epoch format). Intervals are listed by their end times in epoch format. The requested date range in one API hit cannot be more than 7 days and the requested start at must be within 2 years from current time. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startAt">Start of period to report on in Unix epoch time. If no start is specified, the assumed start is midnight today, in the timezone of the system. If the start is earlier than one year ago, the response includes an empty intervals list. If the start is earlier than the system&#39;s operational_date, the response data begins at midnight of the first reported interval date. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, default to the time of the request or (start time + 1 week), whichever is earlier. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemRgmStatsResponse</returns>
        public EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemRgmStatsResponse> GetSystemRgmStatsWithHttpInfo(int systemId, long? startAt = default(long?), long? endAt = default(long?), int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            if (startAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "start_at", startAt));
            }
            if (endAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "end_at", endAt));
            }

            localVarRequestOptions.Operation = "SiteLevelProductionMonitoringApi.GetSystemRgmStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSystemRgmStatsResponse>("/systems/{system_id}/rgm_stats", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemRgmStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// rgm_stats Returns performance statistics as measured by the revenue-grade meters installed on the specified system. If the total duration requested is more than one week, returns one week of intervals. Intervals are 15 minutes in length and start at the top of the hour. Requests for times that do not fall on the 15-minute marks are rounded down. For example, a request for 08:01, 08:08, 08:11, or 08:14 (in epoch format) is treated as a request for 08:00 (in epoch format). Intervals are listed by their end times in epoch format. The requested date range in one API hit cannot be more than 7 days and the requested start at must be within 2 years from current time. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startAt">Start of period to report on in Unix epoch time. If no start is specified, the assumed start is midnight today, in the timezone of the system. If the start is earlier than one year ago, the response includes an empty intervals list. If the start is earlier than the system&#39;s operational_date, the response data begins at midnight of the first reported interval date. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, default to the time of the request or (start time + 1 week), whichever is earlier. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemRgmStatsResponse</returns>
        public async System.Threading.Tasks.Task<GetSystemRgmStatsResponse> GetSystemRgmStatsAsync(int systemId, long? startAt = default(long?), long? endAt = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemRgmStatsResponse> localVarResponse = await GetSystemRgmStatsWithHttpInfoAsync(systemId, startAt, endAt, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// rgm_stats Returns performance statistics as measured by the revenue-grade meters installed on the specified system. If the total duration requested is more than one week, returns one week of intervals. Intervals are 15 minutes in length and start at the top of the hour. Requests for times that do not fall on the 15-minute marks are rounded down. For example, a request for 08:01, 08:08, 08:11, or 08:14 (in epoch format) is treated as a request for 08:00 (in epoch format). Intervals are listed by their end times in epoch format. The requested date range in one API hit cannot be more than 7 days and the requested start at must be within 2 years from current time. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="startAt">Start of period to report on in Unix epoch time. If no start is specified, the assumed start is midnight today, in the timezone of the system. If the start is earlier than one year ago, the response includes an empty intervals list. If the start is earlier than the system&#39;s operational_date, the response data begins at midnight of the first reported interval date. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, default to the time of the request or (start time + 1 week), whichever is earlier. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemRgmStatsResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemRgmStatsResponse>> GetSystemRgmStatsWithHttpInfoAsync(int systemId, long? startAt = default(long?), long? endAt = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            if (startAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "start_at", startAt));
            }
            if (endAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "end_at", endAt));
            }

            localVarRequestOptions.Operation = "SiteLevelProductionMonitoringApi.GetSystemRgmStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSystemRgmStatsResponse>("/systems/{system_id}/rgm_stats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemRgmStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
