/*
 * The Enphase Monitoring API
 *
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EnphaseOpenAPI.Monitoring.Client;
using EnphaseOpenAPI.Monitoring.Client.Auth;
using EnphaseOpenAPI.Monitoring.Model;

namespace EnphaseOpenAPI.Monitoring.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISystemConfigurationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the current battery settings of a system
        /// </summary>
        /// <remarks>
        /// Returns the current battery settings of a system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemBatterySettingsResponse</returns>
        GetSystemBatterySettingsResponse GetSystemBatterySettings(int systemId, int operationIndex = 0);

        /// <summary>
        /// Returns the current battery settings of a system
        /// </summary>
        /// <remarks>
        /// Returns the current battery settings of a system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemBatterySettingsResponse</returns>
        ApiResponse<GetSystemBatterySettingsResponse> GetSystemBatterySettingsWithHttpInfo(int systemId, int operationIndex = 0);
        /// <summary>
        /// Returns the current grid status settings of a system
        /// </summary>
        /// <remarks>
        /// Returns the current grid status settings of a system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemGridStatusSettingsResponse</returns>
        GetSystemGridStatusSettingsResponse GetSystemGridStatusSettings(int systemId, int operationIndex = 0);

        /// <summary>
        /// Returns the current grid status settings of a system
        /// </summary>
        /// <remarks>
        /// Returns the current grid status settings of a system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemGridStatusSettingsResponse</returns>
        ApiResponse<GetSystemGridStatusSettingsResponse> GetSystemGridStatusSettingsWithHttpInfo(int systemId, int operationIndex = 0);
        /// <summary>
        /// Returns the current load control settings of a system
        /// </summary>
        /// <remarks>
        /// Returns the current load control settings of a system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemLoadControlSettingsResponse</returns>
        GetSystemLoadControlSettingsResponse GetSystemLoadControlSettings(int systemId, int operationIndex = 0);

        /// <summary>
        /// Returns the current load control settings of a system
        /// </summary>
        /// <remarks>
        /// Returns the current load control settings of a system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemLoadControlSettingsResponse</returns>
        ApiResponse<GetSystemLoadControlSettingsResponse> GetSystemLoadControlSettingsWithHttpInfo(int systemId, int operationIndex = 0);
        /// <summary>
        /// Returns the current storm guard settings of a system
        /// </summary>
        /// <remarks>
        /// Returns the current storm guard settings of a system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemStormGuardSettingsResponse</returns>
        GetSystemStormGuardSettingsResponse GetSystemStormGuardSettings(int systemId, int operationIndex = 0);

        /// <summary>
        /// Returns the current storm guard settings of a system
        /// </summary>
        /// <remarks>
        /// Returns the current storm guard settings of a system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemStormGuardSettingsResponse</returns>
        ApiResponse<GetSystemStormGuardSettingsResponse> GetSystemStormGuardSettingsWithHttpInfo(int systemId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISystemConfigurationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns the current battery settings of a system
        /// </summary>
        /// <remarks>
        /// Returns the current battery settings of a system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemBatterySettingsResponse</returns>
        System.Threading.Tasks.Task<GetSystemBatterySettingsResponse> GetSystemBatterySettingsAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the current battery settings of a system
        /// </summary>
        /// <remarks>
        /// Returns the current battery settings of a system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemBatterySettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSystemBatterySettingsResponse>> GetSystemBatterySettingsWithHttpInfoAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the current grid status settings of a system
        /// </summary>
        /// <remarks>
        /// Returns the current grid status settings of a system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemGridStatusSettingsResponse</returns>
        System.Threading.Tasks.Task<GetSystemGridStatusSettingsResponse> GetSystemGridStatusSettingsAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the current grid status settings of a system
        /// </summary>
        /// <remarks>
        /// Returns the current grid status settings of a system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemGridStatusSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSystemGridStatusSettingsResponse>> GetSystemGridStatusSettingsWithHttpInfoAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the current load control settings of a system
        /// </summary>
        /// <remarks>
        /// Returns the current load control settings of a system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemLoadControlSettingsResponse</returns>
        System.Threading.Tasks.Task<GetSystemLoadControlSettingsResponse> GetSystemLoadControlSettingsAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the current load control settings of a system
        /// </summary>
        /// <remarks>
        /// Returns the current load control settings of a system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemLoadControlSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSystemLoadControlSettingsResponse>> GetSystemLoadControlSettingsWithHttpInfoAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the current storm guard settings of a system
        /// </summary>
        /// <remarks>
        /// Returns the current storm guard settings of a system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemStormGuardSettingsResponse</returns>
        System.Threading.Tasks.Task<GetSystemStormGuardSettingsResponse> GetSystemStormGuardSettingsAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the current storm guard settings of a system
        /// </summary>
        /// <remarks>
        /// Returns the current storm guard settings of a system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemStormGuardSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSystemStormGuardSettingsResponse>> GetSystemStormGuardSettingsWithHttpInfoAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISystemConfigurationsApi : ISystemConfigurationsApiSync, ISystemConfigurationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SystemConfigurationsApi : ISystemConfigurationsApi
    {
        private EnphaseOpenAPI.Monitoring.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigurationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SystemConfigurationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigurationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SystemConfigurationsApi(string basePath)
        {
            this.Configuration = EnphaseOpenAPI.Monitoring.Client.Configuration.MergeConfigurations(
                EnphaseOpenAPI.Monitoring.Client.GlobalConfiguration.Instance,
                new EnphaseOpenAPI.Monitoring.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EnphaseOpenAPI.Monitoring.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnphaseOpenAPI.Monitoring.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EnphaseOpenAPI.Monitoring.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigurationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SystemConfigurationsApi(EnphaseOpenAPI.Monitoring.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EnphaseOpenAPI.Monitoring.Client.Configuration.MergeConfigurations(
                EnphaseOpenAPI.Monitoring.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EnphaseOpenAPI.Monitoring.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnphaseOpenAPI.Monitoring.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EnphaseOpenAPI.Monitoring.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigurationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SystemConfigurationsApi(EnphaseOpenAPI.Monitoring.Client.ISynchronousClient client, EnphaseOpenAPI.Monitoring.Client.IAsynchronousClient asyncClient, EnphaseOpenAPI.Monitoring.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EnphaseOpenAPI.Monitoring.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EnphaseOpenAPI.Monitoring.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EnphaseOpenAPI.Monitoring.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EnphaseOpenAPI.Monitoring.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EnphaseOpenAPI.Monitoring.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns the current battery settings of a system Returns the current battery settings of a system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemBatterySettingsResponse</returns>
        public GetSystemBatterySettingsResponse GetSystemBatterySettings(int systemId, int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemBatterySettingsResponse> localVarResponse = GetSystemBatterySettingsWithHttpInfo(systemId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the current battery settings of a system Returns the current battery settings of a system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemBatterySettingsResponse</returns>
        public EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemBatterySettingsResponse> GetSystemBatterySettingsWithHttpInfo(int systemId, int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter

            localVarRequestOptions.Operation = "SystemConfigurationsApi.GetSystemBatterySettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSystemBatterySettingsResponse>("/systems/config/{system_id}/battery_settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemBatterySettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the current battery settings of a system Returns the current battery settings of a system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemBatterySettingsResponse</returns>
        public async System.Threading.Tasks.Task<GetSystemBatterySettingsResponse> GetSystemBatterySettingsAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemBatterySettingsResponse> localVarResponse = await GetSystemBatterySettingsWithHttpInfoAsync(systemId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the current battery settings of a system Returns the current battery settings of a system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemBatterySettingsResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemBatterySettingsResponse>> GetSystemBatterySettingsWithHttpInfoAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter

            localVarRequestOptions.Operation = "SystemConfigurationsApi.GetSystemBatterySettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSystemBatterySettingsResponse>("/systems/config/{system_id}/battery_settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemBatterySettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the current grid status settings of a system Returns the current grid status settings of a system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemGridStatusSettingsResponse</returns>
        public GetSystemGridStatusSettingsResponse GetSystemGridStatusSettings(int systemId, int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemGridStatusSettingsResponse> localVarResponse = GetSystemGridStatusSettingsWithHttpInfo(systemId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the current grid status settings of a system Returns the current grid status settings of a system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemGridStatusSettingsResponse</returns>
        public EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemGridStatusSettingsResponse> GetSystemGridStatusSettingsWithHttpInfo(int systemId, int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter

            localVarRequestOptions.Operation = "SystemConfigurationsApi.GetSystemGridStatusSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSystemGridStatusSettingsResponse>("/systems/config/{system_id}/grid_status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemGridStatusSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the current grid status settings of a system Returns the current grid status settings of a system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemGridStatusSettingsResponse</returns>
        public async System.Threading.Tasks.Task<GetSystemGridStatusSettingsResponse> GetSystemGridStatusSettingsAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemGridStatusSettingsResponse> localVarResponse = await GetSystemGridStatusSettingsWithHttpInfoAsync(systemId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the current grid status settings of a system Returns the current grid status settings of a system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemGridStatusSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemGridStatusSettingsResponse>> GetSystemGridStatusSettingsWithHttpInfoAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter

            localVarRequestOptions.Operation = "SystemConfigurationsApi.GetSystemGridStatusSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSystemGridStatusSettingsResponse>("/systems/config/{system_id}/grid_status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemGridStatusSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the current load control settings of a system Returns the current load control settings of a system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemLoadControlSettingsResponse</returns>
        public GetSystemLoadControlSettingsResponse GetSystemLoadControlSettings(int systemId, int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemLoadControlSettingsResponse> localVarResponse = GetSystemLoadControlSettingsWithHttpInfo(systemId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the current load control settings of a system Returns the current load control settings of a system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemLoadControlSettingsResponse</returns>
        public EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemLoadControlSettingsResponse> GetSystemLoadControlSettingsWithHttpInfo(int systemId, int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter

            localVarRequestOptions.Operation = "SystemConfigurationsApi.GetSystemLoadControlSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSystemLoadControlSettingsResponse>("/systems/config/{system_id}/load_control", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemLoadControlSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the current load control settings of a system Returns the current load control settings of a system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemLoadControlSettingsResponse</returns>
        public async System.Threading.Tasks.Task<GetSystemLoadControlSettingsResponse> GetSystemLoadControlSettingsAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemLoadControlSettingsResponse> localVarResponse = await GetSystemLoadControlSettingsWithHttpInfoAsync(systemId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the current load control settings of a system Returns the current load control settings of a system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemLoadControlSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemLoadControlSettingsResponse>> GetSystemLoadControlSettingsWithHttpInfoAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter

            localVarRequestOptions.Operation = "SystemConfigurationsApi.GetSystemLoadControlSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSystemLoadControlSettingsResponse>("/systems/config/{system_id}/load_control", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemLoadControlSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the current storm guard settings of a system Returns the current storm guard settings of a system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemStormGuardSettingsResponse</returns>
        public GetSystemStormGuardSettingsResponse GetSystemStormGuardSettings(int systemId, int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemStormGuardSettingsResponse> localVarResponse = GetSystemStormGuardSettingsWithHttpInfo(systemId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the current storm guard settings of a system Returns the current storm guard settings of a system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemStormGuardSettingsResponse</returns>
        public EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemStormGuardSettingsResponse> GetSystemStormGuardSettingsWithHttpInfo(int systemId, int operationIndex = 0)
        {
            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter

            localVarRequestOptions.Operation = "SystemConfigurationsApi.GetSystemStormGuardSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSystemStormGuardSettingsResponse>("/systems/config/{system_id}/storm_guard", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemStormGuardSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the current storm guard settings of a system Returns the current storm guard settings of a system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemStormGuardSettingsResponse</returns>
        public async System.Threading.Tasks.Task<GetSystemStormGuardSettingsResponse> GetSystemStormGuardSettingsAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemStormGuardSettingsResponse> localVarResponse = await GetSystemStormGuardSettingsWithHttpInfoAsync(systemId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the current storm guard settings of a system Returns the current storm guard settings of a system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Monitoring.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">Unique numeric ID of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemStormGuardSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Monitoring.Client.ApiResponse<GetSystemStormGuardSettingsResponse>> GetSystemStormGuardSettingsWithHttpInfoAsync(int systemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnphaseOpenAPI.Monitoring.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Monitoring.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnphaseOpenAPI.Monitoring.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToString(systemId)); // path parameter

            localVarRequestOptions.Operation = "SystemConfigurationsApi.GetSystemStormGuardSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (ApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Monitoring.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSystemStormGuardSettingsResponse>("/systems/config/{system_id}/storm_guard", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemStormGuardSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
