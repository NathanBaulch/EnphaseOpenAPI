/*
 * The Enphase Monitoring API
 *
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Monitoring.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Monitoring.Model
{
    /// <summary>
    /// SearchSystemsRequestSystem
    /// </summary>
    [DataContract(Name = "SearchSystemsRequest_system")]
    public partial class SearchSystemsRequestSystem : IEquatable<SearchSystemsRequestSystem>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PublicName
        /// </summary>
        [DataMember(Name = "public_name", EmitDefaultValue = false)]
        public SystemPublicNameEnum? PublicName { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionType
        /// </summary>
        [DataMember(Name = "connection_type", EmitDefaultValue = false)]
        public SystemConnectionTypeEnum? ConnectionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchSystemsRequestSystem" /> class.
        /// </summary>
        /// <param name="ids">Filter system by particular Ids..</param>
        /// <param name="name">Search by name of the system..</param>
        /// <param name="publicName">publicName.</param>
        /// <param name="statuses">Search by System status..</param>
        /// <param name="connectionType">connectionType.</param>
        public SearchSystemsRequestSystem(List<int> ids = default(List<int>), string name = default(string), SystemPublicNameEnum? publicName = default(SystemPublicNameEnum?), List<SystemStatusEnum> statuses = default(List<SystemStatusEnum>), SystemConnectionTypeEnum? connectionType = default(SystemConnectionTypeEnum?))
        {
            this.Ids = ids;
            this.Name = name;
            this.PublicName = publicName;
            this.Statuses = statuses;
            this.ConnectionType = connectionType;
        }

        /// <summary>
        /// Filter system by particular Ids.
        /// </summary>
        /// <value>Filter system by particular Ids.</value>
        [DataMember(Name = "ids", EmitDefaultValue = false)]
        public List<int> Ids { get; set; }

        /// <summary>
        /// Search by name of the system.
        /// </summary>
        /// <value>Search by name of the system.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Search by System status.
        /// </summary>
        /// <value>Search by System status.</value>
        [DataMember(Name = "statuses", EmitDefaultValue = false)]
        public List<SystemStatusEnum> Statuses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchSystemsRequestSystem {\n");
            sb.Append("  Ids: ").Append(Ids).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PublicName: ").Append(PublicName).Append("\n");
            sb.Append("  Statuses: ").Append(Statuses).Append("\n");
            sb.Append("  ConnectionType: ").Append(ConnectionType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchSystemsRequestSystem);
        }

        /// <summary>
        /// Returns true if SearchSystemsRequestSystem instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchSystemsRequestSystem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchSystemsRequestSystem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Ids == input.Ids ||
                    this.Ids != null &&
                    input.Ids != null &&
                    this.Ids.SequenceEqual(input.Ids)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PublicName == input.PublicName ||
                    this.PublicName.Equals(input.PublicName)
                ) && 
                (
                    this.Statuses == input.Statuses ||
                    this.Statuses != null &&
                    input.Statuses != null &&
                    this.Statuses.SequenceEqual(input.Statuses)
                ) && 
                (
                    this.ConnectionType == input.ConnectionType ||
                    this.ConnectionType.Equals(input.ConnectionType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ids != null)
                {
                    hashCode = (hashCode * 59) + this.Ids.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PublicName.GetHashCode();
                if (this.Statuses != null)
                {
                    hashCode = (hashCode * 59) + this.Statuses.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConnectionType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
