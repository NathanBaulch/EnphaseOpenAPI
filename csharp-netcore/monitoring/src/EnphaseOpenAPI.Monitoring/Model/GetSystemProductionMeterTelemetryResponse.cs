/*
 * The Enphase Monitoring API
 *
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Monitoring.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Monitoring.Model
{
    /// <summary>
    /// GetSystemProductionMeterTelemetryResponse
    /// </summary>
    [DataContract(Name = "GetSystemProductionMeterTelemetryResponse")]
    public partial class GetSystemProductionMeterTelemetryResponse : IEquatable<GetSystemProductionMeterTelemetryResponse>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Granularity
        /// </summary>
        [DataMember(Name = "granularity", EmitDefaultValue = false)]
        public TelemetryGranularityEnum? Granularity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSystemProductionMeterTelemetryResponse" /> class.
        /// </summary>
        /// <param name="systemId">Unique numeric ID of the system..</param>
        /// <param name="granularity">granularity.</param>
        /// <param name="totalDevices">Number of production meters in the site..</param>
        /// <param name="startAt">Start time of the data series. Either start_date or start_at will be present. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response..</param>
        /// <param name="endAt">End time of the data series. Either end_date or end_at will be present. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response..</param>
        /// <param name="items">List key &#39;intervals&#39;..</param>
        /// <param name="intervals">intervals.</param>
        public GetSystemProductionMeterTelemetryResponse(int systemId = default(int), TelemetryGranularityEnum? granularity = default(TelemetryGranularityEnum?), int totalDevices = default(int), long startAt = default(long), long endAt = default(long), string items = default(string), List<GetSystemProductionMeterTelemetryResponseIntervalsInner> intervals = default(List<GetSystemProductionMeterTelemetryResponseIntervalsInner>))
        {
            this.SystemId = systemId;
            this.Granularity = granularity;
            this.TotalDevices = totalDevices;
            this.StartAt = startAt;
            this.EndAt = endAt;
            this.Items = items;
            this.Intervals = intervals;
        }

        /// <summary>
        /// Unique numeric ID of the system.
        /// </summary>
        /// <value>Unique numeric ID of the system.</value>
        [DataMember(Name = "system_id", EmitDefaultValue = false)]
        public int SystemId { get; set; }

        /// <summary>
        /// Number of production meters in the site.
        /// </summary>
        /// <value>Number of production meters in the site.</value>
        [DataMember(Name = "total_devices", EmitDefaultValue = false)]
        public int TotalDevices { get; set; }

        /// <summary>
        /// Start time of the data series. Either start_date or start_at will be present. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response.
        /// </summary>
        /// <value>Start time of the data series. Either start_date or start_at will be present. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response.</value>
        [DataMember(Name = "start_at", EmitDefaultValue = false)]
        public long StartAt { get; set; }

        /// <summary>
        /// End time of the data series. Either end_date or end_at will be present. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
        /// </summary>
        /// <value>End time of the data series. Either end_date or end_at will be present. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.</value>
        [DataMember(Name = "end_at", EmitDefaultValue = false)]
        public long EndAt { get; set; }

        /// <summary>
        /// List key &#39;intervals&#39;.
        /// </summary>
        /// <value>List key &#39;intervals&#39;.</value>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public string Items { get; set; }

        /// <summary>
        /// Gets or Sets Intervals
        /// </summary>
        [DataMember(Name = "intervals", EmitDefaultValue = false)]
        public List<GetSystemProductionMeterTelemetryResponseIntervalsInner> Intervals { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSystemProductionMeterTelemetryResponse {\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  Granularity: ").Append(Granularity).Append("\n");
            sb.Append("  TotalDevices: ").Append(TotalDevices).Append("\n");
            sb.Append("  StartAt: ").Append(StartAt).Append("\n");
            sb.Append("  EndAt: ").Append(EndAt).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Intervals: ").Append(Intervals).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetSystemProductionMeterTelemetryResponse);
        }

        /// <summary>
        /// Returns true if GetSystemProductionMeterTelemetryResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetSystemProductionMeterTelemetryResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetSystemProductionMeterTelemetryResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SystemId == input.SystemId ||
                    this.SystemId.Equals(input.SystemId)
                ) && 
                (
                    this.Granularity == input.Granularity ||
                    this.Granularity.Equals(input.Granularity)
                ) && 
                (
                    this.TotalDevices == input.TotalDevices ||
                    this.TotalDevices.Equals(input.TotalDevices)
                ) && 
                (
                    this.StartAt == input.StartAt ||
                    this.StartAt.Equals(input.StartAt)
                ) && 
                (
                    this.EndAt == input.EndAt ||
                    this.EndAt.Equals(input.EndAt)
                ) && 
                (
                    this.Items == input.Items ||
                    (this.Items != null &&
                    this.Items.Equals(input.Items))
                ) && 
                (
                    this.Intervals == input.Intervals ||
                    this.Intervals != null &&
                    input.Intervals != null &&
                    this.Intervals.SequenceEqual(input.Intervals)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SystemId.GetHashCode();
                hashCode = (hashCode * 59) + this.Granularity.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalDevices.GetHashCode();
                hashCode = (hashCode * 59) + this.StartAt.GetHashCode();
                hashCode = (hashCode * 59) + this.EndAt.GetHashCode();
                if (this.Items != null)
                {
                    hashCode = (hashCode * 59) + this.Items.GetHashCode();
                }
                if (this.Intervals != null)
                {
                    hashCode = (hashCode * 59) + this.Intervals.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
