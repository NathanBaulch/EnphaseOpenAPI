/*
 * The Enphase Monitoring API
 *
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Monitoring.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Monitoring.Model
{
    /// <summary>
    /// StreamSystemLiveDataResponseDataData
    /// </summary>
    [DataContract(Name = "StreamSystemLiveDataResponse_data_data")]
    public partial class StreamSystemLiveDataResponseDataData : IEquatable<StreamSystemLiveDataResponseDataData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StreamSystemLiveDataResponseDataData" /> class.
        /// </summary>
        /// <param name="batteryMode">Battery mode of the site. Available values are Savings Mode, Full Backup, and Self-consumption..</param>
        /// <param name="batteryPower">Battery power in watts; Power will be positive in case of discharge and negative in case of charge..</param>
        /// <param name="batterySoc">Battery soc in percentage..</param>
        /// <param name="consumptionPower">Consumption power in watts..</param>
        /// <param name="envoySerialNumber">envoySerialNumber.</param>
        /// <param name="generatorPower">Generator power in watts..</param>
        /// <param name="gridPower">Grid power in watts; Power will be negative in case of export and positive in case of import..</param>
        /// <param name="gridStatus">Grid state of the site. Available values are On Grid, Off Grid, Unknown..</param>
        /// <param name="pvPower">PV power in watts..</param>
        /// <param name="systemId">The unique numeric ID of the system..</param>
        public StreamSystemLiveDataResponseDataData(string batteryMode = default(string), int batteryPower = default(int), int batterySoc = default(int), int consumptionPower = default(int), List<string> envoySerialNumber = default(List<string>), int generatorPower = default(int), int gridPower = default(int), string gridStatus = default(string), int pvPower = default(int), int systemId = default(int))
        {
            this.BatteryMode = batteryMode;
            this.BatteryPower = batteryPower;
            this.BatterySoc = batterySoc;
            this.ConsumptionPower = consumptionPower;
            this.EnvoySerialNumber = envoySerialNumber;
            this.GeneratorPower = generatorPower;
            this.GridPower = gridPower;
            this.GridStatus = gridStatus;
            this.PvPower = pvPower;
            this.SystemId = systemId;
        }

        /// <summary>
        /// Battery mode of the site. Available values are Savings Mode, Full Backup, and Self-consumption.
        /// </summary>
        /// <value>Battery mode of the site. Available values are Savings Mode, Full Backup, and Self-consumption.</value>
        [DataMember(Name = "battery_mode", EmitDefaultValue = false)]
        public string BatteryMode { get; set; }

        /// <summary>
        /// Battery power in watts; Power will be positive in case of discharge and negative in case of charge.
        /// </summary>
        /// <value>Battery power in watts; Power will be positive in case of discharge and negative in case of charge.</value>
        [DataMember(Name = "battery_power", EmitDefaultValue = false)]
        public int BatteryPower { get; set; }

        /// <summary>
        /// Battery soc in percentage.
        /// </summary>
        /// <value>Battery soc in percentage.</value>
        [DataMember(Name = "battery_soc", EmitDefaultValue = false)]
        public int BatterySoc { get; set; }

        /// <summary>
        /// Consumption power in watts.
        /// </summary>
        /// <value>Consumption power in watts.</value>
        [DataMember(Name = "consumption_power", EmitDefaultValue = false)]
        public int ConsumptionPower { get; set; }

        /// <summary>
        /// Gets or Sets EnvoySerialNumber
        /// </summary>
        [DataMember(Name = "envoy_serial_number", EmitDefaultValue = false)]
        public List<string> EnvoySerialNumber { get; set; }

        /// <summary>
        /// Generator power in watts.
        /// </summary>
        /// <value>Generator power in watts.</value>
        [DataMember(Name = "generator_power", EmitDefaultValue = false)]
        public int GeneratorPower { get; set; }

        /// <summary>
        /// Grid power in watts; Power will be negative in case of export and positive in case of import.
        /// </summary>
        /// <value>Grid power in watts; Power will be negative in case of export and positive in case of import.</value>
        [DataMember(Name = "grid_power", EmitDefaultValue = false)]
        public int GridPower { get; set; }

        /// <summary>
        /// Grid state of the site. Available values are On Grid, Off Grid, Unknown.
        /// </summary>
        /// <value>Grid state of the site. Available values are On Grid, Off Grid, Unknown.</value>
        [DataMember(Name = "grid_status", EmitDefaultValue = false)]
        public string GridStatus { get; set; }

        /// <summary>
        /// PV power in watts.
        /// </summary>
        /// <value>PV power in watts.</value>
        [DataMember(Name = "pv_power", EmitDefaultValue = false)]
        public int PvPower { get; set; }

        /// <summary>
        /// The unique numeric ID of the system.
        /// </summary>
        /// <value>The unique numeric ID of the system.</value>
        [DataMember(Name = "system_id", EmitDefaultValue = false)]
        public int SystemId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StreamSystemLiveDataResponseDataData {\n");
            sb.Append("  BatteryMode: ").Append(BatteryMode).Append("\n");
            sb.Append("  BatteryPower: ").Append(BatteryPower).Append("\n");
            sb.Append("  BatterySoc: ").Append(BatterySoc).Append("\n");
            sb.Append("  ConsumptionPower: ").Append(ConsumptionPower).Append("\n");
            sb.Append("  EnvoySerialNumber: ").Append(EnvoySerialNumber).Append("\n");
            sb.Append("  GeneratorPower: ").Append(GeneratorPower).Append("\n");
            sb.Append("  GridPower: ").Append(GridPower).Append("\n");
            sb.Append("  GridStatus: ").Append(GridStatus).Append("\n");
            sb.Append("  PvPower: ").Append(PvPower).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StreamSystemLiveDataResponseDataData);
        }

        /// <summary>
        /// Returns true if StreamSystemLiveDataResponseDataData instances are equal
        /// </summary>
        /// <param name="input">Instance of StreamSystemLiveDataResponseDataData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StreamSystemLiveDataResponseDataData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BatteryMode == input.BatteryMode ||
                    (this.BatteryMode != null &&
                    this.BatteryMode.Equals(input.BatteryMode))
                ) && 
                (
                    this.BatteryPower == input.BatteryPower ||
                    this.BatteryPower.Equals(input.BatteryPower)
                ) && 
                (
                    this.BatterySoc == input.BatterySoc ||
                    this.BatterySoc.Equals(input.BatterySoc)
                ) && 
                (
                    this.ConsumptionPower == input.ConsumptionPower ||
                    this.ConsumptionPower.Equals(input.ConsumptionPower)
                ) && 
                (
                    this.EnvoySerialNumber == input.EnvoySerialNumber ||
                    this.EnvoySerialNumber != null &&
                    input.EnvoySerialNumber != null &&
                    this.EnvoySerialNumber.SequenceEqual(input.EnvoySerialNumber)
                ) && 
                (
                    this.GeneratorPower == input.GeneratorPower ||
                    this.GeneratorPower.Equals(input.GeneratorPower)
                ) && 
                (
                    this.GridPower == input.GridPower ||
                    this.GridPower.Equals(input.GridPower)
                ) && 
                (
                    this.GridStatus == input.GridStatus ||
                    (this.GridStatus != null &&
                    this.GridStatus.Equals(input.GridStatus))
                ) && 
                (
                    this.PvPower == input.PvPower ||
                    this.PvPower.Equals(input.PvPower)
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    this.SystemId.Equals(input.SystemId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BatteryMode != null)
                {
                    hashCode = (hashCode * 59) + this.BatteryMode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BatteryPower.GetHashCode();
                hashCode = (hashCode * 59) + this.BatterySoc.GetHashCode();
                hashCode = (hashCode * 59) + this.ConsumptionPower.GetHashCode();
                if (this.EnvoySerialNumber != null)
                {
                    hashCode = (hashCode * 59) + this.EnvoySerialNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GeneratorPower.GetHashCode();
                hashCode = (hashCode * 59) + this.GridPower.GetHashCode();
                if (this.GridStatus != null)
                {
                    hashCode = (hashCode * 59) + this.GridStatus.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PvPower.GetHashCode();
                hashCode = (hashCode * 59) + this.SystemId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
