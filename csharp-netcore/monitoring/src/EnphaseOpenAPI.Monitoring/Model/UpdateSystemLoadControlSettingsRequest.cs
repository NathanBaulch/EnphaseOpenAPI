/*
 * The Enphase Monitoring API
 *
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Monitoring.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Monitoring.Model
{
    /// <summary>
    /// UpdateSystemLoadControlSettingsRequest
    /// </summary>
    [DataContract(Name = "UpdateSystemLoadControlSettingsRequest")]
    public partial class UpdateSystemLoadControlSettingsRequest : IEquatable<UpdateSystemLoadControlSettingsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateSystemLoadControlSettingsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateSystemLoadControlSettingsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateSystemLoadControlSettingsRequest" /> class.
        /// </summary>
        /// <param name="name">Name of the dry contact. Name cannot be changed. It is only used to identify the dry contact that needs to be updated. (required).</param>
        /// <param name="loadName">Load Name of the load. Load Name cannot be changed. It is only used to identify the dry contact that needs to be updated..</param>
        /// <param name="mode">Mode. Available values are \&quot;Scheduled\&quot;, \&quot;Basic\&quot;, \&quot;Advanced_BatteryPowered\&quot;, \&quot;Manual_always_not_powered\&quot;, \&quot;Manual_always_powered\&quot;, \&quot;Advanced_GeneratorPowered\&quot;..</param>
        /// <param name="socLow">Applicable for advanced mode. Load will be powered off when the battery soc reaches this level. It can be between 10 to 90..</param>
        /// <param name="essentialStartTime">Applicable for scheduled mode. Time in seconds. Load will powered on between essential_start_time and essential_end_time..</param>
        /// <param name="essentialEndTime">Applicable for scheduled mode. Time in seconds. Load will powered on between essential_start_time and essential_end_time..</param>
        public UpdateSystemLoadControlSettingsRequest(string name = default(string), string loadName = default(string), string mode = default(string), int socLow = default(int), int essentialStartTime = default(int), int essentialEndTime = default(int))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UpdateSystemLoadControlSettingsRequest and cannot be null");
            }
            this.Name = name;
            this.LoadName = loadName;
            this.Mode = mode;
            this.SocLow = socLow;
            this.EssentialStartTime = essentialStartTime;
            this.EssentialEndTime = essentialEndTime;
        }

        /// <summary>
        /// Name of the dry contact. Name cannot be changed. It is only used to identify the dry contact that needs to be updated.
        /// </summary>
        /// <value>Name of the dry contact. Name cannot be changed. It is only used to identify the dry contact that needs to be updated.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Load Name of the load. Load Name cannot be changed. It is only used to identify the dry contact that needs to be updated.
        /// </summary>
        /// <value>Load Name of the load. Load Name cannot be changed. It is only used to identify the dry contact that needs to be updated.</value>
        [DataMember(Name = "load_name", EmitDefaultValue = false)]
        public string LoadName { get; set; }

        /// <summary>
        /// Mode. Available values are \&quot;Scheduled\&quot;, \&quot;Basic\&quot;, \&quot;Advanced_BatteryPowered\&quot;, \&quot;Manual_always_not_powered\&quot;, \&quot;Manual_always_powered\&quot;, \&quot;Advanced_GeneratorPowered\&quot;.
        /// </summary>
        /// <value>Mode. Available values are \&quot;Scheduled\&quot;, \&quot;Basic\&quot;, \&quot;Advanced_BatteryPowered\&quot;, \&quot;Manual_always_not_powered\&quot;, \&quot;Manual_always_powered\&quot;, \&quot;Advanced_GeneratorPowered\&quot;.</value>
        [DataMember(Name = "mode", EmitDefaultValue = false)]
        public string Mode { get; set; }

        /// <summary>
        /// Applicable for advanced mode. Load will be powered off when the battery soc reaches this level. It can be between 10 to 90.
        /// </summary>
        /// <value>Applicable for advanced mode. Load will be powered off when the battery soc reaches this level. It can be between 10 to 90.</value>
        [DataMember(Name = "soc_low", EmitDefaultValue = false)]
        public int SocLow { get; set; }

        /// <summary>
        /// Applicable for scheduled mode. Time in seconds. Load will powered on between essential_start_time and essential_end_time.
        /// </summary>
        /// <value>Applicable for scheduled mode. Time in seconds. Load will powered on between essential_start_time and essential_end_time.</value>
        [DataMember(Name = "essential_start_time", EmitDefaultValue = false)]
        public int EssentialStartTime { get; set; }

        /// <summary>
        /// Applicable for scheduled mode. Time in seconds. Load will powered on between essential_start_time and essential_end_time.
        /// </summary>
        /// <value>Applicable for scheduled mode. Time in seconds. Load will powered on between essential_start_time and essential_end_time.</value>
        [DataMember(Name = "essential_end_time", EmitDefaultValue = false)]
        public int EssentialEndTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateSystemLoadControlSettingsRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LoadName: ").Append(LoadName).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  SocLow: ").Append(SocLow).Append("\n");
            sb.Append("  EssentialStartTime: ").Append(EssentialStartTime).Append("\n");
            sb.Append("  EssentialEndTime: ").Append(EssentialEndTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateSystemLoadControlSettingsRequest);
        }

        /// <summary>
        /// Returns true if UpdateSystemLoadControlSettingsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateSystemLoadControlSettingsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateSystemLoadControlSettingsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.LoadName == input.LoadName ||
                    (this.LoadName != null &&
                    this.LoadName.Equals(input.LoadName))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.SocLow == input.SocLow ||
                    this.SocLow.Equals(input.SocLow)
                ) && 
                (
                    this.EssentialStartTime == input.EssentialStartTime ||
                    this.EssentialStartTime.Equals(input.EssentialStartTime)
                ) && 
                (
                    this.EssentialEndTime == input.EssentialEndTime ||
                    this.EssentialEndTime.Equals(input.EssentialEndTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.LoadName != null)
                {
                    hashCode = (hashCode * 59) + this.LoadName.GetHashCode();
                }
                if (this.Mode != null)
                {
                    hashCode = (hashCode * 59) + this.Mode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SocLow.GetHashCode();
                hashCode = (hashCode * 59) + this.EssentialStartTime.GetHashCode();
                hashCode = (hashCode * 59) + this.EssentialEndTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SocLow (int) maximum
            if (this.SocLow > (int)90)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SocLow, must be a value less than or equal to 90.", new [] { "SocLow" });
            }

            // SocLow (int) minimum
            if (this.SocLow < (int)10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SocLow, must be a value greater than or equal to 10.", new [] { "SocLow" });
            }

            yield break;
        }
    }

}
