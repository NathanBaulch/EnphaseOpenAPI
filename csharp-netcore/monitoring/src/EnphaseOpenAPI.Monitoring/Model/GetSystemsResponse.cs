/*
 * The Enphase Monitoring API
 *
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Monitoring.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Monitoring.Model
{
    /// <summary>
    /// GetSystemsResponse
    /// </summary>
    [DataContract(Name = "GetSystemsResponse")]
    public partial class GetSystemsResponse : IEquatable<GetSystemsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSystemsResponse" /> class.
        /// </summary>
        /// <param name="total">Total number of systems..</param>
        /// <param name="currentPage">Number of the current page fetched..</param>
        /// <param name="size">Maximum number of records shown per page. Default&#x3D;10, Min&#x3D;1, Max&#x3D;100..</param>
        /// <param name="count">Total number of systems actually returned for the current page..</param>
        /// <param name="items">Named key of the list data. In this endpoint, it is systems..</param>
        /// <param name="systems">List of systems..</param>
        public GetSystemsResponse(int total = default(int), int currentPage = default(int), int size = default(int), int count = default(int), string items = default(string), List<SystemDetails> systems = default(List<SystemDetails>))
        {
            this.Total = total;
            this.CurrentPage = currentPage;
            this.Size = size;
            this.Count = count;
            this.Items = items;
            this.Systems = systems;
        }

        /// <summary>
        /// Total number of systems.
        /// </summary>
        /// <value>Total number of systems.</value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public int Total { get; set; }

        /// <summary>
        /// Number of the current page fetched.
        /// </summary>
        /// <value>Number of the current page fetched.</value>
        [DataMember(Name = "current_page", EmitDefaultValue = false)]
        public int CurrentPage { get; set; }

        /// <summary>
        /// Maximum number of records shown per page. Default&#x3D;10, Min&#x3D;1, Max&#x3D;100.
        /// </summary>
        /// <value>Maximum number of records shown per page. Default&#x3D;10, Min&#x3D;1, Max&#x3D;100.</value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public int Size { get; set; }

        /// <summary>
        /// Total number of systems actually returned for the current page.
        /// </summary>
        /// <value>Total number of systems actually returned for the current page.</value>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        public int Count { get; set; }

        /// <summary>
        /// Named key of the list data. In this endpoint, it is systems.
        /// </summary>
        /// <value>Named key of the list data. In this endpoint, it is systems.</value>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public string Items { get; set; }

        /// <summary>
        /// List of systems.
        /// </summary>
        /// <value>List of systems.</value>
        [DataMember(Name = "systems", EmitDefaultValue = false)]
        public List<SystemDetails> Systems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSystemsResponse {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  CurrentPage: ").Append(CurrentPage).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Systems: ").Append(Systems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetSystemsResponse);
        }

        /// <summary>
        /// Returns true if GetSystemsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetSystemsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetSystemsResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                ) && 
                (
                    this.CurrentPage == input.CurrentPage ||
                    this.CurrentPage.Equals(input.CurrentPage)
                ) && 
                (
                    this.Size == input.Size ||
                    this.Size.Equals(input.Size)
                ) && 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.Items == input.Items ||
                    (this.Items != null &&
                    this.Items.Equals(input.Items))
                ) && 
                (
                    this.Systems == input.Systems ||
                    this.Systems != null &&
                    input.Systems != null &&
                    this.Systems.SequenceEqual(input.Systems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Total.GetHashCode();
                hashCode = (hashCode * 59) + this.CurrentPage.GetHashCode();
                hashCode = (hashCode * 59) + this.Size.GetHashCode();
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                if (this.Items != null)
                {
                    hashCode = (hashCode * 59) + this.Items.GetHashCode();
                }
                if (this.Systems != null)
                {
                    hashCode = (hashCode * 59) + this.Systems.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Size (int) maximum
            if (this.Size > (int)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Size, must be a value less than or equal to 100.", new [] { "Size" });
            }

            // Size (int) minimum
            if (this.Size < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Size, must be a value greater than or equal to 1.", new [] { "Size" });
            }

            yield break;
        }
    }

}
