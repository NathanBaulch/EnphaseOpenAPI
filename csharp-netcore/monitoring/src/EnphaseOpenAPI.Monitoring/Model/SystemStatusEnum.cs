/*
 * The Enphase Monitoring API
 *
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Monitoring.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Monitoring.Model
{
    /// <summary>
    /// Defines SystemStatusEnum
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum SystemStatusEnum
    {
        /// <summary>
        /// Enum Deactivated for value: deactivated
        /// </summary>
        [EnumMember(Value = "deactivated")]
        Deactivated = 1,

        /// <summary>
        /// Enum Normal for value: normal
        /// </summary>
        [EnumMember(Value = "normal")]
        Normal = 2,

        /// <summary>
        /// Enum Comm for value: comm
        /// </summary>
        [EnumMember(Value = "comm")]
        Comm = 3,

        /// <summary>
        /// Enum Micro for value: micro
        /// </summary>
        [EnumMember(Value = "micro")]
        Micro = 4,

        /// <summary>
        /// Enum Power for value: power
        /// </summary>
        [EnumMember(Value = "power")]
        Power = 5,

        /// <summary>
        /// Enum Meter for value: meter
        /// </summary>
        [EnumMember(Value = "meter")]
        Meter = 6,

        /// <summary>
        /// Enum MeterIssue for value: meter_issue
        /// </summary>
        [EnumMember(Value = "meter_issue")]
        MeterIssue = 7,

        /// <summary>
        /// Enum Battery for value: battery
        /// </summary>
        [EnumMember(Value = "battery")]
        Battery = 8,

        /// <summary>
        /// Enum StorageIdle for value: storage_idle
        /// </summary>
        [EnumMember(Value = "storage_idle")]
        StorageIdle = 9,

        /// <summary>
        /// Enum Encharge for value: encharge
        /// </summary>
        [EnumMember(Value = "encharge")]
        Encharge = 10,

        /// <summary>
        /// Enum EnchargeIssue for value: encharge_issue
        /// </summary>
        [EnumMember(Value = "encharge_issue")]
        EnchargeIssue = 11,

        /// <summary>
        /// Enum Enpower for value: enpower
        /// </summary>
        [EnumMember(Value = "enpower")]
        Enpower = 12,

        /// <summary>
        /// Enum EnpowerIssue for value: enpower_issue
        /// </summary>
        [EnumMember(Value = "enpower_issue")]
        EnpowerIssue = 13,

        /// <summary>
        /// Enum Retired for value: retired
        /// </summary>
        [EnumMember(Value = "retired")]
        Retired = 14,

        /// <summary>
        /// Enum NotMonitored for value: not_monitored
        /// </summary>
        [EnumMember(Value = "not_monitored")]
        NotMonitored = 15,

        /// <summary>
        /// Enum Unused for value: unused
        /// </summary>
        [EnumMember(Value = "unused")]
        Unused = 16,

        /// <summary>
        /// Enum Disabled for value: disabled
        /// </summary>
        [EnumMember(Value = "disabled")]
        Disabled = 17,

        /// <summary>
        /// Enum Debug for value: debug
        /// </summary>
        [EnumMember(Value = "debug")]
        Debug = 18,

        /// <summary>
        /// Enum Info for value: info
        /// </summary>
        [EnumMember(Value = "info")]
        Info = 19,

        /// <summary>
        /// Enum Monitored for value: monitored
        /// </summary>
        [EnumMember(Value = "monitored")]
        Monitored = 20,

        /// <summary>
        /// Enum Muted for value: muted
        /// </summary>
        [EnumMember(Value = "muted")]
        Muted = 21,

        /// <summary>
        /// Enum Warning for value: warning
        /// </summary>
        [EnumMember(Value = "warning")]
        Warning = 22,

        /// <summary>
        /// Enum Error for value: error
        /// </summary>
        [EnumMember(Value = "error")]
        Error = 23,

        /// <summary>
        /// Enum NoData for value: no_data
        /// </summary>
        [EnumMember(Value = "no_data")]
        NoData = 24,

        /// <summary>
        /// Enum Rma for value: rma
        /// </summary>
        [EnumMember(Value = "rma")]
        Rma = 25,

        /// <summary>
        /// Enum Unknown for value: unknown
        /// </summary>
        [EnumMember(Value = "unknown")]
        Unknown = 26,

        /// <summary>
        /// Enum Nsr for value: nsr
        /// </summary>
        [EnumMember(Value = "nsr")]
        Nsr = 27,

        /// <summary>
        /// Enum Any for value: any
        /// </summary>
        [EnumMember(Value = "any")]
        Any = 28,

        /// <summary>
        /// Enum DataUpload for value: data_upload
        /// </summary>
        [EnumMember(Value = "data_upload")]
        DataUpload = 29,

        /// <summary>
        /// Enum OnGrid for value: on_grid
        /// </summary>
        [EnumMember(Value = "on_grid")]
        OnGrid = 30,

        /// <summary>
        /// Enum OffGrid for value: off_grid
        /// </summary>
        [EnumMember(Value = "off_grid")]
        OffGrid = 31,

        /// <summary>
        /// Enum GridUnknown for value: grid_unknown
        /// </summary>
        [EnumMember(Value = "grid_unknown")]
        GridUnknown = 32

    }

}
