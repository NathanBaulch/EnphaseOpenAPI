/*
 * The Enphase Monitoring API
 *
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Monitoring.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Monitoring.Model
{
    /// <summary>
    /// GetSystemSummaryResponse
    /// </summary>
    [DataContract(Name = "GetSystemSummaryResponse")]
    public partial class GetSystemSummaryResponse : IEquatable<GetSystemSummaryResponse>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public SystemStatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSystemSummaryResponse" /> class.
        /// </summary>
        /// <param name="systemId">Unique numeric ID of the system..</param>
        /// <param name="currentPower">Current power production of the system in Watts..</param>
        /// <param name="energyLifetime">Energy generated by the system during its lifetime in Wh..</param>
        /// <param name="energyToday">Energy generated by the system today in Wh..</param>
        /// <param name="lastIntervalEndAt">Last known time that the system produced energy. When a system has not been communicating for a length of time, the last_report_at can be recent, whereas the last_interval_end_at may be further back..</param>
        /// <param name="lastReportAt">Timestamp (in epoch format) at which the system&#39;s Envoy last submitted a report..</param>
        /// <param name="modules">Total number of modules in the system..</param>
        /// <param name="operationalAt">Timestamp (in epoch format) at which this system became operational. Corresponds to the system&#39;s interconnect time, if one is specified. Otherwise, it is the system&#39;s first reported interval end time..</param>
        /// <param name="sizeW">System size in watts..</param>
        /// <param name="source">Source of energy measurement..</param>
        /// <param name="status">status.</param>
        /// <param name="summaryDate">Summary date..</param>
        public GetSystemSummaryResponse(int systemId = default(int), int currentPower = default(int), int energyLifetime = default(int), int energyToday = default(int), long lastIntervalEndAt = default(long), long lastReportAt = default(long), int modules = default(int), long operationalAt = default(long), int sizeW = default(int), string source = default(string), SystemStatusEnum? status = default(SystemStatusEnum?), DateTimeOffset summaryDate = default(DateTimeOffset))
        {
            this.SystemId = systemId;
            this.CurrentPower = currentPower;
            this.EnergyLifetime = energyLifetime;
            this.EnergyToday = energyToday;
            this.LastIntervalEndAt = lastIntervalEndAt;
            this.LastReportAt = lastReportAt;
            this.Modules = modules;
            this.OperationalAt = operationalAt;
            this.SizeW = sizeW;
            this.Source = source;
            this.Status = status;
            this.SummaryDate = summaryDate;
        }

        /// <summary>
        /// Unique numeric ID of the system.
        /// </summary>
        /// <value>Unique numeric ID of the system.</value>
        [DataMember(Name = "system_id", EmitDefaultValue = false)]
        public int SystemId { get; set; }

        /// <summary>
        /// Current power production of the system in Watts.
        /// </summary>
        /// <value>Current power production of the system in Watts.</value>
        [DataMember(Name = "current_power", EmitDefaultValue = false)]
        public int CurrentPower { get; set; }

        /// <summary>
        /// Energy generated by the system during its lifetime in Wh.
        /// </summary>
        /// <value>Energy generated by the system during its lifetime in Wh.</value>
        [DataMember(Name = "energy_lifetime", EmitDefaultValue = false)]
        public int EnergyLifetime { get; set; }

        /// <summary>
        /// Energy generated by the system today in Wh.
        /// </summary>
        /// <value>Energy generated by the system today in Wh.</value>
        [DataMember(Name = "energy_today", EmitDefaultValue = false)]
        public int EnergyToday { get; set; }

        /// <summary>
        /// Last known time that the system produced energy. When a system has not been communicating for a length of time, the last_report_at can be recent, whereas the last_interval_end_at may be further back.
        /// </summary>
        /// <value>Last known time that the system produced energy. When a system has not been communicating for a length of time, the last_report_at can be recent, whereas the last_interval_end_at may be further back.</value>
        [DataMember(Name = "last_interval_end_at", EmitDefaultValue = false)]
        public long LastIntervalEndAt { get; set; }

        /// <summary>
        /// Timestamp (in epoch format) at which the system&#39;s Envoy last submitted a report.
        /// </summary>
        /// <value>Timestamp (in epoch format) at which the system&#39;s Envoy last submitted a report.</value>
        [DataMember(Name = "last_report_at", EmitDefaultValue = false)]
        public long LastReportAt { get; set; }

        /// <summary>
        /// Total number of modules in the system.
        /// </summary>
        /// <value>Total number of modules in the system.</value>
        [DataMember(Name = "modules", EmitDefaultValue = false)]
        public int Modules { get; set; }

        /// <summary>
        /// Timestamp (in epoch format) at which this system became operational. Corresponds to the system&#39;s interconnect time, if one is specified. Otherwise, it is the system&#39;s first reported interval end time.
        /// </summary>
        /// <value>Timestamp (in epoch format) at which this system became operational. Corresponds to the system&#39;s interconnect time, if one is specified. Otherwise, it is the system&#39;s first reported interval end time.</value>
        [DataMember(Name = "operational_at", EmitDefaultValue = false)]
        public long OperationalAt { get; set; }

        /// <summary>
        /// System size in watts.
        /// </summary>
        /// <value>System size in watts.</value>
        [DataMember(Name = "size_w", EmitDefaultValue = false)]
        public int SizeW { get; set; }

        /// <summary>
        /// Source of energy measurement.
        /// </summary>
        /// <value>Source of energy measurement.</value>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public string Source { get; set; }

        /// <summary>
        /// Summary date.
        /// </summary>
        /// <value>Summary date.</value>
        [DataMember(Name = "summary_date", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTimeOffset SummaryDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSystemSummaryResponse {\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  CurrentPower: ").Append(CurrentPower).Append("\n");
            sb.Append("  EnergyLifetime: ").Append(EnergyLifetime).Append("\n");
            sb.Append("  EnergyToday: ").Append(EnergyToday).Append("\n");
            sb.Append("  LastIntervalEndAt: ").Append(LastIntervalEndAt).Append("\n");
            sb.Append("  LastReportAt: ").Append(LastReportAt).Append("\n");
            sb.Append("  Modules: ").Append(Modules).Append("\n");
            sb.Append("  OperationalAt: ").Append(OperationalAt).Append("\n");
            sb.Append("  SizeW: ").Append(SizeW).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SummaryDate: ").Append(SummaryDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetSystemSummaryResponse);
        }

        /// <summary>
        /// Returns true if GetSystemSummaryResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetSystemSummaryResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetSystemSummaryResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SystemId == input.SystemId ||
                    this.SystemId.Equals(input.SystemId)
                ) && 
                (
                    this.CurrentPower == input.CurrentPower ||
                    this.CurrentPower.Equals(input.CurrentPower)
                ) && 
                (
                    this.EnergyLifetime == input.EnergyLifetime ||
                    this.EnergyLifetime.Equals(input.EnergyLifetime)
                ) && 
                (
                    this.EnergyToday == input.EnergyToday ||
                    this.EnergyToday.Equals(input.EnergyToday)
                ) && 
                (
                    this.LastIntervalEndAt == input.LastIntervalEndAt ||
                    this.LastIntervalEndAt.Equals(input.LastIntervalEndAt)
                ) && 
                (
                    this.LastReportAt == input.LastReportAt ||
                    this.LastReportAt.Equals(input.LastReportAt)
                ) && 
                (
                    this.Modules == input.Modules ||
                    this.Modules.Equals(input.Modules)
                ) && 
                (
                    this.OperationalAt == input.OperationalAt ||
                    this.OperationalAt.Equals(input.OperationalAt)
                ) && 
                (
                    this.SizeW == input.SizeW ||
                    this.SizeW.Equals(input.SizeW)
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.SummaryDate == input.SummaryDate ||
                    (this.SummaryDate != null &&
                    this.SummaryDate.Equals(input.SummaryDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SystemId.GetHashCode();
                hashCode = (hashCode * 59) + this.CurrentPower.GetHashCode();
                hashCode = (hashCode * 59) + this.EnergyLifetime.GetHashCode();
                hashCode = (hashCode * 59) + this.EnergyToday.GetHashCode();
                hashCode = (hashCode * 59) + this.LastIntervalEndAt.GetHashCode();
                hashCode = (hashCode * 59) + this.LastReportAt.GetHashCode();
                hashCode = (hashCode * 59) + this.Modules.GetHashCode();
                hashCode = (hashCode * 59) + this.OperationalAt.GetHashCode();
                hashCode = (hashCode * 59) + this.SizeW.GetHashCode();
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.SummaryDate != null)
                {
                    hashCode = (hashCode * 59) + this.SummaryDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
