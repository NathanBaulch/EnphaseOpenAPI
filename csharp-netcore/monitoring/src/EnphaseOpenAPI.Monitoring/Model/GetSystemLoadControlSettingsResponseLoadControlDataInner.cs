/*
 * The Enphase Monitoring API
 *
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Monitoring.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Monitoring.Model
{
    /// <summary>
    /// GetSystemLoadControlSettingsResponseLoadControlDataInner
    /// </summary>
    [DataContract(Name = "GetSystemLoadControlSettingsResponse_load_control_data_inner")]
    public partial class GetSystemLoadControlSettingsResponseLoadControlDataInner : IEquatable<GetSystemLoadControlSettingsResponseLoadControlDataInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSystemLoadControlSettingsResponseLoadControlDataInner" /> class.
        /// </summary>
        /// <param name="name">Name of the dry contact..</param>
        /// <param name="loadName">Name of the load..</param>
        /// <param name="ownerCanOverride">HOs ability to override the load control settings..</param>
        /// <param name="config">Enabled/disabled..</param>
        /// <param name="socLow">Applicable for advanced mode. Load will be powered off when the battery soc reaches this level..</param>
        /// <param name="socHigh">Applicable for advanced mode. Load powers off when battery reaches soc_low. The load will be powered on when the battery soc reaches soc_high..</param>
        /// <param name="essentialStartTime">Applicable for scheduled mode. Time in seconds. Load will powered on between essential_start_time and essential_end_time..</param>
        /// <param name="essentialEndTime">Applicable for scheduled mode. Time in seconds. Load will powered on between essential_start_time and essential_end_time..</param>
        public GetSystemLoadControlSettingsResponseLoadControlDataInner(string name = default(string), string loadName = default(string), string ownerCanOverride = default(string), string config = default(string), int socLow = default(int), int socHigh = default(int), int essentialStartTime = default(int), int essentialEndTime = default(int))
        {
            this.Name = name;
            this.LoadName = loadName;
            this.OwnerCanOverride = ownerCanOverride;
            this.Config = config;
            this.SocLow = socLow;
            this.SocHigh = socHigh;
            this.EssentialStartTime = essentialStartTime;
            this.EssentialEndTime = essentialEndTime;
        }

        /// <summary>
        /// Name of the dry contact.
        /// </summary>
        /// <value>Name of the dry contact.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Name of the load.
        /// </summary>
        /// <value>Name of the load.</value>
        [DataMember(Name = "load_name", EmitDefaultValue = false)]
        public string LoadName { get; set; }

        /// <summary>
        /// HOs ability to override the load control settings.
        /// </summary>
        /// <value>HOs ability to override the load control settings.</value>
        [DataMember(Name = "owner_can_override", EmitDefaultValue = false)]
        public string OwnerCanOverride { get; set; }

        /// <summary>
        /// Enabled/disabled.
        /// </summary>
        /// <value>Enabled/disabled.</value>
        [DataMember(Name = "config", EmitDefaultValue = false)]
        public string Config { get; set; }

        /// <summary>
        /// Applicable for advanced mode. Load will be powered off when the battery soc reaches this level.
        /// </summary>
        /// <value>Applicable for advanced mode. Load will be powered off when the battery soc reaches this level.</value>
        [DataMember(Name = "soc_low", EmitDefaultValue = false)]
        public int SocLow { get; set; }

        /// <summary>
        /// Applicable for advanced mode. Load powers off when battery reaches soc_low. The load will be powered on when the battery soc reaches soc_high.
        /// </summary>
        /// <value>Applicable for advanced mode. Load powers off when battery reaches soc_low. The load will be powered on when the battery soc reaches soc_high.</value>
        [DataMember(Name = "soc_high", EmitDefaultValue = false)]
        public int SocHigh { get; set; }

        /// <summary>
        /// Applicable for scheduled mode. Time in seconds. Load will powered on between essential_start_time and essential_end_time.
        /// </summary>
        /// <value>Applicable for scheduled mode. Time in seconds. Load will powered on between essential_start_time and essential_end_time.</value>
        [DataMember(Name = "essential_start_time", EmitDefaultValue = false)]
        public int EssentialStartTime { get; set; }

        /// <summary>
        /// Applicable for scheduled mode. Time in seconds. Load will powered on between essential_start_time and essential_end_time.
        /// </summary>
        /// <value>Applicable for scheduled mode. Time in seconds. Load will powered on between essential_start_time and essential_end_time.</value>
        [DataMember(Name = "essential_end_time", EmitDefaultValue = false)]
        public int EssentialEndTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSystemLoadControlSettingsResponseLoadControlDataInner {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LoadName: ").Append(LoadName).Append("\n");
            sb.Append("  OwnerCanOverride: ").Append(OwnerCanOverride).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  SocLow: ").Append(SocLow).Append("\n");
            sb.Append("  SocHigh: ").Append(SocHigh).Append("\n");
            sb.Append("  EssentialStartTime: ").Append(EssentialStartTime).Append("\n");
            sb.Append("  EssentialEndTime: ").Append(EssentialEndTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetSystemLoadControlSettingsResponseLoadControlDataInner);
        }

        /// <summary>
        /// Returns true if GetSystemLoadControlSettingsResponseLoadControlDataInner instances are equal
        /// </summary>
        /// <param name="input">Instance of GetSystemLoadControlSettingsResponseLoadControlDataInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetSystemLoadControlSettingsResponseLoadControlDataInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.LoadName == input.LoadName ||
                    (this.LoadName != null &&
                    this.LoadName.Equals(input.LoadName))
                ) && 
                (
                    this.OwnerCanOverride == input.OwnerCanOverride ||
                    (this.OwnerCanOverride != null &&
                    this.OwnerCanOverride.Equals(input.OwnerCanOverride))
                ) && 
                (
                    this.Config == input.Config ||
                    (this.Config != null &&
                    this.Config.Equals(input.Config))
                ) && 
                (
                    this.SocLow == input.SocLow ||
                    this.SocLow.Equals(input.SocLow)
                ) && 
                (
                    this.SocHigh == input.SocHigh ||
                    this.SocHigh.Equals(input.SocHigh)
                ) && 
                (
                    this.EssentialStartTime == input.EssentialStartTime ||
                    this.EssentialStartTime.Equals(input.EssentialStartTime)
                ) && 
                (
                    this.EssentialEndTime == input.EssentialEndTime ||
                    this.EssentialEndTime.Equals(input.EssentialEndTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.LoadName != null)
                {
                    hashCode = (hashCode * 59) + this.LoadName.GetHashCode();
                }
                if (this.OwnerCanOverride != null)
                {
                    hashCode = (hashCode * 59) + this.OwnerCanOverride.GetHashCode();
                }
                if (this.Config != null)
                {
                    hashCode = (hashCode * 59) + this.Config.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SocLow.GetHashCode();
                hashCode = (hashCode * 59) + this.SocHigh.GetHashCode();
                hashCode = (hashCode * 59) + this.EssentialStartTime.GetHashCode();
                hashCode = (hashCode * 59) + this.EssentialEndTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
