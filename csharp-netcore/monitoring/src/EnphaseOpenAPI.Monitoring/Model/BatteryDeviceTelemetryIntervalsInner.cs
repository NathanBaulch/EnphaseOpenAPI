/*
 * The Enphase Monitoring API
 *
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Monitoring.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Monitoring.Model
{
    /// <summary>
    /// BatteryDeviceTelemetryIntervalsInner
    /// </summary>
    [DataContract(Name = "BatteryDeviceTelemetry_intervals_inner")]
    public partial class BatteryDeviceTelemetryIntervalsInner : IEquatable<BatteryDeviceTelemetryIntervalsInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatteryDeviceTelemetryIntervalsInner" /> class.
        /// </summary>
        /// <param name="endAt">End time of the telemetry interval..</param>
        /// <param name="charge">charge.</param>
        /// <param name="discharge">discharge.</param>
        /// <param name="soc">soc.</param>
        public BatteryDeviceTelemetryIntervalsInner(long endAt = default(long), BatteryDeviceTelemetryIntervalsInnerCharge charge = default(BatteryDeviceTelemetryIntervalsInnerCharge), BatteryDeviceTelemetryIntervalsInnerDischarge discharge = default(BatteryDeviceTelemetryIntervalsInnerDischarge), BatteryDeviceTelemetryIntervalsInnerSoc soc = default(BatteryDeviceTelemetryIntervalsInnerSoc))
        {
            this.EndAt = endAt;
            this.Charge = charge;
            this.Discharge = discharge;
            this.Soc = soc;
        }

        /// <summary>
        /// End time of the telemetry interval.
        /// </summary>
        /// <value>End time of the telemetry interval.</value>
        [DataMember(Name = "end_at", EmitDefaultValue = false)]
        public long EndAt { get; set; }

        /// <summary>
        /// Gets or Sets Charge
        /// </summary>
        [DataMember(Name = "charge", EmitDefaultValue = false)]
        public BatteryDeviceTelemetryIntervalsInnerCharge Charge { get; set; }

        /// <summary>
        /// Gets or Sets Discharge
        /// </summary>
        [DataMember(Name = "discharge", EmitDefaultValue = false)]
        public BatteryDeviceTelemetryIntervalsInnerDischarge Discharge { get; set; }

        /// <summary>
        /// Gets or Sets Soc
        /// </summary>
        [DataMember(Name = "soc", EmitDefaultValue = false)]
        public BatteryDeviceTelemetryIntervalsInnerSoc Soc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatteryDeviceTelemetryIntervalsInner {\n");
            sb.Append("  EndAt: ").Append(EndAt).Append("\n");
            sb.Append("  Charge: ").Append(Charge).Append("\n");
            sb.Append("  Discharge: ").Append(Discharge).Append("\n");
            sb.Append("  Soc: ").Append(Soc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatteryDeviceTelemetryIntervalsInner);
        }

        /// <summary>
        /// Returns true if BatteryDeviceTelemetryIntervalsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of BatteryDeviceTelemetryIntervalsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatteryDeviceTelemetryIntervalsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EndAt == input.EndAt ||
                    this.EndAt.Equals(input.EndAt)
                ) && 
                (
                    this.Charge == input.Charge ||
                    (this.Charge != null &&
                    this.Charge.Equals(input.Charge))
                ) && 
                (
                    this.Discharge == input.Discharge ||
                    (this.Discharge != null &&
                    this.Discharge.Equals(input.Discharge))
                ) && 
                (
                    this.Soc == input.Soc ||
                    (this.Soc != null &&
                    this.Soc.Equals(input.Soc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.EndAt.GetHashCode();
                if (this.Charge != null)
                {
                    hashCode = (hashCode * 59) + this.Charge.GetHashCode();
                }
                if (this.Discharge != null)
                {
                    hashCode = (hashCode * 59) + this.Discharge.GetHashCode();
                }
                if (this.Soc != null)
                {
                    hashCode = (hashCode * 59) + this.Soc.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
