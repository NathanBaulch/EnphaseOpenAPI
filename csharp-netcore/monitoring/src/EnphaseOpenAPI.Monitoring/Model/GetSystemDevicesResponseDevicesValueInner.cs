/*
 * The Enphase Monitoring API
 *
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Monitoring.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Monitoring.Model
{
    /// <summary>
    /// GetSystemDevicesResponseDevicesValueInner
    /// </summary>
    [DataContract(Name = "GetSystemDevicesResponse_devices_value_inner")]
    public partial class GetSystemDevicesResponseDevicesValueInner : IEquatable<GetSystemDevicesResponseDevicesValueInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSystemDevicesResponseDevicesValueInner" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="lastReportAt">lastReportAt.</param>
        /// <param name="name">name.</param>
        /// <param name="serialNumber">serialNumber.</param>
        /// <param name="partNumber">partNumber.</param>
        /// <param name="emuSwVersion">emuSwVersion.</param>
        /// <param name="sku">sku.</param>
        /// <param name="model">model.</param>
        /// <param name="status">status.</param>
        /// <param name="active">active.</param>
        /// <param name="state">state.</param>
        /// <param name="configType">configType.</param>
        /// <param name="cellularModem">cellularModem.</param>
        public GetSystemDevicesResponseDevicesValueInner(int id = default(int), long lastReportAt = default(long), string name = default(string), string serialNumber = default(string), string partNumber = default(string), string emuSwVersion = default(string), string sku = default(string), string model = default(string), string status = default(string), bool active = default(bool), string state = default(string), string configType = default(string), GetSystemDevicesResponseDevicesValueInnerCellularModem cellularModem = default(GetSystemDevicesResponseDevicesValueInnerCellularModem))
        {
            this.Id = id;
            this.LastReportAt = lastReportAt;
            this.Name = name;
            this.SerialNumber = serialNumber;
            this.PartNumber = partNumber;
            this.EmuSwVersion = emuSwVersion;
            this.Sku = sku;
            this.Model = model;
            this.Status = status;
            this.Active = active;
            this.State = state;
            this.ConfigType = configType;
            this.CellularModem = cellularModem;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets LastReportAt
        /// </summary>
        [DataMember(Name = "last_report_at", EmitDefaultValue = false)]
        public long LastReportAt { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumber
        /// </summary>
        [DataMember(Name = "serial_number", EmitDefaultValue = false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets PartNumber
        /// </summary>
        [DataMember(Name = "part_number", EmitDefaultValue = false)]
        public string PartNumber { get; set; }

        /// <summary>
        /// Gets or Sets EmuSwVersion
        /// </summary>
        [DataMember(Name = "emu_sw_version", EmitDefaultValue = false)]
        public string EmuSwVersion { get; set; }

        /// <summary>
        /// Gets or Sets Sku
        /// </summary>
        [DataMember(Name = "sku", EmitDefaultValue = false)]
        public string Sku { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name = "model", EmitDefaultValue = false)]
        public string Model { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets ConfigType
        /// </summary>
        [DataMember(Name = "config_type", EmitDefaultValue = false)]
        public string ConfigType { get; set; }

        /// <summary>
        /// Gets or Sets CellularModem
        /// </summary>
        [DataMember(Name = "cellular_modem", EmitDefaultValue = false)]
        public GetSystemDevicesResponseDevicesValueInnerCellularModem CellularModem { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSystemDevicesResponseDevicesValueInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastReportAt: ").Append(LastReportAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  PartNumber: ").Append(PartNumber).Append("\n");
            sb.Append("  EmuSwVersion: ").Append(EmuSwVersion).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ConfigType: ").Append(ConfigType).Append("\n");
            sb.Append("  CellularModem: ").Append(CellularModem).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetSystemDevicesResponseDevicesValueInner);
        }

        /// <summary>
        /// Returns true if GetSystemDevicesResponseDevicesValueInner instances are equal
        /// </summary>
        /// <param name="input">Instance of GetSystemDevicesResponseDevicesValueInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetSystemDevicesResponseDevicesValueInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.LastReportAt == input.LastReportAt ||
                    this.LastReportAt.Equals(input.LastReportAt)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.PartNumber == input.PartNumber ||
                    (this.PartNumber != null &&
                    this.PartNumber.Equals(input.PartNumber))
                ) && 
                (
                    this.EmuSwVersion == input.EmuSwVersion ||
                    (this.EmuSwVersion != null &&
                    this.EmuSwVersion.Equals(input.EmuSwVersion))
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.ConfigType == input.ConfigType ||
                    (this.ConfigType != null &&
                    this.ConfigType.Equals(input.ConfigType))
                ) && 
                (
                    this.CellularModem == input.CellularModem ||
                    (this.CellularModem != null &&
                    this.CellularModem.Equals(input.CellularModem))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.LastReportAt.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.SerialNumber != null)
                {
                    hashCode = (hashCode * 59) + this.SerialNumber.GetHashCode();
                }
                if (this.PartNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PartNumber.GetHashCode();
                }
                if (this.EmuSwVersion != null)
                {
                    hashCode = (hashCode * 59) + this.EmuSwVersion.GetHashCode();
                }
                if (this.Sku != null)
                {
                    hashCode = (hashCode * 59) + this.Sku.GetHashCode();
                }
                if (this.Model != null)
                {
                    hashCode = (hashCode * 59) + this.Model.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.ConfigType != null)
                {
                    hashCode = (hashCode * 59) + this.ConfigType.GetHashCode();
                }
                if (this.CellularModem != null)
                {
                    hashCode = (hashCode * 59) + this.CellularModem.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
