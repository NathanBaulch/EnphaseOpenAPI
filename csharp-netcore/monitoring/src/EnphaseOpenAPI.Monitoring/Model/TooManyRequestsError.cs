/*
 * The Enphase Monitoring API
 *
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Monitoring.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Monitoring.Model
{
    /// <summary>
    /// TooManyRequestsError
    /// </summary>
    [DataContract(Name = "TooManyRequestsError")]
    public partial class TooManyRequestsError : IEquatable<TooManyRequestsError>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TooManyRequestsError" /> class.
        /// </summary>
        /// <param name="message">Error type..</param>
        /// <param name="details">Error details..</param>
        /// <param name="code">Error code..</param>
        /// <param name="period">Quota exceeded for minute/month..</param>
        /// <param name="periodStart">Starting period timestamp..</param>
        /// <param name="periodEnd">Ending period timestamp..</param>
        /// <param name="limit">Limit count for the period..</param>
        public TooManyRequestsError(string message = default(string), string details = default(string), int code = default(int), string period = default(string), int periodStart = default(int), int periodEnd = default(int), int limit = default(int))
        {
            this.Message = message;
            this.Details = details;
            this.Code = code;
            this.Period = period;
            this.PeriodStart = periodStart;
            this.PeriodEnd = periodEnd;
            this.Limit = limit;
        }

        /// <summary>
        /// Error type.
        /// </summary>
        /// <value>Error type.</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Error details.
        /// </summary>
        /// <value>Error details.</value>
        [DataMember(Name = "details", EmitDefaultValue = false)]
        public string Details { get; set; }

        /// <summary>
        /// Error code.
        /// </summary>
        /// <value>Error code.</value>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public int Code { get; set; }

        /// <summary>
        /// Quota exceeded for minute/month.
        /// </summary>
        /// <value>Quota exceeded for minute/month.</value>
        [DataMember(Name = "period", EmitDefaultValue = false)]
        public string Period { get; set; }

        /// <summary>
        /// Starting period timestamp.
        /// </summary>
        /// <value>Starting period timestamp.</value>
        [DataMember(Name = "period_start", EmitDefaultValue = false)]
        public int PeriodStart { get; set; }

        /// <summary>
        /// Ending period timestamp.
        /// </summary>
        /// <value>Ending period timestamp.</value>
        [DataMember(Name = "period_end", EmitDefaultValue = false)]
        public int PeriodEnd { get; set; }

        /// <summary>
        /// Limit count for the period.
        /// </summary>
        /// <value>Limit count for the period.</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int Limit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TooManyRequestsError {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  PeriodStart: ").Append(PeriodStart).Append("\n");
            sb.Append("  PeriodEnd: ").Append(PeriodEnd).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TooManyRequestsError);
        }

        /// <summary>
        /// Returns true if TooManyRequestsError instances are equal
        /// </summary>
        /// <param name="input">Instance of TooManyRequestsError to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TooManyRequestsError input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                ) && 
                (
                    this.Code == input.Code ||
                    this.Code.Equals(input.Code)
                ) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && 
                (
                    this.PeriodStart == input.PeriodStart ||
                    this.PeriodStart.Equals(input.PeriodStart)
                ) && 
                (
                    this.PeriodEnd == input.PeriodEnd ||
                    this.PeriodEnd.Equals(input.PeriodEnd)
                ) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.Details != null)
                {
                    hashCode = (hashCode * 59) + this.Details.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Code.GetHashCode();
                if (this.Period != null)
                {
                    hashCode = (hashCode * 59) + this.Period.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PeriodStart.GetHashCode();
                hashCode = (hashCode * 59) + this.PeriodEnd.GetHashCode();
                hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
