/*
 * The Enphase Monitoring API
 *
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Monitoring.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Monitoring.Model
{
    /// <summary>
    /// System
    /// </summary>
    [DataContract(Name = "System")]
    public partial class System : IEquatable<System>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ConnectionType
        /// </summary>
        [DataMember(Name = "connection_type", EmitDefaultValue = false)]
        public SystemConnectionTypeEnum? ConnectionType { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public SystemStatusEnum? Status { get; set; }

        /// <summary>
        /// Gets or Sets AttachmentType
        /// </summary>
        [DataMember(Name = "attachment_type", EmitDefaultValue = false)]
        public SystemAttachmentTypeEnum? AttachmentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="System" /> class.
        /// </summary>
        /// <param name="systemId">Unique numeric ID of the system..</param>
        /// <param name="name">Name of the system..</param>
        /// <param name="publicName">Name displayed on the public system page. Available values are All, Residential System, Commercial etc. Default&#x3D;&#39;Residential System&#39;. Only for systems that allow public access..</param>
        /// <param name="timezone">Timezone to which the system belongs..</param>
        /// <param name="address">address.</param>
        /// <param name="connectionType">connectionType.</param>
        /// <param name="energyLifetime">Energy generated by the system during its lifetime in Wh. It is returned only if the count is less than or equal to 100..</param>
        /// <param name="energyToday">Energy generated by the system today in Wh. It is returned only if the count is less than or equal to 100..</param>
        /// <param name="systemSize">Size of the system. It is returned only if the count is less than or equal to 100..</param>
        /// <param name="status">status.</param>
        /// <param name="lastReportAt">Timestamp (in epoch format) at which the system&#39;s Envoy last submitted a report..</param>
        /// <param name="lastEnergyAt">Timestamp (in epoch format) at which the system&#39;s produced energy was last reported. Even if the last produced energy is 0, its timestamp will be returned..</param>
        /// <param name="operationalAt">Timestamp (in epoch format) at which this system became operational. Corresponds to the system&#39;s interconnect time, if one is specified. Otherwise, it is the system&#39;s first reported interval end time..</param>
        /// <param name="attachmentType">attachmentType.</param>
        /// <param name="interconnectDate">Date on which the system was approved to connect to the grid..</param>
        /// <param name="reference">If the calling user belongs to a company and that company has provided its own identifier for a system, that ID is included here. Otherwise, this attribute is not returned..</param>
        /// <param name="otherReferences">If any other companies have provided their own identifiers for a system, those identifiers are included here. Otherwise, this attribute is not returned..</param>
        public System(int systemId = default(int), string name = default(string), string publicName = default(string), string timezone = default(string), SystemAddress address = default(SystemAddress), SystemConnectionTypeEnum? connectionType = default(SystemConnectionTypeEnum?), int energyLifetime = default(int), int energyToday = default(int), float systemSize = default(float), SystemStatusEnum? status = default(SystemStatusEnum?), long lastReportAt = default(long), long lastEnergyAt = default(long), long operationalAt = default(long), SystemAttachmentTypeEnum? attachmentType = default(SystemAttachmentTypeEnum?), DateTimeOffset interconnectDate = default(DateTimeOffset), string reference = default(string), List<string> otherReferences = default(List<string>))
        {
            this.SystemId = systemId;
            this.Name = name;
            this.PublicName = publicName;
            this.Timezone = timezone;
            this.Address = address;
            this.ConnectionType = connectionType;
            this.EnergyLifetime = energyLifetime;
            this.EnergyToday = energyToday;
            this.SystemSize = systemSize;
            this.Status = status;
            this.LastReportAt = lastReportAt;
            this.LastEnergyAt = lastEnergyAt;
            this.OperationalAt = operationalAt;
            this.AttachmentType = attachmentType;
            this.InterconnectDate = interconnectDate;
            this.Reference = reference;
            this.OtherReferences = otherReferences;
        }

        /// <summary>
        /// Unique numeric ID of the system.
        /// </summary>
        /// <value>Unique numeric ID of the system.</value>
        [DataMember(Name = "system_id", EmitDefaultValue = false)]
        public int SystemId { get; set; }

        /// <summary>
        /// Name of the system.
        /// </summary>
        /// <value>Name of the system.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Name displayed on the public system page. Available values are All, Residential System, Commercial etc. Default&#x3D;&#39;Residential System&#39;. Only for systems that allow public access.
        /// </summary>
        /// <value>Name displayed on the public system page. Available values are All, Residential System, Commercial etc. Default&#x3D;&#39;Residential System&#39;. Only for systems that allow public access.</value>
        [DataMember(Name = "public_name", EmitDefaultValue = false)]
        public string PublicName { get; set; }

        /// <summary>
        /// Timezone to which the system belongs.
        /// </summary>
        /// <value>Timezone to which the system belongs.</value>
        [DataMember(Name = "timezone", EmitDefaultValue = false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public SystemAddress Address { get; set; }

        /// <summary>
        /// Energy generated by the system during its lifetime in Wh. It is returned only if the count is less than or equal to 100.
        /// </summary>
        /// <value>Energy generated by the system during its lifetime in Wh. It is returned only if the count is less than or equal to 100.</value>
        [DataMember(Name = "energy_lifetime", EmitDefaultValue = false)]
        public int EnergyLifetime { get; set; }

        /// <summary>
        /// Energy generated by the system today in Wh. It is returned only if the count is less than or equal to 100.
        /// </summary>
        /// <value>Energy generated by the system today in Wh. It is returned only if the count is less than or equal to 100.</value>
        [DataMember(Name = "energy_today", EmitDefaultValue = false)]
        public int EnergyToday { get; set; }

        /// <summary>
        /// Size of the system. It is returned only if the count is less than or equal to 100.
        /// </summary>
        /// <value>Size of the system. It is returned only if the count is less than or equal to 100.</value>
        [DataMember(Name = "system_size", EmitDefaultValue = false)]
        public float SystemSize { get; set; }

        /// <summary>
        /// Timestamp (in epoch format) at which the system&#39;s Envoy last submitted a report.
        /// </summary>
        /// <value>Timestamp (in epoch format) at which the system&#39;s Envoy last submitted a report.</value>
        [DataMember(Name = "last_report_at", EmitDefaultValue = false)]
        public long LastReportAt { get; set; }

        /// <summary>
        /// Timestamp (in epoch format) at which the system&#39;s produced energy was last reported. Even if the last produced energy is 0, its timestamp will be returned.
        /// </summary>
        /// <value>Timestamp (in epoch format) at which the system&#39;s produced energy was last reported. Even if the last produced energy is 0, its timestamp will be returned.</value>
        [DataMember(Name = "last_energy_at", EmitDefaultValue = false)]
        public long LastEnergyAt { get; set; }

        /// <summary>
        /// Timestamp (in epoch format) at which this system became operational. Corresponds to the system&#39;s interconnect time, if one is specified. Otherwise, it is the system&#39;s first reported interval end time.
        /// </summary>
        /// <value>Timestamp (in epoch format) at which this system became operational. Corresponds to the system&#39;s interconnect time, if one is specified. Otherwise, it is the system&#39;s first reported interval end time.</value>
        [DataMember(Name = "operational_at", EmitDefaultValue = false)]
        public long OperationalAt { get; set; }

        /// <summary>
        /// Date on which the system was approved to connect to the grid.
        /// </summary>
        /// <value>Date on which the system was approved to connect to the grid.</value>
        [DataMember(Name = "interconnect_date", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTimeOffset InterconnectDate { get; set; }

        /// <summary>
        /// If the calling user belongs to a company and that company has provided its own identifier for a system, that ID is included here. Otherwise, this attribute is not returned.
        /// </summary>
        /// <value>If the calling user belongs to a company and that company has provided its own identifier for a system, that ID is included here. Otherwise, this attribute is not returned.</value>
        [DataMember(Name = "reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// If any other companies have provided their own identifiers for a system, those identifiers are included here. Otherwise, this attribute is not returned.
        /// </summary>
        /// <value>If any other companies have provided their own identifiers for a system, those identifiers are included here. Otherwise, this attribute is not returned.</value>
        [DataMember(Name = "other_references", EmitDefaultValue = false)]
        public List<string> OtherReferences { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class System {\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PublicName: ").Append(PublicName).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  ConnectionType: ").Append(ConnectionType).Append("\n");
            sb.Append("  EnergyLifetime: ").Append(EnergyLifetime).Append("\n");
            sb.Append("  EnergyToday: ").Append(EnergyToday).Append("\n");
            sb.Append("  SystemSize: ").Append(SystemSize).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  LastReportAt: ").Append(LastReportAt).Append("\n");
            sb.Append("  LastEnergyAt: ").Append(LastEnergyAt).Append("\n");
            sb.Append("  OperationalAt: ").Append(OperationalAt).Append("\n");
            sb.Append("  AttachmentType: ").Append(AttachmentType).Append("\n");
            sb.Append("  InterconnectDate: ").Append(InterconnectDate).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  OtherReferences: ").Append(OtherReferences).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as System);
        }

        /// <summary>
        /// Returns true if System instances are equal
        /// </summary>
        /// <param name="input">Instance of System to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(System input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SystemId == input.SystemId ||
                    this.SystemId.Equals(input.SystemId)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PublicName == input.PublicName ||
                    (this.PublicName != null &&
                    this.PublicName.Equals(input.PublicName))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.ConnectionType == input.ConnectionType ||
                    this.ConnectionType.Equals(input.ConnectionType)
                ) && 
                (
                    this.EnergyLifetime == input.EnergyLifetime ||
                    this.EnergyLifetime.Equals(input.EnergyLifetime)
                ) && 
                (
                    this.EnergyToday == input.EnergyToday ||
                    this.EnergyToday.Equals(input.EnergyToday)
                ) && 
                (
                    this.SystemSize == input.SystemSize ||
                    this.SystemSize.Equals(input.SystemSize)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.LastReportAt == input.LastReportAt ||
                    this.LastReportAt.Equals(input.LastReportAt)
                ) && 
                (
                    this.LastEnergyAt == input.LastEnergyAt ||
                    this.LastEnergyAt.Equals(input.LastEnergyAt)
                ) && 
                (
                    this.OperationalAt == input.OperationalAt ||
                    this.OperationalAt.Equals(input.OperationalAt)
                ) && 
                (
                    this.AttachmentType == input.AttachmentType ||
                    this.AttachmentType.Equals(input.AttachmentType)
                ) && 
                (
                    this.InterconnectDate == input.InterconnectDate ||
                    (this.InterconnectDate != null &&
                    this.InterconnectDate.Equals(input.InterconnectDate))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.OtherReferences == input.OtherReferences ||
                    this.OtherReferences != null &&
                    input.OtherReferences != null &&
                    this.OtherReferences.SequenceEqual(input.OtherReferences)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SystemId.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.PublicName != null)
                {
                    hashCode = (hashCode * 59) + this.PublicName.GetHashCode();
                }
                if (this.Timezone != null)
                {
                    hashCode = (hashCode * 59) + this.Timezone.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConnectionType.GetHashCode();
                hashCode = (hashCode * 59) + this.EnergyLifetime.GetHashCode();
                hashCode = (hashCode * 59) + this.EnergyToday.GetHashCode();
                hashCode = (hashCode * 59) + this.SystemSize.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                hashCode = (hashCode * 59) + this.LastReportAt.GetHashCode();
                hashCode = (hashCode * 59) + this.LastEnergyAt.GetHashCode();
                hashCode = (hashCode * 59) + this.OperationalAt.GetHashCode();
                hashCode = (hashCode * 59) + this.AttachmentType.GetHashCode();
                if (this.InterconnectDate != null)
                {
                    hashCode = (hashCode * 59) + this.InterconnectDate.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.OtherReferences != null)
                {
                    hashCode = (hashCode * 59) + this.OtherReferences.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
