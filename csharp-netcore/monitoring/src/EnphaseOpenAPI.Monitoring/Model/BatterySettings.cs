/*
 * The Enphase Monitoring API
 *
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Monitoring.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Monitoring.Model
{
    /// <summary>
    /// BatterySettings
    /// </summary>
    [DataContract(Name = "BatterySettings")]
    public partial class BatterySettings : IEquatable<BatterySettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatterySettings" /> class.
        /// </summary>
        /// <param name="systemId">systemId.</param>
        /// <param name="batteryMode">Current battery mode of the system. Available values are Savings Mode, Full Backup, and Self - Consumption..</param>
        /// <param name="reserveSoc">Reserve soc for the current mode..</param>
        /// <param name="energyIndependence">Energy independence after peak hours enabled/disabled. Enabled: Battery will discharge to save money during peak hours when electricity rates are high. Once that is done, energy independence is prioritized. This will increase the energy self-sufficiency until the reserve soc is hit. Battery will charge from solar in the morning to get ready for the next period. Disabled: Battery will discharge only during peak hours when electricity rates are high. During other times, battery will be idle or will charge from solar in the morning to get ready for the next period..</param>
        /// <param name="chargeFromGrid">Charge battery from grid enabled/disabled. Enabled: Battery may also charge from the grid when in full backup mode or when battery charge is below the reserve capacity in savings or self-consumption mode..</param>
        /// <param name="batteryShutdownLevel">Level at which battery shutdowns to conserve energy. Battery restarts by using the conserved energy when the utility grid restores power or solar panels start producing energy..</param>
        public BatterySettings(int systemId = default(int), string batteryMode = default(string), int reserveSoc = default(int), string energyIndependence = default(string), string chargeFromGrid = default(string), int batteryShutdownLevel = default(int))
        {
            this.SystemId = systemId;
            this.BatteryMode = batteryMode;
            this.ReserveSoc = reserveSoc;
            this.EnergyIndependence = energyIndependence;
            this.ChargeFromGrid = chargeFromGrid;
            this.BatteryShutdownLevel = batteryShutdownLevel;
        }

        /// <summary>
        /// Gets or Sets SystemId
        /// </summary>
        [DataMember(Name = "system_id", EmitDefaultValue = false)]
        public int SystemId { get; set; }

        /// <summary>
        /// Current battery mode of the system. Available values are Savings Mode, Full Backup, and Self - Consumption.
        /// </summary>
        /// <value>Current battery mode of the system. Available values are Savings Mode, Full Backup, and Self - Consumption.</value>
        [DataMember(Name = "battery_mode", EmitDefaultValue = false)]
        public string BatteryMode { get; set; }

        /// <summary>
        /// Reserve soc for the current mode.
        /// </summary>
        /// <value>Reserve soc for the current mode.</value>
        [DataMember(Name = "reserve_soc", EmitDefaultValue = false)]
        public int ReserveSoc { get; set; }

        /// <summary>
        /// Energy independence after peak hours enabled/disabled. Enabled: Battery will discharge to save money during peak hours when electricity rates are high. Once that is done, energy independence is prioritized. This will increase the energy self-sufficiency until the reserve soc is hit. Battery will charge from solar in the morning to get ready for the next period. Disabled: Battery will discharge only during peak hours when electricity rates are high. During other times, battery will be idle or will charge from solar in the morning to get ready for the next period.
        /// </summary>
        /// <value>Energy independence after peak hours enabled/disabled. Enabled: Battery will discharge to save money during peak hours when electricity rates are high. Once that is done, energy independence is prioritized. This will increase the energy self-sufficiency until the reserve soc is hit. Battery will charge from solar in the morning to get ready for the next period. Disabled: Battery will discharge only during peak hours when electricity rates are high. During other times, battery will be idle or will charge from solar in the morning to get ready for the next period.</value>
        [DataMember(Name = "energy_independence", EmitDefaultValue = false)]
        public string EnergyIndependence { get; set; }

        /// <summary>
        /// Charge battery from grid enabled/disabled. Enabled: Battery may also charge from the grid when in full backup mode or when battery charge is below the reserve capacity in savings or self-consumption mode.
        /// </summary>
        /// <value>Charge battery from grid enabled/disabled. Enabled: Battery may also charge from the grid when in full backup mode or when battery charge is below the reserve capacity in savings or self-consumption mode.</value>
        [DataMember(Name = "charge_from_grid", EmitDefaultValue = false)]
        public string ChargeFromGrid { get; set; }

        /// <summary>
        /// Level at which battery shutdowns to conserve energy. Battery restarts by using the conserved energy when the utility grid restores power or solar panels start producing energy.
        /// </summary>
        /// <value>Level at which battery shutdowns to conserve energy. Battery restarts by using the conserved energy when the utility grid restores power or solar panels start producing energy.</value>
        [DataMember(Name = "battery_shutdown_level", EmitDefaultValue = false)]
        public int BatteryShutdownLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatterySettings {\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  BatteryMode: ").Append(BatteryMode).Append("\n");
            sb.Append("  ReserveSoc: ").Append(ReserveSoc).Append("\n");
            sb.Append("  EnergyIndependence: ").Append(EnergyIndependence).Append("\n");
            sb.Append("  ChargeFromGrid: ").Append(ChargeFromGrid).Append("\n");
            sb.Append("  BatteryShutdownLevel: ").Append(BatteryShutdownLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatterySettings);
        }

        /// <summary>
        /// Returns true if BatterySettings instances are equal
        /// </summary>
        /// <param name="input">Instance of BatterySettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatterySettings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SystemId == input.SystemId ||
                    this.SystemId.Equals(input.SystemId)
                ) && 
                (
                    this.BatteryMode == input.BatteryMode ||
                    (this.BatteryMode != null &&
                    this.BatteryMode.Equals(input.BatteryMode))
                ) && 
                (
                    this.ReserveSoc == input.ReserveSoc ||
                    this.ReserveSoc.Equals(input.ReserveSoc)
                ) && 
                (
                    this.EnergyIndependence == input.EnergyIndependence ||
                    (this.EnergyIndependence != null &&
                    this.EnergyIndependence.Equals(input.EnergyIndependence))
                ) && 
                (
                    this.ChargeFromGrid == input.ChargeFromGrid ||
                    (this.ChargeFromGrid != null &&
                    this.ChargeFromGrid.Equals(input.ChargeFromGrid))
                ) && 
                (
                    this.BatteryShutdownLevel == input.BatteryShutdownLevel ||
                    this.BatteryShutdownLevel.Equals(input.BatteryShutdownLevel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SystemId.GetHashCode();
                if (this.BatteryMode != null)
                {
                    hashCode = (hashCode * 59) + this.BatteryMode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReserveSoc.GetHashCode();
                if (this.EnergyIndependence != null)
                {
                    hashCode = (hashCode * 59) + this.EnergyIndependence.GetHashCode();
                }
                if (this.ChargeFromGrid != null)
                {
                    hashCode = (hashCode * 59) + this.ChargeFromGrid.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BatteryShutdownLevel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
