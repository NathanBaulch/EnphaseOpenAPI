/*
 * The Enphase Monitoring API
 *
 * Monitoring API can be used to fetch system details on a site, system-level production and consumption data, and device-level production data.
 *
 * The version of the OpenAPI document: 4.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Monitoring.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Monitoring.Model
{
    /// <summary>
    /// UpdateSystemBatterySettingsRequest
    /// </summary>
    [DataContract(Name = "UpdateSystemBatterySettingsRequest")]
    public partial class UpdateSystemBatterySettingsRequest : IEquatable<UpdateSystemBatterySettingsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateSystemBatterySettingsRequest" /> class.
        /// </summary>
        /// <param name="batteryMode">To update battery mode of the system (case sensitive). Available values are Savings Mode, Self-consumption, Full Backup..</param>
        /// <param name="reserveSoc">Reserve soc for the current mode. Cannot be less than vls..</param>
        /// <param name="energyIndependence">Energy independence after peak hours \&quot;enabled\&quot;/\&quot;disabled\&quot;. Enabled: Battery will discharge to save money during peak hours when electricity rates are high. Once that is done, energy independence is prioritized. This will increase the energy self-sufficiency until the reserve soc is hit. Battery will charge from solar in the morning to get ready for the next period. Disabled: Battery will discharge only during peak hours when electricity rates are high. During other times, battery will be idle or will charge from solar in the morning to get ready for the next period..</param>
        public UpdateSystemBatterySettingsRequest(string batteryMode = default(string), int reserveSoc = default(int), string energyIndependence = default(string))
        {
            this.BatteryMode = batteryMode;
            this.ReserveSoc = reserveSoc;
            this.EnergyIndependence = energyIndependence;
        }

        /// <summary>
        /// To update battery mode of the system (case sensitive). Available values are Savings Mode, Self-consumption, Full Backup.
        /// </summary>
        /// <value>To update battery mode of the system (case sensitive). Available values are Savings Mode, Self-consumption, Full Backup.</value>
        [DataMember(Name = "battery_mode", EmitDefaultValue = false)]
        public string BatteryMode { get; set; }

        /// <summary>
        /// Reserve soc for the current mode. Cannot be less than vls.
        /// </summary>
        /// <value>Reserve soc for the current mode. Cannot be less than vls.</value>
        [DataMember(Name = "reserve_soc", EmitDefaultValue = false)]
        public int ReserveSoc { get; set; }

        /// <summary>
        /// Energy independence after peak hours \&quot;enabled\&quot;/\&quot;disabled\&quot;. Enabled: Battery will discharge to save money during peak hours when electricity rates are high. Once that is done, energy independence is prioritized. This will increase the energy self-sufficiency until the reserve soc is hit. Battery will charge from solar in the morning to get ready for the next period. Disabled: Battery will discharge only during peak hours when electricity rates are high. During other times, battery will be idle or will charge from solar in the morning to get ready for the next period.
        /// </summary>
        /// <value>Energy independence after peak hours \&quot;enabled\&quot;/\&quot;disabled\&quot;. Enabled: Battery will discharge to save money during peak hours when electricity rates are high. Once that is done, energy independence is prioritized. This will increase the energy self-sufficiency until the reserve soc is hit. Battery will charge from solar in the morning to get ready for the next period. Disabled: Battery will discharge only during peak hours when electricity rates are high. During other times, battery will be idle or will charge from solar in the morning to get ready for the next period.</value>
        [DataMember(Name = "energy_independence", EmitDefaultValue = false)]
        public string EnergyIndependence { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateSystemBatterySettingsRequest {\n");
            sb.Append("  BatteryMode: ").Append(BatteryMode).Append("\n");
            sb.Append("  ReserveSoc: ").Append(ReserveSoc).Append("\n");
            sb.Append("  EnergyIndependence: ").Append(EnergyIndependence).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateSystemBatterySettingsRequest);
        }

        /// <summary>
        /// Returns true if UpdateSystemBatterySettingsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateSystemBatterySettingsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateSystemBatterySettingsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BatteryMode == input.BatteryMode ||
                    (this.BatteryMode != null &&
                    this.BatteryMode.Equals(input.BatteryMode))
                ) && 
                (
                    this.ReserveSoc == input.ReserveSoc ||
                    this.ReserveSoc.Equals(input.ReserveSoc)
                ) && 
                (
                    this.EnergyIndependence == input.EnergyIndependence ||
                    (this.EnergyIndependence != null &&
                    this.EnergyIndependence.Equals(input.EnergyIndependence))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BatteryMode != null)
                {
                    hashCode = (hashCode * 59) + this.BatteryMode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReserveSoc.GetHashCode();
                if (this.EnergyIndependence != null)
                {
                    hashCode = (hashCode * 59) + this.EnergyIndependence.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
