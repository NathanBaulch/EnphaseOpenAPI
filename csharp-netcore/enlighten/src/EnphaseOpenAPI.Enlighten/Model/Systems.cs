/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Enlighten.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Enlighten.Model
{
    /// <summary>
    /// Systems
    /// </summary>
    [DataContract(Name = "Systems")]
    public partial class Systems : IEquatable<Systems>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Systems" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Systems() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Systems" /> class.
        /// </summary>
        /// <param name="systems">systems (required).</param>
        /// <param name="next">next (required).</param>
        public Systems(List<SystemsSystems> systems = default(List<SystemsSystems>), string next = default(string))
        {
            // to ensure "systems" is required (not null)
            this._Systems = systems ?? throw new ArgumentNullException("systems is a required property for Systems and cannot be null");
            // to ensure "next" is required (not null)
            this.Next = next ?? throw new ArgumentNullException("next is a required property for Systems and cannot be null");
        }

        /// <summary>
        /// Gets or Sets _Systems
        /// </summary>
        [DataMember(Name = "systems", IsRequired = true, EmitDefaultValue = false)]
        public List<SystemsSystems> _Systems { get; set; }

        /// <summary>
        /// Gets or Sets Next
        /// </summary>
        [DataMember(Name = "next", IsRequired = true, EmitDefaultValue = false)]
        public string Next { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Systems {\n");
            sb.Append("  _Systems: ").Append(_Systems).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Systems);
        }

        /// <summary>
        /// Returns true if Systems instances are equal
        /// </summary>
        /// <param name="input">Instance of Systems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Systems input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._Systems == input._Systems ||
                    this._Systems != null &&
                    input._Systems != null &&
                    this._Systems.SequenceEqual(input._Systems)
                ) && 
                (
                    this.Next == input.Next ||
                    (this.Next != null &&
                    this.Next.Equals(input.Next))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Systems != null)
                    hashCode = hashCode * 59 + this._Systems.GetHashCode();
                if (this.Next != null)
                    hashCode = hashCode * 59 + this.Next.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
