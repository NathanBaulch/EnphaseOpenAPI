/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Enlighten.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Enlighten.Model
{
    /// <summary>
    /// Returns the lifetime energy of the Microinverter. If the system has never produced energy, the energy value would be 0.
    /// </summary>
    [DataContract(Name = "InvertersSummaryByEnvoyOrSiteResponse_energy")]
    public partial class InvertersSummaryByEnvoyOrSiteResponseEnergy : IEquatable<InvertersSummaryByEnvoyOrSiteResponseEnergy>, IValidatableObject
    {
        /// <summary>
        /// Defines Units
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UnitsEnum
        {
            /// <summary>
            /// Enum Wh for value: Wh
            /// </summary>
            [EnumMember(Value = "Wh")]
            Wh = 1,

            /// <summary>
            /// Enum KJ for value: kJ
            /// </summary>
            [EnumMember(Value = "kJ")]
            KJ = 2

        }


        /// <summary>
        /// Gets or Sets Units
        /// </summary>
        [DataMember(Name = "units", IsRequired = true, EmitDefaultValue = false)]
        public UnitsEnum Units { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvertersSummaryByEnvoyOrSiteResponseEnergy" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InvertersSummaryByEnvoyOrSiteResponseEnergy() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvertersSummaryByEnvoyOrSiteResponseEnergy" /> class.
        /// </summary>
        /// <param name="value">value (required).</param>
        /// <param name="units">units (required).</param>
        /// <param name="precision">precision (required).</param>
        public InvertersSummaryByEnvoyOrSiteResponseEnergy(int value = default(int), UnitsEnum units = default(UnitsEnum), int precision = default(int))
        {
            this.Value = value;
            this.Units = units;
            this.Precision = precision;
        }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = false)]
        public int Value { get; set; }

        /// <summary>
        /// Gets or Sets Precision
        /// </summary>
        [DataMember(Name = "precision", IsRequired = true, EmitDefaultValue = false)]
        public int Precision { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvertersSummaryByEnvoyOrSiteResponseEnergy {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  Precision: ").Append(Precision).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvertersSummaryByEnvoyOrSiteResponseEnergy);
        }

        /// <summary>
        /// Returns true if InvertersSummaryByEnvoyOrSiteResponseEnergy instances are equal
        /// </summary>
        /// <param name="input">Instance of InvertersSummaryByEnvoyOrSiteResponseEnergy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvertersSummaryByEnvoyOrSiteResponseEnergy input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.Units == input.Units ||
                    this.Units.Equals(input.Units)
                ) && 
                (
                    this.Precision == input.Precision ||
                    this.Precision.Equals(input.Precision)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Value.GetHashCode();
                hashCode = (hashCode * 59) + this.Units.GetHashCode();
                hashCode = (hashCode * 59) + this.Precision.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
