/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Enlighten.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Enlighten.Model
{
    /// <summary>
    /// MonthlyProductionResponse
    /// </summary>
    [DataContract(Name = "MonthlyProductionResponse")]
    public partial class MonthlyProductionResponse : IEquatable<MonthlyProductionResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MonthlyProductionResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MonthlyProductionResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MonthlyProductionResponse" /> class.
        /// </summary>
        /// <param name="systemId">Enlighten ID for this system. (required).</param>
        /// <param name="startDate">First day included in the reporting period. The format is &#x60;YYYY-mm-dd&#x60; unless you pass a &#x60;datetime_format&#x60; parameter as described [here](https://developer.enphase.com/docs#Datetimes). (required).</param>
        /// <param name="endDate">Last day included in the reporting period. (required).</param>
        /// <param name="productionWh">Total production for the requested period in Watt-hours. (required).</param>
        /// <param name="meterReadings">If the system has any revenue-grade meters installed, the meter readings at the beginning and end of the reporting period are included here. Otherwise, the array is empty. (required).</param>
        /// <param name="meta">meta (required).</param>
        public MonthlyProductionResponse(int systemId = default(int), DateTimeOffset startDate = default(DateTimeOffset), DateTimeOffset endDate = default(DateTimeOffset), int productionWh = default(int), List<MonthlyProductionResponseMeterReadings> meterReadings = default(List<MonthlyProductionResponseMeterReadings>), Meta meta = default(Meta))
        {
            this.SystemId = systemId;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.ProductionWh = productionWh;
            // to ensure "meterReadings" is required (not null)
            if (meterReadings == null) {
                throw new ArgumentNullException("meterReadings is a required property for MonthlyProductionResponse and cannot be null");
            }
            this.MeterReadings = meterReadings;
            // to ensure "meta" is required (not null)
            if (meta == null) {
                throw new ArgumentNullException("meta is a required property for MonthlyProductionResponse and cannot be null");
            }
            this.Meta = meta;
        }

        /// <summary>
        /// Enlighten ID for this system.
        /// </summary>
        /// <value>Enlighten ID for this system.</value>
        [DataMember(Name = "system_id", IsRequired = true, EmitDefaultValue = false)]
        public int SystemId { get; set; }

        /// <summary>
        /// First day included in the reporting period. The format is &#x60;YYYY-mm-dd&#x60; unless you pass a &#x60;datetime_format&#x60; parameter as described [here](https://developer.enphase.com/docs#Datetimes).
        /// </summary>
        /// <value>First day included in the reporting period. The format is &#x60;YYYY-mm-dd&#x60; unless you pass a &#x60;datetime_format&#x60; parameter as described [here](https://developer.enphase.com/docs#Datetimes).</value>
        [DataMember(Name = "start_date", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTimeOffset StartDate { get; set; }

        /// <summary>
        /// Last day included in the reporting period.
        /// </summary>
        /// <value>Last day included in the reporting period.</value>
        [DataMember(Name = "end_date", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTimeOffset EndDate { get; set; }

        /// <summary>
        /// Total production for the requested period in Watt-hours.
        /// </summary>
        /// <value>Total production for the requested period in Watt-hours.</value>
        [DataMember(Name = "production_wh", IsRequired = true, EmitDefaultValue = false)]
        public int ProductionWh { get; set; }

        /// <summary>
        /// If the system has any revenue-grade meters installed, the meter readings at the beginning and end of the reporting period are included here. Otherwise, the array is empty.
        /// </summary>
        /// <value>If the system has any revenue-grade meters installed, the meter readings at the beginning and end of the reporting period are included here. Otherwise, the array is empty.</value>
        [DataMember(Name = "meter_readings", IsRequired = true, EmitDefaultValue = false)]
        public List<MonthlyProductionResponseMeterReadings> MeterReadings { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [DataMember(Name = "meta", IsRequired = true, EmitDefaultValue = false)]
        public Meta Meta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MonthlyProductionResponse {\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  ProductionWh: ").Append(ProductionWh).Append("\n");
            sb.Append("  MeterReadings: ").Append(MeterReadings).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MonthlyProductionResponse);
        }

        /// <summary>
        /// Returns true if MonthlyProductionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of MonthlyProductionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MonthlyProductionResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SystemId == input.SystemId ||
                    this.SystemId.Equals(input.SystemId)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.ProductionWh == input.ProductionWh ||
                    this.ProductionWh.Equals(input.ProductionWh)
                ) && 
                (
                    this.MeterReadings == input.MeterReadings ||
                    this.MeterReadings != null &&
                    input.MeterReadings != null &&
                    this.MeterReadings.SequenceEqual(input.MeterReadings)
                ) && 
                (
                    this.Meta == input.Meta ||
                    (this.Meta != null &&
                    this.Meta.Equals(input.Meta))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SystemId.GetHashCode();
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProductionWh.GetHashCode();
                if (this.MeterReadings != null)
                {
                    hashCode = (hashCode * 59) + this.MeterReadings.GetHashCode();
                }
                if (this.Meta != null)
                {
                    hashCode = (hashCode * 59) + this.Meta.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
