/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Enlighten.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Enlighten.Model
{
    /// <summary>
    /// ProductionMeterReadingsResponseMeterReadingsInner
    /// </summary>
    [DataContract(Name = "ProductionMeterReadingsResponse_meter_readings_inner")]
    public partial class ProductionMeterReadingsResponseMeterReadingsInner : IEquatable<ProductionMeterReadingsResponseMeterReadingsInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductionMeterReadingsResponseMeterReadingsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductionMeterReadingsResponseMeterReadingsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductionMeterReadingsResponseMeterReadingsInner" /> class.
        /// </summary>
        /// <param name="serialNumber">The serial number of the meter. (required).</param>
        /// <param name="value">The odometer reading, in Watt-hours. (required).</param>
        /// <param name="readAt">The time when the reading was taken, always prior or equal to the requested &#x60;end_at&#x60;. (required).</param>
        public ProductionMeterReadingsResponseMeterReadingsInner(string serialNumber = default(string), int value = default(int), long readAt = default(long))
        {
            // to ensure "serialNumber" is required (not null)
            if (serialNumber == null)
            {
                throw new ArgumentNullException("serialNumber is a required property for ProductionMeterReadingsResponseMeterReadingsInner and cannot be null");
            }
            this.SerialNumber = serialNumber;
            this.Value = value;
            this.ReadAt = readAt;
        }

        /// <summary>
        /// The serial number of the meter.
        /// </summary>
        /// <value>The serial number of the meter.</value>
        [DataMember(Name = "serial_number", IsRequired = true, EmitDefaultValue = true)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// The odometer reading, in Watt-hours.
        /// </summary>
        /// <value>The odometer reading, in Watt-hours.</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public int Value { get; set; }

        /// <summary>
        /// The time when the reading was taken, always prior or equal to the requested &#x60;end_at&#x60;.
        /// </summary>
        /// <value>The time when the reading was taken, always prior or equal to the requested &#x60;end_at&#x60;.</value>
        [DataMember(Name = "read_at", IsRequired = true, EmitDefaultValue = true)]
        public long ReadAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductionMeterReadingsResponseMeterReadingsInner {\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ReadAt: ").Append(ReadAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductionMeterReadingsResponseMeterReadingsInner);
        }

        /// <summary>
        /// Returns true if ProductionMeterReadingsResponseMeterReadingsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductionMeterReadingsResponseMeterReadingsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductionMeterReadingsResponseMeterReadingsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.ReadAt == input.ReadAt ||
                    this.ReadAt.Equals(input.ReadAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SerialNumber != null)
                {
                    hashCode = (hashCode * 59) + this.SerialNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Value.GetHashCode();
                hashCode = (hashCode * 59) + this.ReadAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
