/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Enlighten.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Enlighten.Model
{
    /// <summary>
    /// InventoryResponseMeters
    /// </summary>
    [DataContract(Name = "InventoryResponse_meters")]
    public partial class InventoryResponseMeters : IEquatable<InventoryResponseMeters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryResponseMeters" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InventoryResponseMeters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryResponseMeters" /> class.
        /// </summary>
        /// <param name="sn">sn (required).</param>
        /// <param name="manufacturer">manufacturer (required).</param>
        /// <param name="model">model (required).</param>
        public InventoryResponseMeters(string sn = default(string), string manufacturer = default(string), string model = default(string))
        {
            // to ensure "sn" is required (not null)
            if (sn == null) {
                throw new ArgumentNullException("sn is a required property for InventoryResponseMeters and cannot be null");
            }
            this.Sn = sn;
            // to ensure "manufacturer" is required (not null)
            if (manufacturer == null) {
                throw new ArgumentNullException("manufacturer is a required property for InventoryResponseMeters and cannot be null");
            }
            this.Manufacturer = manufacturer;
            // to ensure "model" is required (not null)
            if (model == null) {
                throw new ArgumentNullException("model is a required property for InventoryResponseMeters and cannot be null");
            }
            this.Model = model;
        }

        /// <summary>
        /// Gets or Sets Sn
        /// </summary>
        [DataMember(Name = "sn", IsRequired = true, EmitDefaultValue = false)]
        public string Sn { get; set; }

        /// <summary>
        /// Gets or Sets Manufacturer
        /// </summary>
        [DataMember(Name = "manufacturer", IsRequired = true, EmitDefaultValue = false)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name = "model", IsRequired = true, EmitDefaultValue = false)]
        public string Model { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InventoryResponseMeters {\n");
            sb.Append("  Sn: ").Append(Sn).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InventoryResponseMeters);
        }

        /// <summary>
        /// Returns true if InventoryResponseMeters instances are equal
        /// </summary>
        /// <param name="input">Instance of InventoryResponseMeters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InventoryResponseMeters input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Sn == input.Sn ||
                    (this.Sn != null &&
                    this.Sn.Equals(input.Sn))
                ) && 
                (
                    this.Manufacturer == input.Manufacturer ||
                    (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Sn != null)
                {
                    hashCode = (hashCode * 59) + this.Sn.GetHashCode();
                }
                if (this.Manufacturer != null)
                {
                    hashCode = (hashCode * 59) + this.Manufacturer.GetHashCode();
                }
                if (this.Model != null)
                {
                    hashCode = (hashCode * 59) + this.Model.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
