/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Enlighten.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Enlighten.Model
{
    /// <summary>
    /// InlineResponse409
    /// </summary>
    [DataContract(Name = "inline_response_409")]
    public partial class InlineResponse409 : IEquatable<InlineResponse409>, IValidatableObject
    {
        /// <summary>
        /// Defines Period
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PeriodEnum
        {
            /// <summary>
            /// Enum Hour for value: hour
            /// </summary>
            [EnumMember(Value = "hour")]
            Hour = 1,

            /// <summary>
            /// Enum Minute for value: minute
            /// </summary>
            [EnumMember(Value = "minute")]
            Minute = 2,

            /// <summary>
            /// Enum Second for value: second
            /// </summary>
            [EnumMember(Value = "second")]
            Second = 3

        }


        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name = "period", IsRequired = true, EmitDefaultValue = false)]
        public PeriodEnum Period { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse409" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineResponse409() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse409" /> class.
        /// </summary>
        /// <param name="reason">reason (required).</param>
        /// <param name="message">message (required).</param>
        /// <param name="period">period (required).</param>
        /// <param name="periodStart">periodStart (required).</param>
        /// <param name="periodEnd">periodEnd (required).</param>
        /// <param name="limit">limit (required).</param>
        public InlineResponse409(string reason = default(string), List<string> message = default(List<string>), PeriodEnum period = default(PeriodEnum), int periodStart = default(int), int periodEnd = default(int), int limit = default(int))
        {
            // to ensure "reason" is required (not null)
            this.Reason = reason ?? throw new ArgumentNullException("reason is a required property for InlineResponse409 and cannot be null");
            // to ensure "message" is required (not null)
            this.Message = message ?? throw new ArgumentNullException("message is a required property for InlineResponse409 and cannot be null");
            this.Period = period;
            this.PeriodStart = periodStart;
            this.PeriodEnd = periodEnd;
            this.Limit = limit;
        }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name = "reason", IsRequired = true, EmitDefaultValue = false)]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Message { get; set; }

        /// <summary>
        /// Gets or Sets PeriodStart
        /// </summary>
        [DataMember(Name = "period_start", IsRequired = true, EmitDefaultValue = false)]
        public int PeriodStart { get; set; }

        /// <summary>
        /// Gets or Sets PeriodEnd
        /// </summary>
        [DataMember(Name = "period_end", IsRequired = true, EmitDefaultValue = false)]
        public int PeriodEnd { get; set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [DataMember(Name = "limit", IsRequired = true, EmitDefaultValue = false)]
        public int Limit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse409 {\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  PeriodStart: ").Append(PeriodStart).Append("\n");
            sb.Append("  PeriodEnd: ").Append(PeriodEnd).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse409);
        }

        /// <summary>
        /// Returns true if InlineResponse409 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse409 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse409 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.Message == input.Message ||
                    this.Message != null &&
                    input.Message != null &&
                    this.Message.SequenceEqual(input.Message)
                ) && 
                (
                    this.Period == input.Period ||
                    this.Period.Equals(input.Period)
                ) && 
                (
                    this.PeriodStart == input.PeriodStart ||
                    this.PeriodStart.Equals(input.PeriodStart)
                ) && 
                (
                    this.PeriodEnd == input.PeriodEnd ||
                    this.PeriodEnd.Equals(input.PeriodEnd)
                ) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                hashCode = hashCode * 59 + this.Period.GetHashCode();
                hashCode = hashCode * 59 + this.PeriodStart.GetHashCode();
                hashCode = hashCode * 59 + this.PeriodEnd.GetHashCode();
                hashCode = hashCode * 59 + this.Limit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
