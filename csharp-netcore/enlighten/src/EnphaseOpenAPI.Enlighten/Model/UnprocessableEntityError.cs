/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Enlighten.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Enlighten.Model
{
    /// <summary>
    /// UnprocessableEntityError
    /// </summary>
    [DataContract(Name = "UnprocessableEntityError")]
    public partial class UnprocessableEntityError : IEquatable<UnprocessableEntityError>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnprocessableEntityError" /> class.
        /// </summary>
        /// <param name="reason">reason.</param>
        /// <param name="message">message.</param>
        /// <param name="errorMessages">errorMessages.</param>
        /// <param name="start">start.</param>
        /// <param name="end">end.</param>
        /// <param name="startAt">startAt.</param>
        /// <param name="endAt">endAt.</param>
        /// <param name="firstInterval">firstInterval.</param>
        /// <param name="lastInterval">lastInterval.</param>
        public UnprocessableEntityError(string reason = default(string), string message = default(string), List<string> errorMessages = default(List<string>), DateTimeOffset start = default(DateTimeOffset), DateTimeOffset end = default(DateTimeOffset), int startAt = default(int), int endAt = default(int), int firstInterval = default(int), int lastInterval = default(int))
        {
            this.Reason = reason;
            this.Message = message;
            this.ErrorMessages = errorMessages;
            this.Start = start;
            this.End = end;
            this.StartAt = startAt;
            this.EndAt = endAt;
            this.FirstInterval = firstInterval;
            this.LastInterval = lastInterval;
        }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMessages
        /// </summary>
        [DataMember(Name = "errorMessages", EmitDefaultValue = false)]
        public List<string> ErrorMessages { get; set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name = "start", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTimeOffset Start { get; set; }

        /// <summary>
        /// Gets or Sets End
        /// </summary>
        [DataMember(Name = "end", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTimeOffset End { get; set; }

        /// <summary>
        /// Gets or Sets StartAt
        /// </summary>
        [DataMember(Name = "start_at", EmitDefaultValue = false)]
        public int StartAt { get; set; }

        /// <summary>
        /// Gets or Sets EndAt
        /// </summary>
        [DataMember(Name = "end_at", EmitDefaultValue = false)]
        public int EndAt { get; set; }

        /// <summary>
        /// Gets or Sets FirstInterval
        /// </summary>
        [DataMember(Name = "first_interval", EmitDefaultValue = false)]
        public int FirstInterval { get; set; }

        /// <summary>
        /// Gets or Sets LastInterval
        /// </summary>
        [DataMember(Name = "last_interval", EmitDefaultValue = false)]
        public int LastInterval { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UnprocessableEntityError {\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  ErrorMessages: ").Append(ErrorMessages).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  StartAt: ").Append(StartAt).Append("\n");
            sb.Append("  EndAt: ").Append(EndAt).Append("\n");
            sb.Append("  FirstInterval: ").Append(FirstInterval).Append("\n");
            sb.Append("  LastInterval: ").Append(LastInterval).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UnprocessableEntityError);
        }

        /// <summary>
        /// Returns true if UnprocessableEntityError instances are equal
        /// </summary>
        /// <param name="input">Instance of UnprocessableEntityError to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnprocessableEntityError input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.ErrorMessages == input.ErrorMessages ||
                    this.ErrorMessages != null &&
                    input.ErrorMessages != null &&
                    this.ErrorMessages.SequenceEqual(input.ErrorMessages)
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                ) && 
                (
                    this.StartAt == input.StartAt ||
                    this.StartAt.Equals(input.StartAt)
                ) && 
                (
                    this.EndAt == input.EndAt ||
                    this.EndAt.Equals(input.EndAt)
                ) && 
                (
                    this.FirstInterval == input.FirstInterval ||
                    this.FirstInterval.Equals(input.FirstInterval)
                ) && 
                (
                    this.LastInterval == input.LastInterval ||
                    this.LastInterval.Equals(input.LastInterval)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Reason != null)
                {
                    hashCode = (hashCode * 59) + this.Reason.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.ErrorMessages != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorMessages.GetHashCode();
                }
                if (this.Start != null)
                {
                    hashCode = (hashCode * 59) + this.Start.GetHashCode();
                }
                if (this.End != null)
                {
                    hashCode = (hashCode * 59) + this.End.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StartAt.GetHashCode();
                hashCode = (hashCode * 59) + this.EndAt.GetHashCode();
                hashCode = (hashCode * 59) + this.FirstInterval.GetHashCode();
                hashCode = (hashCode * 59) + this.LastInterval.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
