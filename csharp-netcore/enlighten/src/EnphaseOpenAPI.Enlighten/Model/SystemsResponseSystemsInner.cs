/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Enlighten.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Enlighten.Model
{
    /// <summary>
    /// SystemsResponseSystemsInner
    /// </summary>
    [DataContract(Name = "SystemsResponse_systems_inner")]
    public partial class SystemsResponseSystemsInner : IEquatable<SystemsResponseSystemsInner>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ConnectionType
        /// </summary>
        [DataMember(Name = "connection_type", IsRequired = true, EmitDefaultValue = true)]
        public ConnectionType ConnectionType { get; set; }
        /// <summary>
        /// The current status of the system. You can find this and more in the &#x60;meta&#x60; property.
        /// </summary>
        /// <value>The current status of the system. You can find this and more in the &#x60;meta&#x60; property.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Comm for value: comm
            /// </summary>
            [EnumMember(Value = "comm")]
            Comm = 1,

            /// <summary>
            /// Enum Power for value: power
            /// </summary>
            [EnumMember(Value = "power")]
            Power = 2,

            /// <summary>
            /// Enum Meter for value: meter
            /// </summary>
            [EnumMember(Value = "meter")]
            Meter = 3,

            /// <summary>
            /// Enum MeterIssue for value: meter_issue
            /// </summary>
            [EnumMember(Value = "meter_issue")]
            MeterIssue = 4,

            /// <summary>
            /// Enum Micro for value: micro
            /// </summary>
            [EnumMember(Value = "micro")]
            Micro = 5,

            /// <summary>
            /// Enum Battery for value: battery
            /// </summary>
            [EnumMember(Value = "battery")]
            Battery = 6,

            /// <summary>
            /// Enum StorageIdle for value: storage_idle
            /// </summary>
            [EnumMember(Value = "storage_idle")]
            StorageIdle = 7,

            /// <summary>
            /// Enum Normal for value: normal
            /// </summary>
            [EnumMember(Value = "normal")]
            Normal = 8

        }


        /// <summary>
        /// The current status of the system. You can find this and more in the &#x60;meta&#x60; property.
        /// </summary>
        /// <value>The current status of the system. You can find this and more in the &#x60;meta&#x60; property.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemsResponseSystemsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SystemsResponseSystemsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemsResponseSystemsInner" /> class.
        /// </summary>
        /// <param name="systemId">The Enlighten ID of the system. (required).</param>
        /// <param name="systemName">The name of the system. Even if the system owner has indicated their site is anonymous for public lists, the actual system name is returned here for identification purposes. (required).</param>
        /// <param name="systemPublicName">The display name of the system. Use this when displaying the system name on a public list or view. (required).</param>
        /// <param name="reference">If the calling user belongs to a company and that company has provided its own identifiers for a system, that ID is included here. Otherwise, this attribute is not returned..</param>
        /// <param name="otherReferences">If any other companies have provided their own identifiers for a system, those identifiers are included here. Otherwise, this attribute is not returned..</param>
        /// <param name="country">The two-letter code for the country where the system is located. See [ISO_3166-1_alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) for reference. (required).</param>
        /// <param name="state">The two-letter code for the state where the system is located. See [ISO_3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) for reference. (required).</param>
        /// <param name="city">The name of the city where the system is located. (required).</param>
        /// <param name="postalCode">The postal code where the system is located. (required).</param>
        /// <param name="timezone">The timezone of the system. (required).</param>
        /// <param name="connectionType">connectionType (required).</param>
        /// <param name="status">The current status of the system. You can find this and more in the &#x60;meta&#x60; property. (required).</param>
        /// <param name="meta">meta (required).</param>
        public SystemsResponseSystemsInner(int systemId = default(int), string systemName = default(string), string systemPublicName = default(string), string reference = default(string), List<string> otherReferences = default(List<string>), string country = default(string), string state = default(string), string city = default(string), string postalCode = default(string), string timezone = default(string), ConnectionType connectionType = default(ConnectionType), StatusEnum status = default(StatusEnum), Meta meta = default(Meta))
        {
            this.SystemId = systemId;
            // to ensure "systemName" is required (not null)
            if (systemName == null)
            {
                throw new ArgumentNullException("systemName is a required property for SystemsResponseSystemsInner and cannot be null");
            }
            this.SystemName = systemName;
            // to ensure "systemPublicName" is required (not null)
            if (systemPublicName == null)
            {
                throw new ArgumentNullException("systemPublicName is a required property for SystemsResponseSystemsInner and cannot be null");
            }
            this.SystemPublicName = systemPublicName;
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new ArgumentNullException("country is a required property for SystemsResponseSystemsInner and cannot be null");
            }
            this.Country = country;
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new ArgumentNullException("state is a required property for SystemsResponseSystemsInner and cannot be null");
            }
            this.State = state;
            // to ensure "city" is required (not null)
            if (city == null)
            {
                throw new ArgumentNullException("city is a required property for SystemsResponseSystemsInner and cannot be null");
            }
            this.City = city;
            // to ensure "postalCode" is required (not null)
            if (postalCode == null)
            {
                throw new ArgumentNullException("postalCode is a required property for SystemsResponseSystemsInner and cannot be null");
            }
            this.PostalCode = postalCode;
            // to ensure "timezone" is required (not null)
            if (timezone == null)
            {
                throw new ArgumentNullException("timezone is a required property for SystemsResponseSystemsInner and cannot be null");
            }
            this.Timezone = timezone;
            this.ConnectionType = connectionType;
            this.Status = status;
            // to ensure "meta" is required (not null)
            if (meta == null)
            {
                throw new ArgumentNullException("meta is a required property for SystemsResponseSystemsInner and cannot be null");
            }
            this.Meta = meta;
            this.Reference = reference;
            this.OtherReferences = otherReferences;
        }

        /// <summary>
        /// The Enlighten ID of the system.
        /// </summary>
        /// <value>The Enlighten ID of the system.</value>
        [DataMember(Name = "system_id", IsRequired = true, EmitDefaultValue = true)]
        public int SystemId { get; set; }

        /// <summary>
        /// The name of the system. Even if the system owner has indicated their site is anonymous for public lists, the actual system name is returned here for identification purposes.
        /// </summary>
        /// <value>The name of the system. Even if the system owner has indicated their site is anonymous for public lists, the actual system name is returned here for identification purposes.</value>
        [DataMember(Name = "system_name", IsRequired = true, EmitDefaultValue = true)]
        public string SystemName { get; set; }

        /// <summary>
        /// The display name of the system. Use this when displaying the system name on a public list or view.
        /// </summary>
        /// <value>The display name of the system. Use this when displaying the system name on a public list or view.</value>
        [DataMember(Name = "system_public_name", IsRequired = true, EmitDefaultValue = true)]
        public string SystemPublicName { get; set; }

        /// <summary>
        /// If the calling user belongs to a company and that company has provided its own identifiers for a system, that ID is included here. Otherwise, this attribute is not returned.
        /// </summary>
        /// <value>If the calling user belongs to a company and that company has provided its own identifiers for a system, that ID is included here. Otherwise, this attribute is not returned.</value>
        [DataMember(Name = "reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// If any other companies have provided their own identifiers for a system, those identifiers are included here. Otherwise, this attribute is not returned.
        /// </summary>
        /// <value>If any other companies have provided their own identifiers for a system, those identifiers are included here. Otherwise, this attribute is not returned.</value>
        [DataMember(Name = "other_references", EmitDefaultValue = false)]
        public List<string> OtherReferences { get; set; }

        /// <summary>
        /// The two-letter code for the country where the system is located. See [ISO_3166-1_alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) for reference.
        /// </summary>
        /// <value>The two-letter code for the country where the system is located. See [ISO_3166-1_alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) for reference.</value>
        [DataMember(Name = "country", IsRequired = true, EmitDefaultValue = true)]
        public string Country { get; set; }

        /// <summary>
        /// The two-letter code for the state where the system is located. See [ISO_3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) for reference.
        /// </summary>
        /// <value>The two-letter code for the state where the system is located. See [ISO_3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) for reference.</value>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public string State { get; set; }

        /// <summary>
        /// The name of the city where the system is located.
        /// </summary>
        /// <value>The name of the city where the system is located.</value>
        [DataMember(Name = "city", IsRequired = true, EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// The postal code where the system is located.
        /// </summary>
        /// <value>The postal code where the system is located.</value>
        [DataMember(Name = "postal_code", IsRequired = true, EmitDefaultValue = true)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The timezone of the system.
        /// </summary>
        /// <value>The timezone of the system.</value>
        [DataMember(Name = "timezone", IsRequired = true, EmitDefaultValue = true)]
        public string Timezone { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [DataMember(Name = "meta", IsRequired = true, EmitDefaultValue = true)]
        public Meta Meta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemsResponseSystemsInner {\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("  SystemName: ").Append(SystemName).Append("\n");
            sb.Append("  SystemPublicName: ").Append(SystemPublicName).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  OtherReferences: ").Append(OtherReferences).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  ConnectionType: ").Append(ConnectionType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemsResponseSystemsInner);
        }

        /// <summary>
        /// Returns true if SystemsResponseSystemsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemsResponseSystemsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemsResponseSystemsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SystemId == input.SystemId ||
                    this.SystemId.Equals(input.SystemId)
                ) && 
                (
                    this.SystemName == input.SystemName ||
                    (this.SystemName != null &&
                    this.SystemName.Equals(input.SystemName))
                ) && 
                (
                    this.SystemPublicName == input.SystemPublicName ||
                    (this.SystemPublicName != null &&
                    this.SystemPublicName.Equals(input.SystemPublicName))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.OtherReferences == input.OtherReferences ||
                    this.OtherReferences != null &&
                    input.OtherReferences != null &&
                    this.OtherReferences.SequenceEqual(input.OtherReferences)
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.ConnectionType == input.ConnectionType ||
                    this.ConnectionType.Equals(input.ConnectionType)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Meta == input.Meta ||
                    (this.Meta != null &&
                    this.Meta.Equals(input.Meta))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SystemId.GetHashCode();
                if (this.SystemName != null)
                {
                    hashCode = (hashCode * 59) + this.SystemName.GetHashCode();
                }
                if (this.SystemPublicName != null)
                {
                    hashCode = (hashCode * 59) + this.SystemPublicName.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                if (this.OtherReferences != null)
                {
                    hashCode = (hashCode * 59) + this.OtherReferences.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.PostalCode != null)
                {
                    hashCode = (hashCode * 59) + this.PostalCode.GetHashCode();
                }
                if (this.Timezone != null)
                {
                    hashCode = (hashCode * 59) + this.Timezone.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConnectionType.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Meta != null)
                {
                    hashCode = (hashCode * 59) + this.Meta.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Country (string) maxLength
            if (this.Country != null && this.Country.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Country, length must be less than 2.", new [] { "Country" });
            }

            // Country (string) minLength
            if (this.Country != null && this.Country.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Country, length must be greater than 2.", new [] { "Country" });
            }

            // State (string) minLength
            if (this.State != null && this.State.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for State, length must be greater than 2.", new [] { "State" });
            }

            yield break;
        }
    }

}
