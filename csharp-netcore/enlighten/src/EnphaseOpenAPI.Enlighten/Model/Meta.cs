/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Enlighten.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Enlighten.Model
{
    /// <summary>
    /// Information about the system that you can use to ascertain the timeliness of the production data included in the response.
    /// </summary>
    [DataContract(Name = "Meta")]
    public partial class Meta : IEquatable<Meta>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public Status Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Meta" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Meta() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Meta" /> class.
        /// </summary>
        /// <param name="status">status (required).</param>
        /// <param name="lastReportAt">lastReportAt (required).</param>
        /// <param name="lastEnergyAt">lastEnergyAt (required).</param>
        /// <param name="operationalAt">operationalAt (required).</param>
        public Meta(Status status = default(Status), long lastReportAt = default(long), long lastEnergyAt = default(long), long operationalAt = default(long))
        {
            this.Status = status;
            this.LastReportAt = lastReportAt;
            this.LastEnergyAt = lastEnergyAt;
            this.OperationalAt = operationalAt;
        }

        /// <summary>
        /// Gets or Sets LastReportAt
        /// </summary>
        [DataMember(Name = "last_report_at", IsRequired = true, EmitDefaultValue = true)]
        public long LastReportAt { get; set; }

        /// <summary>
        /// Gets or Sets LastEnergyAt
        /// </summary>
        [DataMember(Name = "last_energy_at", IsRequired = true, EmitDefaultValue = true)]
        public long LastEnergyAt { get; set; }

        /// <summary>
        /// Gets or Sets OperationalAt
        /// </summary>
        [DataMember(Name = "operational_at", IsRequired = true, EmitDefaultValue = true)]
        public long OperationalAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Meta {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  LastReportAt: ").Append(LastReportAt).Append("\n");
            sb.Append("  LastEnergyAt: ").Append(LastEnergyAt).Append("\n");
            sb.Append("  OperationalAt: ").Append(OperationalAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Meta);
        }

        /// <summary>
        /// Returns true if Meta instances are equal
        /// </summary>
        /// <param name="input">Instance of Meta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Meta input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.LastReportAt == input.LastReportAt ||
                    this.LastReportAt.Equals(input.LastReportAt)
                ) && 
                (
                    this.LastEnergyAt == input.LastEnergyAt ||
                    this.LastEnergyAt.Equals(input.LastEnergyAt)
                ) && 
                (
                    this.OperationalAt == input.OperationalAt ||
                    this.OperationalAt.Equals(input.OperationalAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                hashCode = (hashCode * 59) + this.LastReportAt.GetHashCode();
                hashCode = (hashCode * 59) + this.LastEnergyAt.GetHashCode();
                hashCode = (hashCode * 59) + this.OperationalAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
