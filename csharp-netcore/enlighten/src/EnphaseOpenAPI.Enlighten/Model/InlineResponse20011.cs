/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnphaseOpenAPI.Enlighten.Client.OpenAPIDateConverter;

namespace EnphaseOpenAPI.Enlighten.Model
{
    /// <summary>
    /// InlineResponse20011
    /// </summary>
    [DataContract(Name = "inline_response_200_11")]
    public partial class InlineResponse20011 : IEquatable<InlineResponse20011>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether the production of this system is measured by its microinverters (&#x60;microinverters&#x60;) or by revenue-grade meters (&#x60;meter&#x60;) installed on the system.
        /// </summary>
        /// <value>Indicates whether the production of this system is measured by its microinverters (&#x60;microinverters&#x60;) or by revenue-grade meters (&#x60;meter&#x60;) installed on the system.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceEnum
        {
            /// <summary>
            /// Enum Microinverters for value: microinverters
            /// </summary>
            [EnumMember(Value = "microinverters")]
            Microinverters = 1,

            /// <summary>
            /// Enum Meter for value: meter
            /// </summary>
            [EnumMember(Value = "meter")]
            Meter = 2

        }


        /// <summary>
        /// Indicates whether the production of this system is measured by its microinverters (&#x60;microinverters&#x60;) or by revenue-grade meters (&#x60;meter&#x60;) installed on the system.
        /// </summary>
        /// <value>Indicates whether the production of this system is measured by its microinverters (&#x60;microinverters&#x60;) or by revenue-grade meters (&#x60;meter&#x60;) installed on the system.</value>
        [DataMember(Name = "source", IsRequired = true, EmitDefaultValue = false)]
        public SourceEnum Source { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public Status Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20011" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineResponse20011() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20011" /> class.
        /// </summary>
        /// <param name="currentPower">Current power production, in Watts. For historical requests, returns 0. (required).</param>
        /// <param name="energyLifetime">Energy produced in the lifetime of the system, excluding the requested day, in Watt-hours. (required).</param>
        /// <param name="energyToday">Energy produced on the requested day, in Watt-hours. (required).</param>
        /// <param name="lastIntervalEndAt">The last known time that the system produced energy. When a system has not been communicating for a length of time, the &#x60;last_report_at&#x60; can be recent, whereas the &#x60;last_interval_end_at&#x60; may be further back. (required).</param>
        /// <param name="lastReportAt">The last time an Envoy on this system reported. The format is Unix epoch time unless you pass a &#x60;datetime_format&#x60; parameter as described [here](https://developer.enphase.com/docs#Datetimes). (required).</param>
        /// <param name="modules">Number of active (not retired) modules. For historical requests, returns 0. (required).</param>
        /// <param name="operationalAt">The time at which this system became operational. Corresponds to the system&#39;s interconnect time, if one is specified. Otherwise, it is the system&#39;s first interval end time. The format is Unix epoch time unless you pass a &#x60;datetime_format&#x60; parameter as described [here](https://developer.enphase.com/docs#Datetimes). (required).</param>
        /// <param name="sizeW">The size of the system, in Watts. For historical requests, returns 0. (required).</param>
        /// <param name="source">Indicates whether the production of this system is measured by its microinverters (&#x60;microinverters&#x60;) or by revenue-grade meters (&#x60;meter&#x60;) installed on the system. (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="summaryDate">Effective date of the response. For historical requests, returns the date requested. For current requests, returns the current date. The format is &#x60;YYYY-mm-dd&#x60; unless you pass a &#x60;datetime_format&#x60; parameter as described [here](https://developer.enphase.com/docs#Datetimes). (required).</param>
        /// <param name="systemId">The Enlighten ID of the system. (required).</param>
        public InlineResponse20011(int currentPower = default(int), int energyLifetime = default(int), int energyToday = default(int), int lastIntervalEndAt = default(int), int lastReportAt = default(int), int modules = default(int), int operationalAt = default(int), int sizeW = default(int), SourceEnum source = default(SourceEnum), Status status = default(Status), DateTime summaryDate = default(DateTime), int systemId = default(int))
        {
            this.CurrentPower = currentPower;
            this.EnergyLifetime = energyLifetime;
            this.EnergyToday = energyToday;
            this.LastIntervalEndAt = lastIntervalEndAt;
            this.LastReportAt = lastReportAt;
            this.Modules = modules;
            this.OperationalAt = operationalAt;
            this.SizeW = sizeW;
            this.Source = source;
            this.Status = status;
            this.SummaryDate = summaryDate;
            this.SystemId = systemId;
        }

        /// <summary>
        /// Current power production, in Watts. For historical requests, returns 0.
        /// </summary>
        /// <value>Current power production, in Watts. For historical requests, returns 0.</value>
        [DataMember(Name = "current_power", IsRequired = true, EmitDefaultValue = false)]
        public int CurrentPower { get; set; }

        /// <summary>
        /// Energy produced in the lifetime of the system, excluding the requested day, in Watt-hours.
        /// </summary>
        /// <value>Energy produced in the lifetime of the system, excluding the requested day, in Watt-hours.</value>
        [DataMember(Name = "energy_lifetime", IsRequired = true, EmitDefaultValue = false)]
        public int EnergyLifetime { get; set; }

        /// <summary>
        /// Energy produced on the requested day, in Watt-hours.
        /// </summary>
        /// <value>Energy produced on the requested day, in Watt-hours.</value>
        [DataMember(Name = "energy_today", IsRequired = true, EmitDefaultValue = false)]
        public int EnergyToday { get; set; }

        /// <summary>
        /// The last known time that the system produced energy. When a system has not been communicating for a length of time, the &#x60;last_report_at&#x60; can be recent, whereas the &#x60;last_interval_end_at&#x60; may be further back.
        /// </summary>
        /// <value>The last known time that the system produced energy. When a system has not been communicating for a length of time, the &#x60;last_report_at&#x60; can be recent, whereas the &#x60;last_interval_end_at&#x60; may be further back.</value>
        [DataMember(Name = "last_interval_end_at", IsRequired = true, EmitDefaultValue = false)]
        public int LastIntervalEndAt { get; set; }

        /// <summary>
        /// The last time an Envoy on this system reported. The format is Unix epoch time unless you pass a &#x60;datetime_format&#x60; parameter as described [here](https://developer.enphase.com/docs#Datetimes).
        /// </summary>
        /// <value>The last time an Envoy on this system reported. The format is Unix epoch time unless you pass a &#x60;datetime_format&#x60; parameter as described [here](https://developer.enphase.com/docs#Datetimes).</value>
        [DataMember(Name = "last_report_at", IsRequired = true, EmitDefaultValue = false)]
        public int LastReportAt { get; set; }

        /// <summary>
        /// Number of active (not retired) modules. For historical requests, returns 0.
        /// </summary>
        /// <value>Number of active (not retired) modules. For historical requests, returns 0.</value>
        [DataMember(Name = "modules", IsRequired = true, EmitDefaultValue = false)]
        public int Modules { get; set; }

        /// <summary>
        /// The time at which this system became operational. Corresponds to the system&#39;s interconnect time, if one is specified. Otherwise, it is the system&#39;s first interval end time. The format is Unix epoch time unless you pass a &#x60;datetime_format&#x60; parameter as described [here](https://developer.enphase.com/docs#Datetimes).
        /// </summary>
        /// <value>The time at which this system became operational. Corresponds to the system&#39;s interconnect time, if one is specified. Otherwise, it is the system&#39;s first interval end time. The format is Unix epoch time unless you pass a &#x60;datetime_format&#x60; parameter as described [here](https://developer.enphase.com/docs#Datetimes).</value>
        [DataMember(Name = "operational_at", IsRequired = true, EmitDefaultValue = false)]
        public int OperationalAt { get; set; }

        /// <summary>
        /// The size of the system, in Watts. For historical requests, returns 0.
        /// </summary>
        /// <value>The size of the system, in Watts. For historical requests, returns 0.</value>
        [DataMember(Name = "size_w", IsRequired = true, EmitDefaultValue = false)]
        public int SizeW { get; set; }

        /// <summary>
        /// Effective date of the response. For historical requests, returns the date requested. For current requests, returns the current date. The format is &#x60;YYYY-mm-dd&#x60; unless you pass a &#x60;datetime_format&#x60; parameter as described [here](https://developer.enphase.com/docs#Datetimes).
        /// </summary>
        /// <value>Effective date of the response. For historical requests, returns the date requested. For current requests, returns the current date. The format is &#x60;YYYY-mm-dd&#x60; unless you pass a &#x60;datetime_format&#x60; parameter as described [here](https://developer.enphase.com/docs#Datetimes).</value>
        [DataMember(Name = "summary_date", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime SummaryDate { get; set; }

        /// <summary>
        /// The Enlighten ID of the system.
        /// </summary>
        /// <value>The Enlighten ID of the system.</value>
        [DataMember(Name = "system_id", IsRequired = true, EmitDefaultValue = false)]
        public int SystemId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20011 {\n");
            sb.Append("  CurrentPower: ").Append(CurrentPower).Append("\n");
            sb.Append("  EnergyLifetime: ").Append(EnergyLifetime).Append("\n");
            sb.Append("  EnergyToday: ").Append(EnergyToday).Append("\n");
            sb.Append("  LastIntervalEndAt: ").Append(LastIntervalEndAt).Append("\n");
            sb.Append("  LastReportAt: ").Append(LastReportAt).Append("\n");
            sb.Append("  Modules: ").Append(Modules).Append("\n");
            sb.Append("  OperationalAt: ").Append(OperationalAt).Append("\n");
            sb.Append("  SizeW: ").Append(SizeW).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SummaryDate: ").Append(SummaryDate).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20011);
        }

        /// <summary>
        /// Returns true if InlineResponse20011 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20011 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20011 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrentPower == input.CurrentPower ||
                    this.CurrentPower.Equals(input.CurrentPower)
                ) && 
                (
                    this.EnergyLifetime == input.EnergyLifetime ||
                    this.EnergyLifetime.Equals(input.EnergyLifetime)
                ) && 
                (
                    this.EnergyToday == input.EnergyToday ||
                    this.EnergyToday.Equals(input.EnergyToday)
                ) && 
                (
                    this.LastIntervalEndAt == input.LastIntervalEndAt ||
                    this.LastIntervalEndAt.Equals(input.LastIntervalEndAt)
                ) && 
                (
                    this.LastReportAt == input.LastReportAt ||
                    this.LastReportAt.Equals(input.LastReportAt)
                ) && 
                (
                    this.Modules == input.Modules ||
                    this.Modules.Equals(input.Modules)
                ) && 
                (
                    this.OperationalAt == input.OperationalAt ||
                    this.OperationalAt.Equals(input.OperationalAt)
                ) && 
                (
                    this.SizeW == input.SizeW ||
                    this.SizeW.Equals(input.SizeW)
                ) && 
                (
                    this.Source == input.Source ||
                    this.Source.Equals(input.Source)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.SummaryDate == input.SummaryDate ||
                    (this.SummaryDate != null &&
                    this.SummaryDate.Equals(input.SummaryDate))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    this.SystemId.Equals(input.SystemId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.CurrentPower.GetHashCode();
                hashCode = hashCode * 59 + this.EnergyLifetime.GetHashCode();
                hashCode = hashCode * 59 + this.EnergyToday.GetHashCode();
                hashCode = hashCode * 59 + this.LastIntervalEndAt.GetHashCode();
                hashCode = hashCode * 59 + this.LastReportAt.GetHashCode();
                hashCode = hashCode * 59 + this.Modules.GetHashCode();
                hashCode = hashCode * 59 + this.OperationalAt.GetHashCode();
                hashCode = hashCode * 59 + this.SizeW.GetHashCode();
                hashCode = hashCode * 59 + this.Source.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.SummaryDate != null)
                    hashCode = hashCode * 59 + this.SummaryDate.GetHashCode();
                hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
