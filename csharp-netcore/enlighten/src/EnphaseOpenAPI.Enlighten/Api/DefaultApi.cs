/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EnphaseOpenAPI.Enlighten.Client;
using EnphaseOpenAPI.Enlighten.Model;

namespace EnphaseOpenAPI.Enlighten.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a time series of energy consumption as measured by the consumption meter installed on the specified system. All measurements are in Watt-hours. If the system does not have a meter, returns &#x60;204&#x60; - No Content. If you don&#39;t have permission to view consumption data, the response code is &#x60;401&#x60;.  The time series includes one entry for each day from the &#x60;start_date&#x60; to the &#x60;end_date&#x60;. There are no gaps in the time series. If the response includes trailing zeroes, such as [909, 4970, 0, 0, 0], then no data has been reported for the last days in the series. You can check the system&#39;s status in the &#x60;meta&#x60; attribute of the response to determine when the system last reported and whether it has communication or metering problems.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startDate">The date on which to start the time series. Defaults to the system&#39;s operational date. (optional)</param>
        /// <param name="endDate">The last date to include in the time series. Defaults to yesterday or the last day the system reported, whichever is earlier. (optional)</param>
        /// <returns>ConsumptionLifetimeResponse</returns>
        ConsumptionLifetimeResponse ConsumptionLifetime(string userId, int systemId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a time series of energy consumption as measured by the consumption meter installed on the specified system. All measurements are in Watt-hours. If the system does not have a meter, returns &#x60;204&#x60; - No Content. If you don&#39;t have permission to view consumption data, the response code is &#x60;401&#x60;.  The time series includes one entry for each day from the &#x60;start_date&#x60; to the &#x60;end_date&#x60;. There are no gaps in the time series. If the response includes trailing zeroes, such as [909, 4970, 0, 0, 0], then no data has been reported for the last days in the series. You can check the system&#39;s status in the &#x60;meta&#x60; attribute of the response to determine when the system last reported and whether it has communication or metering problems.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startDate">The date on which to start the time series. Defaults to the system&#39;s operational date. (optional)</param>
        /// <param name="endDate">The last date to include in the time series. Defaults to yesterday or the last day the system reported, whichever is earlier. (optional)</param>
        /// <returns>ApiResponse of ConsumptionLifetimeResponse</returns>
        ApiResponse<ConsumptionLifetimeResponse> ConsumptionLifetimeWithHttpInfo(string userId, int systemId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns consumption as measured by the consumption meter installed on the specified system. If the total duration requested is more than one month, returns one month of intervals. Intervals are 15 minutes in length and start at the top of the hour.  Requests for times that do not fall on the 15-minute marks are rounded down. For example, a request for 08:01, 08:08, 08:11, or 08:14 is treated as a request for 08:00. Intervals are listed by their end dates; therefore, the first interval returned is 15 minutes after the requested start date.  If the system doesn&#39;t have any consumption meters installed, the response includes an empty intervals array.  If you don&#39;t have permission to view consumption data, the response code is &#x60;401&#x60;.  Under some conditions, data for a given period may be temporarily unavailable.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startAt">Start of period to report on in Unix epoch time. If no start is specified, the assumed start is midnight today, in the timezone of the system. If the start is earlier than one year ago, the response includes an empty intervals list. If the start is earlier than the system&#39;s &#x60;operational_date&#x60;, the response data begins with the first interval of the &#x60;operational_date&#x60;. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, defaults to the time of the request. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <returns>ConsumptionStatsResponse</returns>
        ConsumptionStatsResponse ConsumptionStats(string userId, int systemId, long? startAt = default(long?), long? endAt = default(long?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns consumption as measured by the consumption meter installed on the specified system. If the total duration requested is more than one month, returns one month of intervals. Intervals are 15 minutes in length and start at the top of the hour.  Requests for times that do not fall on the 15-minute marks are rounded down. For example, a request for 08:01, 08:08, 08:11, or 08:14 is treated as a request for 08:00. Intervals are listed by their end dates; therefore, the first interval returned is 15 minutes after the requested start date.  If the system doesn&#39;t have any consumption meters installed, the response includes an empty intervals array.  If you don&#39;t have permission to view consumption data, the response code is &#x60;401&#x60;.  Under some conditions, data for a given period may be temporarily unavailable.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startAt">Start of period to report on in Unix epoch time. If no start is specified, the assumed start is midnight today, in the timezone of the system. If the start is earlier than one year ago, the response includes an empty intervals list. If the start is earlier than the system&#39;s &#x60;operational_date&#x60;, the response data begins with the first interval of the &#x60;operational_date&#x60;. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, defaults to the time of the request. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <returns>ApiResponse of ConsumptionStatsResponse</returns>
        ApiResponse<ConsumptionStatsResponse> ConsumptionStatsWithHttpInfo(string userId, int systemId, long? startAt = default(long?), long? endAt = default(long?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a time series of energy produced on the system over its lifetime. All measurements are in Watt-hours.  The time series includes one entry for each day from the &#x60;start_date&#x60; to the &#x60;end_date&#x60;. There are no gaps in the time series. If the response includes trailing zeroes, such as &#x60;[909, 4970, 0, 0, 0]&#x60;, then no energy has been reported for the last days in the series. You can check the system&#39;s status in the &#x60;meta&#x60; attribute of the response to determine when the system last reported and whether it has communication or production problems.  If the system has a meter, the time series includes data as measured by the microinverters until the first full day after the meter has been installed, when it switches to using the data as measured by the meter. This is called the \&quot;merged time series\&quot;. In addition, the response includes the attribute &#x60;meter_start_date&#x60;, to indicate where in the time series the meter measurements begin to be used. You can retrieve the complete time series from the meter and from the microinverters by adding the parameter &#x60;production&#x3D;all&#x60; to the request.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startDate">The date on which to start the time series. Defaults to the system&#39;s operational date. (optional)</param>
        /// <param name="endDate">The last date to include in the time series. Defaults to yesterday or the last day the system reported, whichever is earlier. (optional)</param>
        /// <param name="production">When &#x60;all&#x60;, returns the merged time series plus the time series as reported by the microinverters and the meter on the system. Other values are ignored. (optional)</param>
        /// <returns>EnergyLifetimeResponse</returns>
        EnergyLifetimeResponse EnergyLifetime(string userId, int systemId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string production = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a time series of energy produced on the system over its lifetime. All measurements are in Watt-hours.  The time series includes one entry for each day from the &#x60;start_date&#x60; to the &#x60;end_date&#x60;. There are no gaps in the time series. If the response includes trailing zeroes, such as &#x60;[909, 4970, 0, 0, 0]&#x60;, then no energy has been reported for the last days in the series. You can check the system&#39;s status in the &#x60;meta&#x60; attribute of the response to determine when the system last reported and whether it has communication or production problems.  If the system has a meter, the time series includes data as measured by the microinverters until the first full day after the meter has been installed, when it switches to using the data as measured by the meter. This is called the \&quot;merged time series\&quot;. In addition, the response includes the attribute &#x60;meter_start_date&#x60;, to indicate where in the time series the meter measurements begin to be used. You can retrieve the complete time series from the meter and from the microinverters by adding the parameter &#x60;production&#x3D;all&#x60; to the request.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startDate">The date on which to start the time series. Defaults to the system&#39;s operational date. (optional)</param>
        /// <param name="endDate">The last date to include in the time series. Defaults to yesterday or the last day the system reported, whichever is earlier. (optional)</param>
        /// <param name="production">When &#x60;all&#x60;, returns the merged time series plus the time series as reported by the microinverters and the meter on the system. Other values are ignored. (optional)</param>
        /// <returns>ApiResponse of EnergyLifetimeResponse</returns>
        ApiResponse<EnergyLifetimeResponse> EnergyLifetimeWithHttpInfo(string userId, int systemId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string production = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a listing of all active Envoys currently deployed on the system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <returns>EnvoysResponse</returns>
        EnvoysResponse Envoys(string userId, int systemId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a listing of all active Envoys currently deployed on the system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <returns>ApiResponse of EnvoysResponse</returns>
        ApiResponse<EnvoysResponse> EnvoysWithHttpInfo(string userId, int systemId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a listing of active devices on the given system. A device is considered active if it has not been retired in Enlighten. \&quot;Active\&quot; does not imply that the device is currently reporting, producing, or measuring energy.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <returns>InventoryResponse</returns>
        InventoryResponse Inventory(string userId, int systemId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a listing of active devices on the given system. A device is considered active if it has not been retired in Enlighten. \&quot;Active\&quot; does not imply that the device is currently reporting, producing, or measuring energy.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <returns>ApiResponse of InventoryResponse</returns>
        ApiResponse<InventoryResponse> InventoryWithHttpInfo(string userId, int systemId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the summary along with the energy produced on the system over its lifetime.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="siteId">The identifier of the system.</param>
        /// <returns>List&lt;InvertersSummaryByEnvoyOrSiteResponse&gt;</returns>
        List<InvertersSummaryByEnvoyOrSiteResponse> InvertersSummaryByEnvoyOrSite(string userId, int siteId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the summary along with the energy produced on the system over its lifetime.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="siteId">The identifier of the system.</param>
        /// <returns>ApiResponse of List&lt;InvertersSummaryByEnvoyOrSiteResponse&gt;</returns>
        ApiResponse<List<InvertersSummaryByEnvoyOrSiteResponse>> InvertersSummaryByEnvoyOrSiteWithHttpInfo(string userId, int siteId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated and will be removed in a future release. Use &#x60;production_meter_readings&#x60; or &#x60;energy_lifetime&#x60; instead.  Returns the energy production of the system for the month starting on the given date. The start date must be at least one month ago. If a meter or meters are installed on the system, measurements come from the meter; otherwise, measurements come from the microinverters.  This endpoint can return a response of Data Temporarily Unavailable.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startDate">Start date for reporting period. The reporting period ends on the previous day of the next month; for example, a &#x60;start_date&#x60; of 2011-07-20 returns data through 2011-06-19. When the start date is the first of a calendar month, the end end date is the last day of that month.</param>
        /// <returns>MonthlyProductionResponse</returns>
        MonthlyProductionResponse MonthlyProduction(string userId, int systemId, DateTime startDate);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated and will be removed in a future release. Use &#x60;production_meter_readings&#x60; or &#x60;energy_lifetime&#x60; instead.  Returns the energy production of the system for the month starting on the given date. The start date must be at least one month ago. If a meter or meters are installed on the system, measurements come from the meter; otherwise, measurements come from the microinverters.  This endpoint can return a response of Data Temporarily Unavailable.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startDate">Start date for reporting period. The reporting period ends on the previous day of the next month; for example, a &#x60;start_date&#x60; of 2011-07-20 returns data through 2011-06-19. When the start date is the first of a calendar month, the end end date is the last day of that month.</param>
        /// <returns>ApiResponse of MonthlyProductionResponse</returns>
        ApiResponse<MonthlyProductionResponse> MonthlyProductionWithHttpInfo(string userId, int systemId, DateTime startDate);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the last known \&quot;odometer\&quot; reading of each revenue-grade production meter on the system as of the requested time.  This endpoint includes entries for every production meter on the requested system, regardless of whether the meter is currently in service or retired. &#x60;read_at&#x60; is the time at which the reading was taken, and is always less than or equal to the requested &#x60;end_at&#x60;. Commonly, the reading will be within 30 minutes of the requested &#x60;end_at&#x60;; however, larger deltas can occur and do not necessarily mean there is a problem with the meter or the system it is on. Systems that are configured to report infrequently can show large deltas on all meters, especially when &#x60;end_at&#x60; is close to the current time. Meters that have been retired from a system will show an &#x60;end_at&#x60; that doesn&#39;t change, and that eventually is far away from the current time.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="endAt"> (optional)</param>
        /// <returns>ProductionMeterReadingsResponse</returns>
        ProductionMeterReadingsResponse ProductionMeterReadings(string userId, int systemId, long? endAt = default(long?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the last known \&quot;odometer\&quot; reading of each revenue-grade production meter on the system as of the requested time.  This endpoint includes entries for every production meter on the requested system, regardless of whether the meter is currently in service or retired. &#x60;read_at&#x60; is the time at which the reading was taken, and is always less than or equal to the requested &#x60;end_at&#x60;. Commonly, the reading will be within 30 minutes of the requested &#x60;end_at&#x60;; however, larger deltas can occur and do not necessarily mean there is a problem with the meter or the system it is on. Systems that are configured to report infrequently can show large deltas on all meters, especially when &#x60;end_at&#x60; is close to the current time. Meters that have been retired from a system will show an &#x60;end_at&#x60; that doesn&#39;t change, and that eventually is far away from the current time.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="endAt"> (optional)</param>
        /// <returns>ApiResponse of ProductionMeterReadingsResponse</returns>
        ApiResponse<ProductionMeterReadingsResponse> ProductionMeterReadingsWithHttpInfo(string userId, int systemId, long? endAt = default(long?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns performance statistics as measured by the revenue-grade meters installed on the specified system. If the total duration requested is more than one month, returns one month of intervals. Intervals are 15 minutes in length and start at the top of the hour.  Requests for times that do not fall on the 15-minute marks are rounded down. For example, a request for 08:01, 08:08, 08:11, or 08:14 is treated as a request for 08:00. Intervals are listed by their end dates; therefore, the first interval returned is 15 minutes after the requested start date.  If the system doesn&#39;t have any revenue-grade meters installed, the response includes an empty intervals array.  Under some conditions, data for a given period may be temporarily unavailable.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startAt">Start of period to report on in Unix epoch time. If no start is specified, the assumed start is midnight today, in the timezone of the system. If the start is earlier than one year ago, the response includes an empty intervals list. If the start is earlier than the system&#39;s &#x60;operational_date&#x60;, the response data begins with the first interval of the &#x60;operational_date&#x60;. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, defaults to the time of the request. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <returns>RgmStatsResponse</returns>
        RgmStatsResponse RgmStats(string userId, int systemId, long? startAt = default(long?), long? endAt = default(long?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns performance statistics as measured by the revenue-grade meters installed on the specified system. If the total duration requested is more than one month, returns one month of intervals. Intervals are 15 minutes in length and start at the top of the hour.  Requests for times that do not fall on the 15-minute marks are rounded down. For example, a request for 08:01, 08:08, 08:11, or 08:14 is treated as a request for 08:00. Intervals are listed by their end dates; therefore, the first interval returned is 15 minutes after the requested start date.  If the system doesn&#39;t have any revenue-grade meters installed, the response includes an empty intervals array.  Under some conditions, data for a given period may be temporarily unavailable.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startAt">Start of period to report on in Unix epoch time. If no start is specified, the assumed start is midnight today, in the timezone of the system. If the start is earlier than one year ago, the response includes an empty intervals list. If the start is earlier than the system&#39;s &#x60;operational_date&#x60;, the response data begins with the first interval of the &#x60;operational_date&#x60;. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, defaults to the time of the request. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <returns>ApiResponse of RgmStatsResponse</returns>
        ApiResponse<RgmStatsResponse> RgmStatsWithHttpInfo(string userId, int systemId, long? startAt = default(long?), long? endAt = default(long?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get system ID by envoy serial number.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="serialNum">Serial number of the envoy.</param>
        /// <returns>SearchSystemIdResponse</returns>
        SearchSystemIdResponse SearchSystemId(string userId, string serialNum);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get system ID by envoy serial number.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="serialNum">Serial number of the envoy.</param>
        /// <returns>ApiResponse of SearchSystemIdResponse</returns>
        ApiResponse<SearchSystemIdResponse> SearchSystemIdWithHttpInfo(string userId, string serialNum);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns performance statistics for the specified system as reported by microinverters installed on the system. If the total duration requested is more than one day, returns one day of intervals. Intervals are 5 minutes in length and start at the top of the hour.  Requests for times that do not fall on the 5-minute marks are rounded down. For example, a request for 08:01, 08:02, 08:03, or 08:04 is treated as a request for 08:00. Intervals are listed by their end dates; therefore, the first interval returned is 5 minutes after the requested start date.  The response includes intervals that have been reported for the requested period. Gaps in reporting are not filled with 0-value intervals. The dark hours on a system are an example of such a gap, because the microinverters do not produce at night.  Sometimes a request cannot be processed because the requested dates are invalid for the the system in question. Examples include asking for stats starting at a time that is later than the system&#39;s last reported interval, or asking for stats before a system has started production. In cases such as these, the response code is &#x60;422&#x60; and the response body includes an error reason as well as the parameters used to process the request.  If the system doesn&#39;t have any microinverters installed, the response includes an empty intervals array. Under some conditions, data for a given period may be temporarily unavailable.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startAt">Start of reporting period in Unix epoch time. If no start is specified, defaults to midnight today, in the timezone of the system. If the start date is earlier than one year ago today, the response includes an empty intervals list. If the start is earlier than the system&#39;s &#x60;operational_date&#x60;, the response data begins with the &#x60;operational_date&#x60;. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, the assumed end is now. If the end is later than the last reporting interval the response data ends with the last reported interval. (optional)</param>
        /// <returns>StatsResponse</returns>
        StatsResponse Stats(string userId, int systemId, long? startAt = default(long?), long? endAt = default(long?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns performance statistics for the specified system as reported by microinverters installed on the system. If the total duration requested is more than one day, returns one day of intervals. Intervals are 5 minutes in length and start at the top of the hour.  Requests for times that do not fall on the 5-minute marks are rounded down. For example, a request for 08:01, 08:02, 08:03, or 08:04 is treated as a request for 08:00. Intervals are listed by their end dates; therefore, the first interval returned is 5 minutes after the requested start date.  The response includes intervals that have been reported for the requested period. Gaps in reporting are not filled with 0-value intervals. The dark hours on a system are an example of such a gap, because the microinverters do not produce at night.  Sometimes a request cannot be processed because the requested dates are invalid for the the system in question. Examples include asking for stats starting at a time that is later than the system&#39;s last reported interval, or asking for stats before a system has started production. In cases such as these, the response code is &#x60;422&#x60; and the response body includes an error reason as well as the parameters used to process the request.  If the system doesn&#39;t have any microinverters installed, the response includes an empty intervals array. Under some conditions, data for a given period may be temporarily unavailable.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startAt">Start of reporting period in Unix epoch time. If no start is specified, defaults to midnight today, in the timezone of the system. If the start date is earlier than one year ago today, the response includes an empty intervals list. If the start is earlier than the system&#39;s &#x60;operational_date&#x60;, the response data begins with the &#x60;operational_date&#x60;. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, the assumed end is now. If the end is later than the last reporting interval the response data ends with the last reported interval. (optional)</param>
        /// <returns>ApiResponse of StatsResponse</returns>
        ApiResponse<StatsResponse> StatsWithHttpInfo(string userId, int systemId, long? startAt = default(long?), long? endAt = default(long?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns summary information for the specified system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="summaryDate">Start of reporting period. If no &#x60;summary_date&#x60; is provided, the start is the current day at midnight site-local time. Otherwise, the start is midnight site-local time of the requested day. If the requested date cannot be parsed or is in the future, the response includes an informative error message and &#x60;422&#x60; status. (optional)</param>
        /// <returns>SummaryResponse</returns>
        SummaryResponse Summary(string userId, int systemId, DateTime? summaryDate = default(DateTime?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns summary information for the specified system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="summaryDate">Start of reporting period. If no &#x60;summary_date&#x60; is provided, the start is the current day at midnight site-local time. Otherwise, the start is midnight site-local time of the requested day. If the requested date cannot be parsed or is in the future, the response includes an informative error message and &#x60;422&#x60; status. (optional)</param>
        /// <returns>ApiResponse of SummaryResponse</returns>
        ApiResponse<SummaryResponse> SummaryWithHttpInfo(string userId, int systemId, DateTime? summaryDate = default(DateTime?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of systems for which the user can make API requests. There is a limit to the number of systems that can be returned at one time. If the first request does not return a full list, use the &#x60;next&#x60; attribute in the response body to request the next page of systems. By default, systems are returned in batches of 100. The maximum page size is 1000.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="next"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="systemId"> (optional)</param>
        /// <param name="systemId2"> (optional)</param>
        /// <param name="systemName"> (optional)</param>
        /// <param name="systemName2"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="status2"> (optional)</param>
        /// <param name="reference"> (optional)</param>
        /// <param name="reference2"> (optional)</param>
        /// <param name="installer"> (optional)</param>
        /// <param name="installer2"> (optional)</param>
        /// <param name="connectionType"> (optional)</param>
        /// <param name="connectionType2"> (optional)</param>
        /// <returns>SystemsResponse</returns>
        SystemsResponse Systems(string userId, string next = default(string), int? limit = default(int?), int? systemId = default(int?), List<int> systemId2 = default(List<int>), string systemName = default(string), List<string> systemName2 = default(List<string>), Status? status = default(Status?), List<Status> status2 = default(List<Status>), string reference = default(string), List<string> reference2 = default(List<string>), string installer = default(string), List<string> installer2 = default(List<string>), ConnectionType? connectionType = default(ConnectionType?), List<ConnectionType> connectionType2 = default(List<ConnectionType>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of systems for which the user can make API requests. There is a limit to the number of systems that can be returned at one time. If the first request does not return a full list, use the &#x60;next&#x60; attribute in the response body to request the next page of systems. By default, systems are returned in batches of 100. The maximum page size is 1000.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="next"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="systemId"> (optional)</param>
        /// <param name="systemId2"> (optional)</param>
        /// <param name="systemName"> (optional)</param>
        /// <param name="systemName2"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="status2"> (optional)</param>
        /// <param name="reference"> (optional)</param>
        /// <param name="reference2"> (optional)</param>
        /// <param name="installer"> (optional)</param>
        /// <param name="installer2"> (optional)</param>
        /// <param name="connectionType"> (optional)</param>
        /// <param name="connectionType2"> (optional)</param>
        /// <returns>ApiResponse of SystemsResponse</returns>
        ApiResponse<SystemsResponse> SystemsWithHttpInfo(string userId, string next = default(string), int? limit = default(int?), int? systemId = default(int?), List<int> systemId2 = default(List<int>), string systemName = default(string), List<string> systemName2 = default(List<string>), Status? status = default(Status?), List<Status> status2 = default(List<Status>), string reference = default(string), List<string> reference2 = default(List<string>), string installer = default(string), List<string> installer2 = default(List<string>), ConnectionType? connectionType = default(ConnectionType?), List<ConnectionType> connectionType2 = default(List<ConnectionType>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a time series of energy consumption as measured by the consumption meter installed on the specified system. All measurements are in Watt-hours. If the system does not have a meter, returns &#x60;204&#x60; - No Content. If you don&#39;t have permission to view consumption data, the response code is &#x60;401&#x60;.  The time series includes one entry for each day from the &#x60;start_date&#x60; to the &#x60;end_date&#x60;. There are no gaps in the time series. If the response includes trailing zeroes, such as [909, 4970, 0, 0, 0], then no data has been reported for the last days in the series. You can check the system&#39;s status in the &#x60;meta&#x60; attribute of the response to determine when the system last reported and whether it has communication or metering problems.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startDate">The date on which to start the time series. Defaults to the system&#39;s operational date. (optional)</param>
        /// <param name="endDate">The last date to include in the time series. Defaults to yesterday or the last day the system reported, whichever is earlier. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsumptionLifetimeResponse</returns>
        System.Threading.Tasks.Task<ConsumptionLifetimeResponse> ConsumptionLifetimeAsync(string userId, int systemId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a time series of energy consumption as measured by the consumption meter installed on the specified system. All measurements are in Watt-hours. If the system does not have a meter, returns &#x60;204&#x60; - No Content. If you don&#39;t have permission to view consumption data, the response code is &#x60;401&#x60;.  The time series includes one entry for each day from the &#x60;start_date&#x60; to the &#x60;end_date&#x60;. There are no gaps in the time series. If the response includes trailing zeroes, such as [909, 4970, 0, 0, 0], then no data has been reported for the last days in the series. You can check the system&#39;s status in the &#x60;meta&#x60; attribute of the response to determine when the system last reported and whether it has communication or metering problems.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startDate">The date on which to start the time series. Defaults to the system&#39;s operational date. (optional)</param>
        /// <param name="endDate">The last date to include in the time series. Defaults to yesterday or the last day the system reported, whichever is earlier. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsumptionLifetimeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConsumptionLifetimeResponse>> ConsumptionLifetimeWithHttpInfoAsync(string userId, int systemId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns consumption as measured by the consumption meter installed on the specified system. If the total duration requested is more than one month, returns one month of intervals. Intervals are 15 minutes in length and start at the top of the hour.  Requests for times that do not fall on the 15-minute marks are rounded down. For example, a request for 08:01, 08:08, 08:11, or 08:14 is treated as a request for 08:00. Intervals are listed by their end dates; therefore, the first interval returned is 15 minutes after the requested start date.  If the system doesn&#39;t have any consumption meters installed, the response includes an empty intervals array.  If you don&#39;t have permission to view consumption data, the response code is &#x60;401&#x60;.  Under some conditions, data for a given period may be temporarily unavailable.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startAt">Start of period to report on in Unix epoch time. If no start is specified, the assumed start is midnight today, in the timezone of the system. If the start is earlier than one year ago, the response includes an empty intervals list. If the start is earlier than the system&#39;s &#x60;operational_date&#x60;, the response data begins with the first interval of the &#x60;operational_date&#x60;. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, defaults to the time of the request. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsumptionStatsResponse</returns>
        System.Threading.Tasks.Task<ConsumptionStatsResponse> ConsumptionStatsAsync(string userId, int systemId, long? startAt = default(long?), long? endAt = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns consumption as measured by the consumption meter installed on the specified system. If the total duration requested is more than one month, returns one month of intervals. Intervals are 15 minutes in length and start at the top of the hour.  Requests for times that do not fall on the 15-minute marks are rounded down. For example, a request for 08:01, 08:08, 08:11, or 08:14 is treated as a request for 08:00. Intervals are listed by their end dates; therefore, the first interval returned is 15 minutes after the requested start date.  If the system doesn&#39;t have any consumption meters installed, the response includes an empty intervals array.  If you don&#39;t have permission to view consumption data, the response code is &#x60;401&#x60;.  Under some conditions, data for a given period may be temporarily unavailable.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startAt">Start of period to report on in Unix epoch time. If no start is specified, the assumed start is midnight today, in the timezone of the system. If the start is earlier than one year ago, the response includes an empty intervals list. If the start is earlier than the system&#39;s &#x60;operational_date&#x60;, the response data begins with the first interval of the &#x60;operational_date&#x60;. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, defaults to the time of the request. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsumptionStatsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConsumptionStatsResponse>> ConsumptionStatsWithHttpInfoAsync(string userId, int systemId, long? startAt = default(long?), long? endAt = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a time series of energy produced on the system over its lifetime. All measurements are in Watt-hours.  The time series includes one entry for each day from the &#x60;start_date&#x60; to the &#x60;end_date&#x60;. There are no gaps in the time series. If the response includes trailing zeroes, such as &#x60;[909, 4970, 0, 0, 0]&#x60;, then no energy has been reported for the last days in the series. You can check the system&#39;s status in the &#x60;meta&#x60; attribute of the response to determine when the system last reported and whether it has communication or production problems.  If the system has a meter, the time series includes data as measured by the microinverters until the first full day after the meter has been installed, when it switches to using the data as measured by the meter. This is called the \&quot;merged time series\&quot;. In addition, the response includes the attribute &#x60;meter_start_date&#x60;, to indicate where in the time series the meter measurements begin to be used. You can retrieve the complete time series from the meter and from the microinverters by adding the parameter &#x60;production&#x3D;all&#x60; to the request.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startDate">The date on which to start the time series. Defaults to the system&#39;s operational date. (optional)</param>
        /// <param name="endDate">The last date to include in the time series. Defaults to yesterday or the last day the system reported, whichever is earlier. (optional)</param>
        /// <param name="production">When &#x60;all&#x60;, returns the merged time series plus the time series as reported by the microinverters and the meter on the system. Other values are ignored. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnergyLifetimeResponse</returns>
        System.Threading.Tasks.Task<EnergyLifetimeResponse> EnergyLifetimeAsync(string userId, int systemId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string production = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a time series of energy produced on the system over its lifetime. All measurements are in Watt-hours.  The time series includes one entry for each day from the &#x60;start_date&#x60; to the &#x60;end_date&#x60;. There are no gaps in the time series. If the response includes trailing zeroes, such as &#x60;[909, 4970, 0, 0, 0]&#x60;, then no energy has been reported for the last days in the series. You can check the system&#39;s status in the &#x60;meta&#x60; attribute of the response to determine when the system last reported and whether it has communication or production problems.  If the system has a meter, the time series includes data as measured by the microinverters until the first full day after the meter has been installed, when it switches to using the data as measured by the meter. This is called the \&quot;merged time series\&quot;. In addition, the response includes the attribute &#x60;meter_start_date&#x60;, to indicate where in the time series the meter measurements begin to be used. You can retrieve the complete time series from the meter and from the microinverters by adding the parameter &#x60;production&#x3D;all&#x60; to the request.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startDate">The date on which to start the time series. Defaults to the system&#39;s operational date. (optional)</param>
        /// <param name="endDate">The last date to include in the time series. Defaults to yesterday or the last day the system reported, whichever is earlier. (optional)</param>
        /// <param name="production">When &#x60;all&#x60;, returns the merged time series plus the time series as reported by the microinverters and the meter on the system. Other values are ignored. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnergyLifetimeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnergyLifetimeResponse>> EnergyLifetimeWithHttpInfoAsync(string userId, int systemId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string production = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a listing of all active Envoys currently deployed on the system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvoysResponse</returns>
        System.Threading.Tasks.Task<EnvoysResponse> EnvoysAsync(string userId, int systemId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a listing of all active Envoys currently deployed on the system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvoysResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnvoysResponse>> EnvoysWithHttpInfoAsync(string userId, int systemId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a listing of active devices on the given system. A device is considered active if it has not been retired in Enlighten. \&quot;Active\&quot; does not imply that the device is currently reporting, producing, or measuring energy.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryResponse</returns>
        System.Threading.Tasks.Task<InventoryResponse> InventoryAsync(string userId, int systemId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a listing of active devices on the given system. A device is considered active if it has not been retired in Enlighten. \&quot;Active\&quot; does not imply that the device is currently reporting, producing, or measuring energy.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InventoryResponse>> InventoryWithHttpInfoAsync(string userId, int systemId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the summary along with the energy produced on the system over its lifetime.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="siteId">The identifier of the system.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InvertersSummaryByEnvoyOrSiteResponse&gt;</returns>
        System.Threading.Tasks.Task<List<InvertersSummaryByEnvoyOrSiteResponse>> InvertersSummaryByEnvoyOrSiteAsync(string userId, int siteId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the summary along with the energy produced on the system over its lifetime.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="siteId">The identifier of the system.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InvertersSummaryByEnvoyOrSiteResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InvertersSummaryByEnvoyOrSiteResponse>>> InvertersSummaryByEnvoyOrSiteWithHttpInfoAsync(string userId, int siteId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated and will be removed in a future release. Use &#x60;production_meter_readings&#x60; or &#x60;energy_lifetime&#x60; instead.  Returns the energy production of the system for the month starting on the given date. The start date must be at least one month ago. If a meter or meters are installed on the system, measurements come from the meter; otherwise, measurements come from the microinverters.  This endpoint can return a response of Data Temporarily Unavailable.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startDate">Start date for reporting period. The reporting period ends on the previous day of the next month; for example, a &#x60;start_date&#x60; of 2011-07-20 returns data through 2011-06-19. When the start date is the first of a calendar month, the end end date is the last day of that month.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MonthlyProductionResponse</returns>
        System.Threading.Tasks.Task<MonthlyProductionResponse> MonthlyProductionAsync(string userId, int systemId, DateTime startDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated and will be removed in a future release. Use &#x60;production_meter_readings&#x60; or &#x60;energy_lifetime&#x60; instead.  Returns the energy production of the system for the month starting on the given date. The start date must be at least one month ago. If a meter or meters are installed on the system, measurements come from the meter; otherwise, measurements come from the microinverters.  This endpoint can return a response of Data Temporarily Unavailable.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startDate">Start date for reporting period. The reporting period ends on the previous day of the next month; for example, a &#x60;start_date&#x60; of 2011-07-20 returns data through 2011-06-19. When the start date is the first of a calendar month, the end end date is the last day of that month.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MonthlyProductionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MonthlyProductionResponse>> MonthlyProductionWithHttpInfoAsync(string userId, int systemId, DateTime startDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the last known \&quot;odometer\&quot; reading of each revenue-grade production meter on the system as of the requested time.  This endpoint includes entries for every production meter on the requested system, regardless of whether the meter is currently in service or retired. &#x60;read_at&#x60; is the time at which the reading was taken, and is always less than or equal to the requested &#x60;end_at&#x60;. Commonly, the reading will be within 30 minutes of the requested &#x60;end_at&#x60;; however, larger deltas can occur and do not necessarily mean there is a problem with the meter or the system it is on. Systems that are configured to report infrequently can show large deltas on all meters, especially when &#x60;end_at&#x60; is close to the current time. Meters that have been retired from a system will show an &#x60;end_at&#x60; that doesn&#39;t change, and that eventually is far away from the current time.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="endAt"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductionMeterReadingsResponse</returns>
        System.Threading.Tasks.Task<ProductionMeterReadingsResponse> ProductionMeterReadingsAsync(string userId, int systemId, long? endAt = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the last known \&quot;odometer\&quot; reading of each revenue-grade production meter on the system as of the requested time.  This endpoint includes entries for every production meter on the requested system, regardless of whether the meter is currently in service or retired. &#x60;read_at&#x60; is the time at which the reading was taken, and is always less than or equal to the requested &#x60;end_at&#x60;. Commonly, the reading will be within 30 minutes of the requested &#x60;end_at&#x60;; however, larger deltas can occur and do not necessarily mean there is a problem with the meter or the system it is on. Systems that are configured to report infrequently can show large deltas on all meters, especially when &#x60;end_at&#x60; is close to the current time. Meters that have been retired from a system will show an &#x60;end_at&#x60; that doesn&#39;t change, and that eventually is far away from the current time.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="endAt"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductionMeterReadingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductionMeterReadingsResponse>> ProductionMeterReadingsWithHttpInfoAsync(string userId, int systemId, long? endAt = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns performance statistics as measured by the revenue-grade meters installed on the specified system. If the total duration requested is more than one month, returns one month of intervals. Intervals are 15 minutes in length and start at the top of the hour.  Requests for times that do not fall on the 15-minute marks are rounded down. For example, a request for 08:01, 08:08, 08:11, or 08:14 is treated as a request for 08:00. Intervals are listed by their end dates; therefore, the first interval returned is 15 minutes after the requested start date.  If the system doesn&#39;t have any revenue-grade meters installed, the response includes an empty intervals array.  Under some conditions, data for a given period may be temporarily unavailable.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startAt">Start of period to report on in Unix epoch time. If no start is specified, the assumed start is midnight today, in the timezone of the system. If the start is earlier than one year ago, the response includes an empty intervals list. If the start is earlier than the system&#39;s &#x60;operational_date&#x60;, the response data begins with the first interval of the &#x60;operational_date&#x60;. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, defaults to the time of the request. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RgmStatsResponse</returns>
        System.Threading.Tasks.Task<RgmStatsResponse> RgmStatsAsync(string userId, int systemId, long? startAt = default(long?), long? endAt = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns performance statistics as measured by the revenue-grade meters installed on the specified system. If the total duration requested is more than one month, returns one month of intervals. Intervals are 15 minutes in length and start at the top of the hour.  Requests for times that do not fall on the 15-minute marks are rounded down. For example, a request for 08:01, 08:08, 08:11, or 08:14 is treated as a request for 08:00. Intervals are listed by their end dates; therefore, the first interval returned is 15 minutes after the requested start date.  If the system doesn&#39;t have any revenue-grade meters installed, the response includes an empty intervals array.  Under some conditions, data for a given period may be temporarily unavailable.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startAt">Start of period to report on in Unix epoch time. If no start is specified, the assumed start is midnight today, in the timezone of the system. If the start is earlier than one year ago, the response includes an empty intervals list. If the start is earlier than the system&#39;s &#x60;operational_date&#x60;, the response data begins with the first interval of the &#x60;operational_date&#x60;. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, defaults to the time of the request. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RgmStatsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RgmStatsResponse>> RgmStatsWithHttpInfoAsync(string userId, int systemId, long? startAt = default(long?), long? endAt = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get system ID by envoy serial number.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="serialNum">Serial number of the envoy.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchSystemIdResponse</returns>
        System.Threading.Tasks.Task<SearchSystemIdResponse> SearchSystemIdAsync(string userId, string serialNum, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get system ID by envoy serial number.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="serialNum">Serial number of the envoy.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchSystemIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchSystemIdResponse>> SearchSystemIdWithHttpInfoAsync(string userId, string serialNum, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns performance statistics for the specified system as reported by microinverters installed on the system. If the total duration requested is more than one day, returns one day of intervals. Intervals are 5 minutes in length and start at the top of the hour.  Requests for times that do not fall on the 5-minute marks are rounded down. For example, a request for 08:01, 08:02, 08:03, or 08:04 is treated as a request for 08:00. Intervals are listed by their end dates; therefore, the first interval returned is 5 minutes after the requested start date.  The response includes intervals that have been reported for the requested period. Gaps in reporting are not filled with 0-value intervals. The dark hours on a system are an example of such a gap, because the microinverters do not produce at night.  Sometimes a request cannot be processed because the requested dates are invalid for the the system in question. Examples include asking for stats starting at a time that is later than the system&#39;s last reported interval, or asking for stats before a system has started production. In cases such as these, the response code is &#x60;422&#x60; and the response body includes an error reason as well as the parameters used to process the request.  If the system doesn&#39;t have any microinverters installed, the response includes an empty intervals array. Under some conditions, data for a given period may be temporarily unavailable.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startAt">Start of reporting period in Unix epoch time. If no start is specified, defaults to midnight today, in the timezone of the system. If the start date is earlier than one year ago today, the response includes an empty intervals list. If the start is earlier than the system&#39;s &#x60;operational_date&#x60;, the response data begins with the &#x60;operational_date&#x60;. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, the assumed end is now. If the end is later than the last reporting interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatsResponse</returns>
        System.Threading.Tasks.Task<StatsResponse> StatsAsync(string userId, int systemId, long? startAt = default(long?), long? endAt = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns performance statistics for the specified system as reported by microinverters installed on the system. If the total duration requested is more than one day, returns one day of intervals. Intervals are 5 minutes in length and start at the top of the hour.  Requests for times that do not fall on the 5-minute marks are rounded down. For example, a request for 08:01, 08:02, 08:03, or 08:04 is treated as a request for 08:00. Intervals are listed by their end dates; therefore, the first interval returned is 5 minutes after the requested start date.  The response includes intervals that have been reported for the requested period. Gaps in reporting are not filled with 0-value intervals. The dark hours on a system are an example of such a gap, because the microinverters do not produce at night.  Sometimes a request cannot be processed because the requested dates are invalid for the the system in question. Examples include asking for stats starting at a time that is later than the system&#39;s last reported interval, or asking for stats before a system has started production. In cases such as these, the response code is &#x60;422&#x60; and the response body includes an error reason as well as the parameters used to process the request.  If the system doesn&#39;t have any microinverters installed, the response includes an empty intervals array. Under some conditions, data for a given period may be temporarily unavailable.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startAt">Start of reporting period in Unix epoch time. If no start is specified, defaults to midnight today, in the timezone of the system. If the start date is earlier than one year ago today, the response includes an empty intervals list. If the start is earlier than the system&#39;s &#x60;operational_date&#x60;, the response data begins with the &#x60;operational_date&#x60;. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, the assumed end is now. If the end is later than the last reporting interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatsResponse>> StatsWithHttpInfoAsync(string userId, int systemId, long? startAt = default(long?), long? endAt = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns summary information for the specified system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="summaryDate">Start of reporting period. If no &#x60;summary_date&#x60; is provided, the start is the current day at midnight site-local time. Otherwise, the start is midnight site-local time of the requested day. If the requested date cannot be parsed or is in the future, the response includes an informative error message and &#x60;422&#x60; status. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SummaryResponse</returns>
        System.Threading.Tasks.Task<SummaryResponse> SummaryAsync(string userId, int systemId, DateTime? summaryDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns summary information for the specified system.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="summaryDate">Start of reporting period. If no &#x60;summary_date&#x60; is provided, the start is the current day at midnight site-local time. Otherwise, the start is midnight site-local time of the requested day. If the requested date cannot be parsed or is in the future, the response includes an informative error message and &#x60;422&#x60; status. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SummaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SummaryResponse>> SummaryWithHttpInfoAsync(string userId, int systemId, DateTime? summaryDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of systems for which the user can make API requests. There is a limit to the number of systems that can be returned at one time. If the first request does not return a full list, use the &#x60;next&#x60; attribute in the response body to request the next page of systems. By default, systems are returned in batches of 100. The maximum page size is 1000.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="next"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="systemId"> (optional)</param>
        /// <param name="systemId2"> (optional)</param>
        /// <param name="systemName"> (optional)</param>
        /// <param name="systemName2"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="status2"> (optional)</param>
        /// <param name="reference"> (optional)</param>
        /// <param name="reference2"> (optional)</param>
        /// <param name="installer"> (optional)</param>
        /// <param name="installer2"> (optional)</param>
        /// <param name="connectionType"> (optional)</param>
        /// <param name="connectionType2"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SystemsResponse</returns>
        System.Threading.Tasks.Task<SystemsResponse> SystemsAsync(string userId, string next = default(string), int? limit = default(int?), int? systemId = default(int?), List<int> systemId2 = default(List<int>), string systemName = default(string), List<string> systemName2 = default(List<string>), Status? status = default(Status?), List<Status> status2 = default(List<Status>), string reference = default(string), List<string> reference2 = default(List<string>), string installer = default(string), List<string> installer2 = default(List<string>), ConnectionType? connectionType = default(ConnectionType?), List<ConnectionType> connectionType2 = default(List<ConnectionType>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of systems for which the user can make API requests. There is a limit to the number of systems that can be returned at one time. If the first request does not return a full list, use the &#x60;next&#x60; attribute in the response body to request the next page of systems. By default, systems are returned in batches of 100. The maximum page size is 1000.
        /// </remarks>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="next"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="systemId"> (optional)</param>
        /// <param name="systemId2"> (optional)</param>
        /// <param name="systemName"> (optional)</param>
        /// <param name="systemName2"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="status2"> (optional)</param>
        /// <param name="reference"> (optional)</param>
        /// <param name="reference2"> (optional)</param>
        /// <param name="installer"> (optional)</param>
        /// <param name="installer2"> (optional)</param>
        /// <param name="connectionType"> (optional)</param>
        /// <param name="connectionType2"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SystemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemsResponse>> SystemsWithHttpInfoAsync(string userId, string next = default(string), int? limit = default(int?), int? systemId = default(int?), List<int> systemId2 = default(List<int>), string systemName = default(string), List<string> systemName2 = default(List<string>), Status? status = default(Status?), List<Status> status2 = default(List<Status>), string reference = default(string), List<string> reference2 = default(List<string>), string installer = default(string), List<string> installer2 = default(List<string>), ConnectionType? connectionType = default(ConnectionType?), List<ConnectionType> connectionType2 = default(List<ConnectionType>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private EnphaseOpenAPI.Enlighten.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = EnphaseOpenAPI.Enlighten.Client.Configuration.MergeConfigurations(
                EnphaseOpenAPI.Enlighten.Client.GlobalConfiguration.Instance,
                new EnphaseOpenAPI.Enlighten.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EnphaseOpenAPI.Enlighten.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnphaseOpenAPI.Enlighten.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EnphaseOpenAPI.Enlighten.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(EnphaseOpenAPI.Enlighten.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EnphaseOpenAPI.Enlighten.Client.Configuration.MergeConfigurations(
                EnphaseOpenAPI.Enlighten.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EnphaseOpenAPI.Enlighten.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnphaseOpenAPI.Enlighten.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EnphaseOpenAPI.Enlighten.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(EnphaseOpenAPI.Enlighten.Client.ISynchronousClient client, EnphaseOpenAPI.Enlighten.Client.IAsynchronousClient asyncClient, EnphaseOpenAPI.Enlighten.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EnphaseOpenAPI.Enlighten.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EnphaseOpenAPI.Enlighten.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EnphaseOpenAPI.Enlighten.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EnphaseOpenAPI.Enlighten.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EnphaseOpenAPI.Enlighten.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Returns a time series of energy consumption as measured by the consumption meter installed on the specified system. All measurements are in Watt-hours. If the system does not have a meter, returns &#x60;204&#x60; - No Content. If you don&#39;t have permission to view consumption data, the response code is &#x60;401&#x60;.  The time series includes one entry for each day from the &#x60;start_date&#x60; to the &#x60;end_date&#x60;. There are no gaps in the time series. If the response includes trailing zeroes, such as [909, 4970, 0, 0, 0], then no data has been reported for the last days in the series. You can check the system&#39;s status in the &#x60;meta&#x60; attribute of the response to determine when the system last reported and whether it has communication or metering problems.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startDate">The date on which to start the time series. Defaults to the system&#39;s operational date. (optional)</param>
        /// <param name="endDate">The last date to include in the time series. Defaults to yesterday or the last day the system reported, whichever is earlier. (optional)</param>
        /// <returns>ConsumptionLifetimeResponse</returns>
        public ConsumptionLifetimeResponse ConsumptionLifetime(string userId, int systemId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?))
        {
            EnphaseOpenAPI.Enlighten.Client.ApiResponse<ConsumptionLifetimeResponse> localVarResponse = ConsumptionLifetimeWithHttpInfo(userId, systemId, startDate, endDate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a time series of energy consumption as measured by the consumption meter installed on the specified system. All measurements are in Watt-hours. If the system does not have a meter, returns &#x60;204&#x60; - No Content. If you don&#39;t have permission to view consumption data, the response code is &#x60;401&#x60;.  The time series includes one entry for each day from the &#x60;start_date&#x60; to the &#x60;end_date&#x60;. There are no gaps in the time series. If the response includes trailing zeroes, such as [909, 4970, 0, 0, 0], then no data has been reported for the last days in the series. You can check the system&#39;s status in the &#x60;meta&#x60; attribute of the response to determine when the system last reported and whether it has communication or metering problems.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startDate">The date on which to start the time series. Defaults to the system&#39;s operational date. (optional)</param>
        /// <param name="endDate">The last date to include in the time series. Defaults to yesterday or the last day the system reported, whichever is earlier. (optional)</param>
        /// <returns>ApiResponse of ConsumptionLifetimeResponse</returns>
        public EnphaseOpenAPI.Enlighten.Client.ApiResponse<ConsumptionLifetimeResponse> ConsumptionLifetimeWithHttpInfo(string userId, int systemId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->ConsumptionLifetime");

            EnphaseOpenAPI.Enlighten.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Enlighten.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConsumptionLifetimeResponse>("/systems/{system_id}/consumption_lifetime", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConsumptionLifetime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a time series of energy consumption as measured by the consumption meter installed on the specified system. All measurements are in Watt-hours. If the system does not have a meter, returns &#x60;204&#x60; - No Content. If you don&#39;t have permission to view consumption data, the response code is &#x60;401&#x60;.  The time series includes one entry for each day from the &#x60;start_date&#x60; to the &#x60;end_date&#x60;. There are no gaps in the time series. If the response includes trailing zeroes, such as [909, 4970, 0, 0, 0], then no data has been reported for the last days in the series. You can check the system&#39;s status in the &#x60;meta&#x60; attribute of the response to determine when the system last reported and whether it has communication or metering problems.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startDate">The date on which to start the time series. Defaults to the system&#39;s operational date. (optional)</param>
        /// <param name="endDate">The last date to include in the time series. Defaults to yesterday or the last day the system reported, whichever is earlier. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsumptionLifetimeResponse</returns>
        public async System.Threading.Tasks.Task<ConsumptionLifetimeResponse> ConsumptionLifetimeAsync(string userId, int systemId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Enlighten.Client.ApiResponse<ConsumptionLifetimeResponse> localVarResponse = await ConsumptionLifetimeWithHttpInfoAsync(userId, systemId, startDate, endDate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a time series of energy consumption as measured by the consumption meter installed on the specified system. All measurements are in Watt-hours. If the system does not have a meter, returns &#x60;204&#x60; - No Content. If you don&#39;t have permission to view consumption data, the response code is &#x60;401&#x60;.  The time series includes one entry for each day from the &#x60;start_date&#x60; to the &#x60;end_date&#x60;. There are no gaps in the time series. If the response includes trailing zeroes, such as [909, 4970, 0, 0, 0], then no data has been reported for the last days in the series. You can check the system&#39;s status in the &#x60;meta&#x60; attribute of the response to determine when the system last reported and whether it has communication or metering problems.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startDate">The date on which to start the time series. Defaults to the system&#39;s operational date. (optional)</param>
        /// <param name="endDate">The last date to include in the time series. Defaults to yesterday or the last day the system reported, whichever is earlier. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsumptionLifetimeResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Enlighten.Client.ApiResponse<ConsumptionLifetimeResponse>> ConsumptionLifetimeWithHttpInfoAsync(string userId, int systemId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->ConsumptionLifetime");


            EnphaseOpenAPI.Enlighten.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Enlighten.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ConsumptionLifetimeResponse>("/systems/{system_id}/consumption_lifetime", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConsumptionLifetime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns consumption as measured by the consumption meter installed on the specified system. If the total duration requested is more than one month, returns one month of intervals. Intervals are 15 minutes in length and start at the top of the hour.  Requests for times that do not fall on the 15-minute marks are rounded down. For example, a request for 08:01, 08:08, 08:11, or 08:14 is treated as a request for 08:00. Intervals are listed by their end dates; therefore, the first interval returned is 15 minutes after the requested start date.  If the system doesn&#39;t have any consumption meters installed, the response includes an empty intervals array.  If you don&#39;t have permission to view consumption data, the response code is &#x60;401&#x60;.  Under some conditions, data for a given period may be temporarily unavailable.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startAt">Start of period to report on in Unix epoch time. If no start is specified, the assumed start is midnight today, in the timezone of the system. If the start is earlier than one year ago, the response includes an empty intervals list. If the start is earlier than the system&#39;s &#x60;operational_date&#x60;, the response data begins with the first interval of the &#x60;operational_date&#x60;. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, defaults to the time of the request. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <returns>ConsumptionStatsResponse</returns>
        public ConsumptionStatsResponse ConsumptionStats(string userId, int systemId, long? startAt = default(long?), long? endAt = default(long?))
        {
            EnphaseOpenAPI.Enlighten.Client.ApiResponse<ConsumptionStatsResponse> localVarResponse = ConsumptionStatsWithHttpInfo(userId, systemId, startAt, endAt);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns consumption as measured by the consumption meter installed on the specified system. If the total duration requested is more than one month, returns one month of intervals. Intervals are 15 minutes in length and start at the top of the hour.  Requests for times that do not fall on the 15-minute marks are rounded down. For example, a request for 08:01, 08:08, 08:11, or 08:14 is treated as a request for 08:00. Intervals are listed by their end dates; therefore, the first interval returned is 15 minutes after the requested start date.  If the system doesn&#39;t have any consumption meters installed, the response includes an empty intervals array.  If you don&#39;t have permission to view consumption data, the response code is &#x60;401&#x60;.  Under some conditions, data for a given period may be temporarily unavailable.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startAt">Start of period to report on in Unix epoch time. If no start is specified, the assumed start is midnight today, in the timezone of the system. If the start is earlier than one year ago, the response includes an empty intervals list. If the start is earlier than the system&#39;s &#x60;operational_date&#x60;, the response data begins with the first interval of the &#x60;operational_date&#x60;. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, defaults to the time of the request. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <returns>ApiResponse of ConsumptionStatsResponse</returns>
        public EnphaseOpenAPI.Enlighten.Client.ApiResponse<ConsumptionStatsResponse> ConsumptionStatsWithHttpInfo(string userId, int systemId, long? startAt = default(long?), long? endAt = default(long?))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->ConsumptionStats");

            EnphaseOpenAPI.Enlighten.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Enlighten.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            if (startAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "start_at", startAt));
            }
            if (endAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "end_at", endAt));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConsumptionStatsResponse>("/systems/{system_id}/consumption_stats", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConsumptionStats", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns consumption as measured by the consumption meter installed on the specified system. If the total duration requested is more than one month, returns one month of intervals. Intervals are 15 minutes in length and start at the top of the hour.  Requests for times that do not fall on the 15-minute marks are rounded down. For example, a request for 08:01, 08:08, 08:11, or 08:14 is treated as a request for 08:00. Intervals are listed by their end dates; therefore, the first interval returned is 15 minutes after the requested start date.  If the system doesn&#39;t have any consumption meters installed, the response includes an empty intervals array.  If you don&#39;t have permission to view consumption data, the response code is &#x60;401&#x60;.  Under some conditions, data for a given period may be temporarily unavailable.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startAt">Start of period to report on in Unix epoch time. If no start is specified, the assumed start is midnight today, in the timezone of the system. If the start is earlier than one year ago, the response includes an empty intervals list. If the start is earlier than the system&#39;s &#x60;operational_date&#x60;, the response data begins with the first interval of the &#x60;operational_date&#x60;. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, defaults to the time of the request. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConsumptionStatsResponse</returns>
        public async System.Threading.Tasks.Task<ConsumptionStatsResponse> ConsumptionStatsAsync(string userId, int systemId, long? startAt = default(long?), long? endAt = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Enlighten.Client.ApiResponse<ConsumptionStatsResponse> localVarResponse = await ConsumptionStatsWithHttpInfoAsync(userId, systemId, startAt, endAt, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns consumption as measured by the consumption meter installed on the specified system. If the total duration requested is more than one month, returns one month of intervals. Intervals are 15 minutes in length and start at the top of the hour.  Requests for times that do not fall on the 15-minute marks are rounded down. For example, a request for 08:01, 08:08, 08:11, or 08:14 is treated as a request for 08:00. Intervals are listed by their end dates; therefore, the first interval returned is 15 minutes after the requested start date.  If the system doesn&#39;t have any consumption meters installed, the response includes an empty intervals array.  If you don&#39;t have permission to view consumption data, the response code is &#x60;401&#x60;.  Under some conditions, data for a given period may be temporarily unavailable.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startAt">Start of period to report on in Unix epoch time. If no start is specified, the assumed start is midnight today, in the timezone of the system. If the start is earlier than one year ago, the response includes an empty intervals list. If the start is earlier than the system&#39;s &#x60;operational_date&#x60;, the response data begins with the first interval of the &#x60;operational_date&#x60;. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, defaults to the time of the request. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConsumptionStatsResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Enlighten.Client.ApiResponse<ConsumptionStatsResponse>> ConsumptionStatsWithHttpInfoAsync(string userId, int systemId, long? startAt = default(long?), long? endAt = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->ConsumptionStats");


            EnphaseOpenAPI.Enlighten.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Enlighten.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            if (startAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "start_at", startAt));
            }
            if (endAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "end_at", endAt));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ConsumptionStatsResponse>("/systems/{system_id}/consumption_stats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConsumptionStats", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a time series of energy produced on the system over its lifetime. All measurements are in Watt-hours.  The time series includes one entry for each day from the &#x60;start_date&#x60; to the &#x60;end_date&#x60;. There are no gaps in the time series. If the response includes trailing zeroes, such as &#x60;[909, 4970, 0, 0, 0]&#x60;, then no energy has been reported for the last days in the series. You can check the system&#39;s status in the &#x60;meta&#x60; attribute of the response to determine when the system last reported and whether it has communication or production problems.  If the system has a meter, the time series includes data as measured by the microinverters until the first full day after the meter has been installed, when it switches to using the data as measured by the meter. This is called the \&quot;merged time series\&quot;. In addition, the response includes the attribute &#x60;meter_start_date&#x60;, to indicate where in the time series the meter measurements begin to be used. You can retrieve the complete time series from the meter and from the microinverters by adding the parameter &#x60;production&#x3D;all&#x60; to the request.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startDate">The date on which to start the time series. Defaults to the system&#39;s operational date. (optional)</param>
        /// <param name="endDate">The last date to include in the time series. Defaults to yesterday or the last day the system reported, whichever is earlier. (optional)</param>
        /// <param name="production">When &#x60;all&#x60;, returns the merged time series plus the time series as reported by the microinverters and the meter on the system. Other values are ignored. (optional)</param>
        /// <returns>EnergyLifetimeResponse</returns>
        public EnergyLifetimeResponse EnergyLifetime(string userId, int systemId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string production = default(string))
        {
            EnphaseOpenAPI.Enlighten.Client.ApiResponse<EnergyLifetimeResponse> localVarResponse = EnergyLifetimeWithHttpInfo(userId, systemId, startDate, endDate, production);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a time series of energy produced on the system over its lifetime. All measurements are in Watt-hours.  The time series includes one entry for each day from the &#x60;start_date&#x60; to the &#x60;end_date&#x60;. There are no gaps in the time series. If the response includes trailing zeroes, such as &#x60;[909, 4970, 0, 0, 0]&#x60;, then no energy has been reported for the last days in the series. You can check the system&#39;s status in the &#x60;meta&#x60; attribute of the response to determine when the system last reported and whether it has communication or production problems.  If the system has a meter, the time series includes data as measured by the microinverters until the first full day after the meter has been installed, when it switches to using the data as measured by the meter. This is called the \&quot;merged time series\&quot;. In addition, the response includes the attribute &#x60;meter_start_date&#x60;, to indicate where in the time series the meter measurements begin to be used. You can retrieve the complete time series from the meter and from the microinverters by adding the parameter &#x60;production&#x3D;all&#x60; to the request.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startDate">The date on which to start the time series. Defaults to the system&#39;s operational date. (optional)</param>
        /// <param name="endDate">The last date to include in the time series. Defaults to yesterday or the last day the system reported, whichever is earlier. (optional)</param>
        /// <param name="production">When &#x60;all&#x60;, returns the merged time series plus the time series as reported by the microinverters and the meter on the system. Other values are ignored. (optional)</param>
        /// <returns>ApiResponse of EnergyLifetimeResponse</returns>
        public EnphaseOpenAPI.Enlighten.Client.ApiResponse<EnergyLifetimeResponse> EnergyLifetimeWithHttpInfo(string userId, int systemId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string production = default(string))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->EnergyLifetime");

            EnphaseOpenAPI.Enlighten.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Enlighten.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }
            if (production != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "production", production));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EnergyLifetimeResponse>("/systems/{system_id}/energy_lifetime", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnergyLifetime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a time series of energy produced on the system over its lifetime. All measurements are in Watt-hours.  The time series includes one entry for each day from the &#x60;start_date&#x60; to the &#x60;end_date&#x60;. There are no gaps in the time series. If the response includes trailing zeroes, such as &#x60;[909, 4970, 0, 0, 0]&#x60;, then no energy has been reported for the last days in the series. You can check the system&#39;s status in the &#x60;meta&#x60; attribute of the response to determine when the system last reported and whether it has communication or production problems.  If the system has a meter, the time series includes data as measured by the microinverters until the first full day after the meter has been installed, when it switches to using the data as measured by the meter. This is called the \&quot;merged time series\&quot;. In addition, the response includes the attribute &#x60;meter_start_date&#x60;, to indicate where in the time series the meter measurements begin to be used. You can retrieve the complete time series from the meter and from the microinverters by adding the parameter &#x60;production&#x3D;all&#x60; to the request.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startDate">The date on which to start the time series. Defaults to the system&#39;s operational date. (optional)</param>
        /// <param name="endDate">The last date to include in the time series. Defaults to yesterday or the last day the system reported, whichever is earlier. (optional)</param>
        /// <param name="production">When &#x60;all&#x60;, returns the merged time series plus the time series as reported by the microinverters and the meter on the system. Other values are ignored. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnergyLifetimeResponse</returns>
        public async System.Threading.Tasks.Task<EnergyLifetimeResponse> EnergyLifetimeAsync(string userId, int systemId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string production = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Enlighten.Client.ApiResponse<EnergyLifetimeResponse> localVarResponse = await EnergyLifetimeWithHttpInfoAsync(userId, systemId, startDate, endDate, production, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a time series of energy produced on the system over its lifetime. All measurements are in Watt-hours.  The time series includes one entry for each day from the &#x60;start_date&#x60; to the &#x60;end_date&#x60;. There are no gaps in the time series. If the response includes trailing zeroes, such as &#x60;[909, 4970, 0, 0, 0]&#x60;, then no energy has been reported for the last days in the series. You can check the system&#39;s status in the &#x60;meta&#x60; attribute of the response to determine when the system last reported and whether it has communication or production problems.  If the system has a meter, the time series includes data as measured by the microinverters until the first full day after the meter has been installed, when it switches to using the data as measured by the meter. This is called the \&quot;merged time series\&quot;. In addition, the response includes the attribute &#x60;meter_start_date&#x60;, to indicate where in the time series the meter measurements begin to be used. You can retrieve the complete time series from the meter and from the microinverters by adding the parameter &#x60;production&#x3D;all&#x60; to the request.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startDate">The date on which to start the time series. Defaults to the system&#39;s operational date. (optional)</param>
        /// <param name="endDate">The last date to include in the time series. Defaults to yesterday or the last day the system reported, whichever is earlier. (optional)</param>
        /// <param name="production">When &#x60;all&#x60;, returns the merged time series plus the time series as reported by the microinverters and the meter on the system. Other values are ignored. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnergyLifetimeResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Enlighten.Client.ApiResponse<EnergyLifetimeResponse>> EnergyLifetimeWithHttpInfoAsync(string userId, int systemId, DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string production = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->EnergyLifetime");


            EnphaseOpenAPI.Enlighten.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Enlighten.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }
            if (production != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "production", production));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EnergyLifetimeResponse>("/systems/{system_id}/energy_lifetime", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnergyLifetime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a listing of all active Envoys currently deployed on the system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <returns>EnvoysResponse</returns>
        public EnvoysResponse Envoys(string userId, int systemId)
        {
            EnphaseOpenAPI.Enlighten.Client.ApiResponse<EnvoysResponse> localVarResponse = EnvoysWithHttpInfo(userId, systemId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a listing of all active Envoys currently deployed on the system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <returns>ApiResponse of EnvoysResponse</returns>
        public EnphaseOpenAPI.Enlighten.Client.ApiResponse<EnvoysResponse> EnvoysWithHttpInfo(string userId, int systemId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->Envoys");

            EnphaseOpenAPI.Enlighten.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Enlighten.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EnvoysResponse>("/systems/{system_id}/envoys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Envoys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a listing of all active Envoys currently deployed on the system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnvoysResponse</returns>
        public async System.Threading.Tasks.Task<EnvoysResponse> EnvoysAsync(string userId, int systemId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Enlighten.Client.ApiResponse<EnvoysResponse> localVarResponse = await EnvoysWithHttpInfoAsync(userId, systemId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a listing of all active Envoys currently deployed on the system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnvoysResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Enlighten.Client.ApiResponse<EnvoysResponse>> EnvoysWithHttpInfoAsync(string userId, int systemId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->Envoys");


            EnphaseOpenAPI.Enlighten.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Enlighten.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EnvoysResponse>("/systems/{system_id}/envoys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Envoys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a listing of active devices on the given system. A device is considered active if it has not been retired in Enlighten. \&quot;Active\&quot; does not imply that the device is currently reporting, producing, or measuring energy.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <returns>InventoryResponse</returns>
        public InventoryResponse Inventory(string userId, int systemId)
        {
            EnphaseOpenAPI.Enlighten.Client.ApiResponse<InventoryResponse> localVarResponse = InventoryWithHttpInfo(userId, systemId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a listing of active devices on the given system. A device is considered active if it has not been retired in Enlighten. \&quot;Active\&quot; does not imply that the device is currently reporting, producing, or measuring energy.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <returns>ApiResponse of InventoryResponse</returns>
        public EnphaseOpenAPI.Enlighten.Client.ApiResponse<InventoryResponse> InventoryWithHttpInfo(string userId, int systemId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->Inventory");

            EnphaseOpenAPI.Enlighten.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Enlighten.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InventoryResponse>("/systems/{system_id}/inventory", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Inventory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a listing of active devices on the given system. A device is considered active if it has not been retired in Enlighten. \&quot;Active\&quot; does not imply that the device is currently reporting, producing, or measuring energy.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryResponse</returns>
        public async System.Threading.Tasks.Task<InventoryResponse> InventoryAsync(string userId, int systemId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Enlighten.Client.ApiResponse<InventoryResponse> localVarResponse = await InventoryWithHttpInfoAsync(userId, systemId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a listing of active devices on the given system. A device is considered active if it has not been retired in Enlighten. \&quot;Active\&quot; does not imply that the device is currently reporting, producing, or measuring energy.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Enlighten.Client.ApiResponse<InventoryResponse>> InventoryWithHttpInfoAsync(string userId, int systemId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->Inventory");


            EnphaseOpenAPI.Enlighten.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Enlighten.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InventoryResponse>("/systems/{system_id}/inventory", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Inventory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the summary along with the energy produced on the system over its lifetime.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="siteId">The identifier of the system.</param>
        /// <returns>List&lt;InvertersSummaryByEnvoyOrSiteResponse&gt;</returns>
        public List<InvertersSummaryByEnvoyOrSiteResponse> InvertersSummaryByEnvoyOrSite(string userId, int siteId)
        {
            EnphaseOpenAPI.Enlighten.Client.ApiResponse<List<InvertersSummaryByEnvoyOrSiteResponse>> localVarResponse = InvertersSummaryByEnvoyOrSiteWithHttpInfo(userId, siteId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the summary along with the energy produced on the system over its lifetime.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="siteId">The identifier of the system.</param>
        /// <returns>ApiResponse of List&lt;InvertersSummaryByEnvoyOrSiteResponse&gt;</returns>
        public EnphaseOpenAPI.Enlighten.Client.ApiResponse<List<InvertersSummaryByEnvoyOrSiteResponse>> InvertersSummaryByEnvoyOrSiteWithHttpInfo(string userId, int siteId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->InvertersSummaryByEnvoyOrSite");

            EnphaseOpenAPI.Enlighten.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Enlighten.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "site_id", siteId));

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<InvertersSummaryByEnvoyOrSiteResponse>>("/systems/inverters_summary_by_envoy_or_site", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvertersSummaryByEnvoyOrSite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the summary along with the energy produced on the system over its lifetime.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="siteId">The identifier of the system.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InvertersSummaryByEnvoyOrSiteResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<InvertersSummaryByEnvoyOrSiteResponse>> InvertersSummaryByEnvoyOrSiteAsync(string userId, int siteId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Enlighten.Client.ApiResponse<List<InvertersSummaryByEnvoyOrSiteResponse>> localVarResponse = await InvertersSummaryByEnvoyOrSiteWithHttpInfoAsync(userId, siteId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the summary along with the energy produced on the system over its lifetime.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="siteId">The identifier of the system.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InvertersSummaryByEnvoyOrSiteResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Enlighten.Client.ApiResponse<List<InvertersSummaryByEnvoyOrSiteResponse>>> InvertersSummaryByEnvoyOrSiteWithHttpInfoAsync(string userId, int siteId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->InvertersSummaryByEnvoyOrSite");


            EnphaseOpenAPI.Enlighten.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Enlighten.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "site_id", siteId));

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<InvertersSummaryByEnvoyOrSiteResponse>>("/systems/inverters_summary_by_envoy_or_site", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InvertersSummaryByEnvoyOrSite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  This endpoint is deprecated and will be removed in a future release. Use &#x60;production_meter_readings&#x60; or &#x60;energy_lifetime&#x60; instead.  Returns the energy production of the system for the month starting on the given date. The start date must be at least one month ago. If a meter or meters are installed on the system, measurements come from the meter; otherwise, measurements come from the microinverters.  This endpoint can return a response of Data Temporarily Unavailable.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startDate">Start date for reporting period. The reporting period ends on the previous day of the next month; for example, a &#x60;start_date&#x60; of 2011-07-20 returns data through 2011-06-19. When the start date is the first of a calendar month, the end end date is the last day of that month.</param>
        /// <returns>MonthlyProductionResponse</returns>
        public MonthlyProductionResponse MonthlyProduction(string userId, int systemId, DateTime startDate)
        {
            EnphaseOpenAPI.Enlighten.Client.ApiResponse<MonthlyProductionResponse> localVarResponse = MonthlyProductionWithHttpInfo(userId, systemId, startDate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  This endpoint is deprecated and will be removed in a future release. Use &#x60;production_meter_readings&#x60; or &#x60;energy_lifetime&#x60; instead.  Returns the energy production of the system for the month starting on the given date. The start date must be at least one month ago. If a meter or meters are installed on the system, measurements come from the meter; otherwise, measurements come from the microinverters.  This endpoint can return a response of Data Temporarily Unavailable.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startDate">Start date for reporting period. The reporting period ends on the previous day of the next month; for example, a &#x60;start_date&#x60; of 2011-07-20 returns data through 2011-06-19. When the start date is the first of a calendar month, the end end date is the last day of that month.</param>
        /// <returns>ApiResponse of MonthlyProductionResponse</returns>
        public EnphaseOpenAPI.Enlighten.Client.ApiResponse<MonthlyProductionResponse> MonthlyProductionWithHttpInfo(string userId, int systemId, DateTime startDate)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->MonthlyProduction");

            EnphaseOpenAPI.Enlighten.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Enlighten.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MonthlyProductionResponse>("/systems/{system_id}/monthly_production", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MonthlyProduction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  This endpoint is deprecated and will be removed in a future release. Use &#x60;production_meter_readings&#x60; or &#x60;energy_lifetime&#x60; instead.  Returns the energy production of the system for the month starting on the given date. The start date must be at least one month ago. If a meter or meters are installed on the system, measurements come from the meter; otherwise, measurements come from the microinverters.  This endpoint can return a response of Data Temporarily Unavailable.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startDate">Start date for reporting period. The reporting period ends on the previous day of the next month; for example, a &#x60;start_date&#x60; of 2011-07-20 returns data through 2011-06-19. When the start date is the first of a calendar month, the end end date is the last day of that month.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MonthlyProductionResponse</returns>
        public async System.Threading.Tasks.Task<MonthlyProductionResponse> MonthlyProductionAsync(string userId, int systemId, DateTime startDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Enlighten.Client.ApiResponse<MonthlyProductionResponse> localVarResponse = await MonthlyProductionWithHttpInfoAsync(userId, systemId, startDate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  This endpoint is deprecated and will be removed in a future release. Use &#x60;production_meter_readings&#x60; or &#x60;energy_lifetime&#x60; instead.  Returns the energy production of the system for the month starting on the given date. The start date must be at least one month ago. If a meter or meters are installed on the system, measurements come from the meter; otherwise, measurements come from the microinverters.  This endpoint can return a response of Data Temporarily Unavailable.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startDate">Start date for reporting period. The reporting period ends on the previous day of the next month; for example, a &#x60;start_date&#x60; of 2011-07-20 returns data through 2011-06-19. When the start date is the first of a calendar month, the end end date is the last day of that month.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MonthlyProductionResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Enlighten.Client.ApiResponse<MonthlyProductionResponse>> MonthlyProductionWithHttpInfoAsync(string userId, int systemId, DateTime startDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->MonthlyProduction");


            EnphaseOpenAPI.Enlighten.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Enlighten.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MonthlyProductionResponse>("/systems/{system_id}/monthly_production", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MonthlyProduction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the last known \&quot;odometer\&quot; reading of each revenue-grade production meter on the system as of the requested time.  This endpoint includes entries for every production meter on the requested system, regardless of whether the meter is currently in service or retired. &#x60;read_at&#x60; is the time at which the reading was taken, and is always less than or equal to the requested &#x60;end_at&#x60;. Commonly, the reading will be within 30 minutes of the requested &#x60;end_at&#x60;; however, larger deltas can occur and do not necessarily mean there is a problem with the meter or the system it is on. Systems that are configured to report infrequently can show large deltas on all meters, especially when &#x60;end_at&#x60; is close to the current time. Meters that have been retired from a system will show an &#x60;end_at&#x60; that doesn&#39;t change, and that eventually is far away from the current time.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="endAt"> (optional)</param>
        /// <returns>ProductionMeterReadingsResponse</returns>
        public ProductionMeterReadingsResponse ProductionMeterReadings(string userId, int systemId, long? endAt = default(long?))
        {
            EnphaseOpenAPI.Enlighten.Client.ApiResponse<ProductionMeterReadingsResponse> localVarResponse = ProductionMeterReadingsWithHttpInfo(userId, systemId, endAt);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the last known \&quot;odometer\&quot; reading of each revenue-grade production meter on the system as of the requested time.  This endpoint includes entries for every production meter on the requested system, regardless of whether the meter is currently in service or retired. &#x60;read_at&#x60; is the time at which the reading was taken, and is always less than or equal to the requested &#x60;end_at&#x60;. Commonly, the reading will be within 30 minutes of the requested &#x60;end_at&#x60;; however, larger deltas can occur and do not necessarily mean there is a problem with the meter or the system it is on. Systems that are configured to report infrequently can show large deltas on all meters, especially when &#x60;end_at&#x60; is close to the current time. Meters that have been retired from a system will show an &#x60;end_at&#x60; that doesn&#39;t change, and that eventually is far away from the current time.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="endAt"> (optional)</param>
        /// <returns>ApiResponse of ProductionMeterReadingsResponse</returns>
        public EnphaseOpenAPI.Enlighten.Client.ApiResponse<ProductionMeterReadingsResponse> ProductionMeterReadingsWithHttpInfo(string userId, int systemId, long? endAt = default(long?))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->ProductionMeterReadings");

            EnphaseOpenAPI.Enlighten.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Enlighten.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            if (endAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "end_at", endAt));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProductionMeterReadingsResponse>("/systems/{system_id}/production_meter_readings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductionMeterReadings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the last known \&quot;odometer\&quot; reading of each revenue-grade production meter on the system as of the requested time.  This endpoint includes entries for every production meter on the requested system, regardless of whether the meter is currently in service or retired. &#x60;read_at&#x60; is the time at which the reading was taken, and is always less than or equal to the requested &#x60;end_at&#x60;. Commonly, the reading will be within 30 minutes of the requested &#x60;end_at&#x60;; however, larger deltas can occur and do not necessarily mean there is a problem with the meter or the system it is on. Systems that are configured to report infrequently can show large deltas on all meters, especially when &#x60;end_at&#x60; is close to the current time. Meters that have been retired from a system will show an &#x60;end_at&#x60; that doesn&#39;t change, and that eventually is far away from the current time.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="endAt"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductionMeterReadingsResponse</returns>
        public async System.Threading.Tasks.Task<ProductionMeterReadingsResponse> ProductionMeterReadingsAsync(string userId, int systemId, long? endAt = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Enlighten.Client.ApiResponse<ProductionMeterReadingsResponse> localVarResponse = await ProductionMeterReadingsWithHttpInfoAsync(userId, systemId, endAt, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the last known \&quot;odometer\&quot; reading of each revenue-grade production meter on the system as of the requested time.  This endpoint includes entries for every production meter on the requested system, regardless of whether the meter is currently in service or retired. &#x60;read_at&#x60; is the time at which the reading was taken, and is always less than or equal to the requested &#x60;end_at&#x60;. Commonly, the reading will be within 30 minutes of the requested &#x60;end_at&#x60;; however, larger deltas can occur and do not necessarily mean there is a problem with the meter or the system it is on. Systems that are configured to report infrequently can show large deltas on all meters, especially when &#x60;end_at&#x60; is close to the current time. Meters that have been retired from a system will show an &#x60;end_at&#x60; that doesn&#39;t change, and that eventually is far away from the current time.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="endAt"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductionMeterReadingsResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Enlighten.Client.ApiResponse<ProductionMeterReadingsResponse>> ProductionMeterReadingsWithHttpInfoAsync(string userId, int systemId, long? endAt = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->ProductionMeterReadings");


            EnphaseOpenAPI.Enlighten.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Enlighten.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            if (endAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "end_at", endAt));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ProductionMeterReadingsResponse>("/systems/{system_id}/production_meter_readings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProductionMeterReadings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns performance statistics as measured by the revenue-grade meters installed on the specified system. If the total duration requested is more than one month, returns one month of intervals. Intervals are 15 minutes in length and start at the top of the hour.  Requests for times that do not fall on the 15-minute marks are rounded down. For example, a request for 08:01, 08:08, 08:11, or 08:14 is treated as a request for 08:00. Intervals are listed by their end dates; therefore, the first interval returned is 15 minutes after the requested start date.  If the system doesn&#39;t have any revenue-grade meters installed, the response includes an empty intervals array.  Under some conditions, data for a given period may be temporarily unavailable.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startAt">Start of period to report on in Unix epoch time. If no start is specified, the assumed start is midnight today, in the timezone of the system. If the start is earlier than one year ago, the response includes an empty intervals list. If the start is earlier than the system&#39;s &#x60;operational_date&#x60;, the response data begins with the first interval of the &#x60;operational_date&#x60;. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, defaults to the time of the request. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <returns>RgmStatsResponse</returns>
        public RgmStatsResponse RgmStats(string userId, int systemId, long? startAt = default(long?), long? endAt = default(long?))
        {
            EnphaseOpenAPI.Enlighten.Client.ApiResponse<RgmStatsResponse> localVarResponse = RgmStatsWithHttpInfo(userId, systemId, startAt, endAt);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns performance statistics as measured by the revenue-grade meters installed on the specified system. If the total duration requested is more than one month, returns one month of intervals. Intervals are 15 minutes in length and start at the top of the hour.  Requests for times that do not fall on the 15-minute marks are rounded down. For example, a request for 08:01, 08:08, 08:11, or 08:14 is treated as a request for 08:00. Intervals are listed by their end dates; therefore, the first interval returned is 15 minutes after the requested start date.  If the system doesn&#39;t have any revenue-grade meters installed, the response includes an empty intervals array.  Under some conditions, data for a given period may be temporarily unavailable.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startAt">Start of period to report on in Unix epoch time. If no start is specified, the assumed start is midnight today, in the timezone of the system. If the start is earlier than one year ago, the response includes an empty intervals list. If the start is earlier than the system&#39;s &#x60;operational_date&#x60;, the response data begins with the first interval of the &#x60;operational_date&#x60;. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, defaults to the time of the request. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <returns>ApiResponse of RgmStatsResponse</returns>
        public EnphaseOpenAPI.Enlighten.Client.ApiResponse<RgmStatsResponse> RgmStatsWithHttpInfo(string userId, int systemId, long? startAt = default(long?), long? endAt = default(long?))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->RgmStats");

            EnphaseOpenAPI.Enlighten.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Enlighten.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            if (startAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "start_at", startAt));
            }
            if (endAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "end_at", endAt));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RgmStatsResponse>("/systems/{system_id}/rgm_stats", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RgmStats", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns performance statistics as measured by the revenue-grade meters installed on the specified system. If the total duration requested is more than one month, returns one month of intervals. Intervals are 15 minutes in length and start at the top of the hour.  Requests for times that do not fall on the 15-minute marks are rounded down. For example, a request for 08:01, 08:08, 08:11, or 08:14 is treated as a request for 08:00. Intervals are listed by their end dates; therefore, the first interval returned is 15 minutes after the requested start date.  If the system doesn&#39;t have any revenue-grade meters installed, the response includes an empty intervals array.  Under some conditions, data for a given period may be temporarily unavailable.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startAt">Start of period to report on in Unix epoch time. If no start is specified, the assumed start is midnight today, in the timezone of the system. If the start is earlier than one year ago, the response includes an empty intervals list. If the start is earlier than the system&#39;s &#x60;operational_date&#x60;, the response data begins with the first interval of the &#x60;operational_date&#x60;. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, defaults to the time of the request. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RgmStatsResponse</returns>
        public async System.Threading.Tasks.Task<RgmStatsResponse> RgmStatsAsync(string userId, int systemId, long? startAt = default(long?), long? endAt = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Enlighten.Client.ApiResponse<RgmStatsResponse> localVarResponse = await RgmStatsWithHttpInfoAsync(userId, systemId, startAt, endAt, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns performance statistics as measured by the revenue-grade meters installed on the specified system. If the total duration requested is more than one month, returns one month of intervals. Intervals are 15 minutes in length and start at the top of the hour.  Requests for times that do not fall on the 15-minute marks are rounded down. For example, a request for 08:01, 08:08, 08:11, or 08:14 is treated as a request for 08:00. Intervals are listed by their end dates; therefore, the first interval returned is 15 minutes after the requested start date.  If the system doesn&#39;t have any revenue-grade meters installed, the response includes an empty intervals array.  Under some conditions, data for a given period may be temporarily unavailable.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startAt">Start of period to report on in Unix epoch time. If no start is specified, the assumed start is midnight today, in the timezone of the system. If the start is earlier than one year ago, the response includes an empty intervals list. If the start is earlier than the system&#39;s &#x60;operational_date&#x60;, the response data begins with the first interval of the &#x60;operational_date&#x60;. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, defaults to the time of the request. If the end is later than the last reported interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RgmStatsResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Enlighten.Client.ApiResponse<RgmStatsResponse>> RgmStatsWithHttpInfoAsync(string userId, int systemId, long? startAt = default(long?), long? endAt = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->RgmStats");


            EnphaseOpenAPI.Enlighten.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Enlighten.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            if (startAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "start_at", startAt));
            }
            if (endAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "end_at", endAt));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RgmStatsResponse>("/systems/{system_id}/rgm_stats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RgmStats", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get system ID by envoy serial number.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="serialNum">Serial number of the envoy.</param>
        /// <returns>SearchSystemIdResponse</returns>
        public SearchSystemIdResponse SearchSystemId(string userId, string serialNum)
        {
            EnphaseOpenAPI.Enlighten.Client.ApiResponse<SearchSystemIdResponse> localVarResponse = SearchSystemIdWithHttpInfo(userId, serialNum);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get system ID by envoy serial number.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="serialNum">Serial number of the envoy.</param>
        /// <returns>ApiResponse of SearchSystemIdResponse</returns>
        public EnphaseOpenAPI.Enlighten.Client.ApiResponse<SearchSystemIdResponse> SearchSystemIdWithHttpInfo(string userId, string serialNum)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->SearchSystemId");

            // verify the required parameter 'serialNum' is set
            if (serialNum == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'serialNum' when calling DefaultApi->SearchSystemId");

            EnphaseOpenAPI.Enlighten.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Enlighten.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "serial_num", serialNum));

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchSystemIdResponse>("/systems/search_system_id", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchSystemId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get system ID by envoy serial number.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="serialNum">Serial number of the envoy.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchSystemIdResponse</returns>
        public async System.Threading.Tasks.Task<SearchSystemIdResponse> SearchSystemIdAsync(string userId, string serialNum, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Enlighten.Client.ApiResponse<SearchSystemIdResponse> localVarResponse = await SearchSystemIdWithHttpInfoAsync(userId, serialNum, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get system ID by envoy serial number.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="serialNum">Serial number of the envoy.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchSystemIdResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Enlighten.Client.ApiResponse<SearchSystemIdResponse>> SearchSystemIdWithHttpInfoAsync(string userId, string serialNum, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->SearchSystemId");

            // verify the required parameter 'serialNum' is set
            if (serialNum == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'serialNum' when calling DefaultApi->SearchSystemId");


            EnphaseOpenAPI.Enlighten.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Enlighten.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "serial_num", serialNum));

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchSystemIdResponse>("/systems/search_system_id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchSystemId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns performance statistics for the specified system as reported by microinverters installed on the system. If the total duration requested is more than one day, returns one day of intervals. Intervals are 5 minutes in length and start at the top of the hour.  Requests for times that do not fall on the 5-minute marks are rounded down. For example, a request for 08:01, 08:02, 08:03, or 08:04 is treated as a request for 08:00. Intervals are listed by their end dates; therefore, the first interval returned is 5 minutes after the requested start date.  The response includes intervals that have been reported for the requested period. Gaps in reporting are not filled with 0-value intervals. The dark hours on a system are an example of such a gap, because the microinverters do not produce at night.  Sometimes a request cannot be processed because the requested dates are invalid for the the system in question. Examples include asking for stats starting at a time that is later than the system&#39;s last reported interval, or asking for stats before a system has started production. In cases such as these, the response code is &#x60;422&#x60; and the response body includes an error reason as well as the parameters used to process the request.  If the system doesn&#39;t have any microinverters installed, the response includes an empty intervals array. Under some conditions, data for a given period may be temporarily unavailable.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startAt">Start of reporting period in Unix epoch time. If no start is specified, defaults to midnight today, in the timezone of the system. If the start date is earlier than one year ago today, the response includes an empty intervals list. If the start is earlier than the system&#39;s &#x60;operational_date&#x60;, the response data begins with the &#x60;operational_date&#x60;. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, the assumed end is now. If the end is later than the last reporting interval the response data ends with the last reported interval. (optional)</param>
        /// <returns>StatsResponse</returns>
        public StatsResponse Stats(string userId, int systemId, long? startAt = default(long?), long? endAt = default(long?))
        {
            EnphaseOpenAPI.Enlighten.Client.ApiResponse<StatsResponse> localVarResponse = StatsWithHttpInfo(userId, systemId, startAt, endAt);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns performance statistics for the specified system as reported by microinverters installed on the system. If the total duration requested is more than one day, returns one day of intervals. Intervals are 5 minutes in length and start at the top of the hour.  Requests for times that do not fall on the 5-minute marks are rounded down. For example, a request for 08:01, 08:02, 08:03, or 08:04 is treated as a request for 08:00. Intervals are listed by their end dates; therefore, the first interval returned is 5 minutes after the requested start date.  The response includes intervals that have been reported for the requested period. Gaps in reporting are not filled with 0-value intervals. The dark hours on a system are an example of such a gap, because the microinverters do not produce at night.  Sometimes a request cannot be processed because the requested dates are invalid for the the system in question. Examples include asking for stats starting at a time that is later than the system&#39;s last reported interval, or asking for stats before a system has started production. In cases such as these, the response code is &#x60;422&#x60; and the response body includes an error reason as well as the parameters used to process the request.  If the system doesn&#39;t have any microinverters installed, the response includes an empty intervals array. Under some conditions, data for a given period may be temporarily unavailable.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startAt">Start of reporting period in Unix epoch time. If no start is specified, defaults to midnight today, in the timezone of the system. If the start date is earlier than one year ago today, the response includes an empty intervals list. If the start is earlier than the system&#39;s &#x60;operational_date&#x60;, the response data begins with the &#x60;operational_date&#x60;. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, the assumed end is now. If the end is later than the last reporting interval the response data ends with the last reported interval. (optional)</param>
        /// <returns>ApiResponse of StatsResponse</returns>
        public EnphaseOpenAPI.Enlighten.Client.ApiResponse<StatsResponse> StatsWithHttpInfo(string userId, int systemId, long? startAt = default(long?), long? endAt = default(long?))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->Stats");

            EnphaseOpenAPI.Enlighten.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Enlighten.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            if (startAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "start_at", startAt));
            }
            if (endAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "end_at", endAt));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<StatsResponse>("/systems/{system_id}/stats", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Stats", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns performance statistics for the specified system as reported by microinverters installed on the system. If the total duration requested is more than one day, returns one day of intervals. Intervals are 5 minutes in length and start at the top of the hour.  Requests for times that do not fall on the 5-minute marks are rounded down. For example, a request for 08:01, 08:02, 08:03, or 08:04 is treated as a request for 08:00. Intervals are listed by their end dates; therefore, the first interval returned is 5 minutes after the requested start date.  The response includes intervals that have been reported for the requested period. Gaps in reporting are not filled with 0-value intervals. The dark hours on a system are an example of such a gap, because the microinverters do not produce at night.  Sometimes a request cannot be processed because the requested dates are invalid for the the system in question. Examples include asking for stats starting at a time that is later than the system&#39;s last reported interval, or asking for stats before a system has started production. In cases such as these, the response code is &#x60;422&#x60; and the response body includes an error reason as well as the parameters used to process the request.  If the system doesn&#39;t have any microinverters installed, the response includes an empty intervals array. Under some conditions, data for a given period may be temporarily unavailable.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startAt">Start of reporting period in Unix epoch time. If no start is specified, defaults to midnight today, in the timezone of the system. If the start date is earlier than one year ago today, the response includes an empty intervals list. If the start is earlier than the system&#39;s &#x60;operational_date&#x60;, the response data begins with the &#x60;operational_date&#x60;. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, the assumed end is now. If the end is later than the last reporting interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatsResponse</returns>
        public async System.Threading.Tasks.Task<StatsResponse> StatsAsync(string userId, int systemId, long? startAt = default(long?), long? endAt = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Enlighten.Client.ApiResponse<StatsResponse> localVarResponse = await StatsWithHttpInfoAsync(userId, systemId, startAt, endAt, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns performance statistics for the specified system as reported by microinverters installed on the system. If the total duration requested is more than one day, returns one day of intervals. Intervals are 5 minutes in length and start at the top of the hour.  Requests for times that do not fall on the 5-minute marks are rounded down. For example, a request for 08:01, 08:02, 08:03, or 08:04 is treated as a request for 08:00. Intervals are listed by their end dates; therefore, the first interval returned is 5 minutes after the requested start date.  The response includes intervals that have been reported for the requested period. Gaps in reporting are not filled with 0-value intervals. The dark hours on a system are an example of such a gap, because the microinverters do not produce at night.  Sometimes a request cannot be processed because the requested dates are invalid for the the system in question. Examples include asking for stats starting at a time that is later than the system&#39;s last reported interval, or asking for stats before a system has started production. In cases such as these, the response code is &#x60;422&#x60; and the response body includes an error reason as well as the parameters used to process the request.  If the system doesn&#39;t have any microinverters installed, the response includes an empty intervals array. Under some conditions, data for a given period may be temporarily unavailable.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="startAt">Start of reporting period in Unix epoch time. If no start is specified, defaults to midnight today, in the timezone of the system. If the start date is earlier than one year ago today, the response includes an empty intervals list. If the start is earlier than the system&#39;s &#x60;operational_date&#x60;, the response data begins with the &#x60;operational_date&#x60;. (optional)</param>
        /// <param name="endAt">End of reporting period in Unix epoch time. If no end is specified, the assumed end is now. If the end is later than the last reporting interval the response data ends with the last reported interval. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatsResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Enlighten.Client.ApiResponse<StatsResponse>> StatsWithHttpInfoAsync(string userId, int systemId, long? startAt = default(long?), long? endAt = default(long?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->Stats");


            EnphaseOpenAPI.Enlighten.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Enlighten.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            if (startAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "start_at", startAt));
            }
            if (endAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "end_at", endAt));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<StatsResponse>("/systems/{system_id}/stats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Stats", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns summary information for the specified system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="summaryDate">Start of reporting period. If no &#x60;summary_date&#x60; is provided, the start is the current day at midnight site-local time. Otherwise, the start is midnight site-local time of the requested day. If the requested date cannot be parsed or is in the future, the response includes an informative error message and &#x60;422&#x60; status. (optional)</param>
        /// <returns>SummaryResponse</returns>
        public SummaryResponse Summary(string userId, int systemId, DateTime? summaryDate = default(DateTime?))
        {
            EnphaseOpenAPI.Enlighten.Client.ApiResponse<SummaryResponse> localVarResponse = SummaryWithHttpInfo(userId, systemId, summaryDate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns summary information for the specified system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="summaryDate">Start of reporting period. If no &#x60;summary_date&#x60; is provided, the start is the current day at midnight site-local time. Otherwise, the start is midnight site-local time of the requested day. If the requested date cannot be parsed or is in the future, the response includes an informative error message and &#x60;422&#x60; status. (optional)</param>
        /// <returns>ApiResponse of SummaryResponse</returns>
        public EnphaseOpenAPI.Enlighten.Client.ApiResponse<SummaryResponse> SummaryWithHttpInfo(string userId, int systemId, DateTime? summaryDate = default(DateTime?))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->Summary");

            EnphaseOpenAPI.Enlighten.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Enlighten.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            if (summaryDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "summary_date", summaryDate));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SummaryResponse>("/systems/{system_id}/summary", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Summary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns summary information for the specified system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="summaryDate">Start of reporting period. If no &#x60;summary_date&#x60; is provided, the start is the current day at midnight site-local time. Otherwise, the start is midnight site-local time of the requested day. If the requested date cannot be parsed or is in the future, the response includes an informative error message and &#x60;422&#x60; status. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SummaryResponse</returns>
        public async System.Threading.Tasks.Task<SummaryResponse> SummaryAsync(string userId, int systemId, DateTime? summaryDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Enlighten.Client.ApiResponse<SummaryResponse> localVarResponse = await SummaryWithHttpInfoAsync(userId, systemId, summaryDate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns summary information for the specified system.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="systemId"></param>
        /// <param name="summaryDate">Start of reporting period. If no &#x60;summary_date&#x60; is provided, the start is the current day at midnight site-local time. Otherwise, the start is midnight site-local time of the requested day. If the requested date cannot be parsed or is in the future, the response includes an informative error message and &#x60;422&#x60; status. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SummaryResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Enlighten.Client.ApiResponse<SummaryResponse>> SummaryWithHttpInfoAsync(string userId, int systemId, DateTime? summaryDate = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->Summary");


            EnphaseOpenAPI.Enlighten.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Enlighten.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("system_id", EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToString(systemId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            if (summaryDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "summary_date", summaryDate));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SummaryResponse>("/systems/{system_id}/summary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Summary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of systems for which the user can make API requests. There is a limit to the number of systems that can be returned at one time. If the first request does not return a full list, use the &#x60;next&#x60; attribute in the response body to request the next page of systems. By default, systems are returned in batches of 100. The maximum page size is 1000.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="next"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="systemId"> (optional)</param>
        /// <param name="systemId2"> (optional)</param>
        /// <param name="systemName"> (optional)</param>
        /// <param name="systemName2"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="status2"> (optional)</param>
        /// <param name="reference"> (optional)</param>
        /// <param name="reference2"> (optional)</param>
        /// <param name="installer"> (optional)</param>
        /// <param name="installer2"> (optional)</param>
        /// <param name="connectionType"> (optional)</param>
        /// <param name="connectionType2"> (optional)</param>
        /// <returns>SystemsResponse</returns>
        public SystemsResponse Systems(string userId, string next = default(string), int? limit = default(int?), int? systemId = default(int?), List<int> systemId2 = default(List<int>), string systemName = default(string), List<string> systemName2 = default(List<string>), Status? status = default(Status?), List<Status> status2 = default(List<Status>), string reference = default(string), List<string> reference2 = default(List<string>), string installer = default(string), List<string> installer2 = default(List<string>), ConnectionType? connectionType = default(ConnectionType?), List<ConnectionType> connectionType2 = default(List<ConnectionType>))
        {
            EnphaseOpenAPI.Enlighten.Client.ApiResponse<SystemsResponse> localVarResponse = SystemsWithHttpInfo(userId, next, limit, systemId, systemId2, systemName, systemName2, status, status2, reference, reference2, installer, installer2, connectionType, connectionType2);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of systems for which the user can make API requests. There is a limit to the number of systems that can be returned at one time. If the first request does not return a full list, use the &#x60;next&#x60; attribute in the response body to request the next page of systems. By default, systems are returned in batches of 100. The maximum page size is 1000.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="next"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="systemId"> (optional)</param>
        /// <param name="systemId2"> (optional)</param>
        /// <param name="systemName"> (optional)</param>
        /// <param name="systemName2"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="status2"> (optional)</param>
        /// <param name="reference"> (optional)</param>
        /// <param name="reference2"> (optional)</param>
        /// <param name="installer"> (optional)</param>
        /// <param name="installer2"> (optional)</param>
        /// <param name="connectionType"> (optional)</param>
        /// <param name="connectionType2"> (optional)</param>
        /// <returns>ApiResponse of SystemsResponse</returns>
        public EnphaseOpenAPI.Enlighten.Client.ApiResponse<SystemsResponse> SystemsWithHttpInfo(string userId, string next = default(string), int? limit = default(int?), int? systemId = default(int?), List<int> systemId2 = default(List<int>), string systemName = default(string), List<string> systemName2 = default(List<string>), Status? status = default(Status?), List<Status> status2 = default(List<Status>), string reference = default(string), List<string> reference2 = default(List<string>), string installer = default(string), List<string> installer2 = default(List<string>), ConnectionType? connectionType = default(ConnectionType?), List<ConnectionType> connectionType2 = default(List<ConnectionType>))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->Systems");

            EnphaseOpenAPI.Enlighten.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Enlighten.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            if (next != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "next", next));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (systemId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "system_id", systemId));
            }
            if (systemId2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("multi", "system_id[]", systemId2));
            }
            if (systemName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "system_name", systemName));
            }
            if (systemName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("multi", "system_name[]", systemName2));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (status2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("multi", "status[]", status2));
            }
            if (reference != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "reference", reference));
            }
            if (reference2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("multi", "reference[]", reference2));
            }
            if (installer != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "installer", installer));
            }
            if (installer2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("multi", "installer[]", installer2));
            }
            if (connectionType != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "connection_type", connectionType));
            }
            if (connectionType2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("multi", "connection_type[]", connectionType2));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SystemsResponse>("/systems", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Systems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of systems for which the user can make API requests. There is a limit to the number of systems that can be returned at one time. If the first request does not return a full list, use the &#x60;next&#x60; attribute in the response body to request the next page of systems. By default, systems are returned in batches of 100. The maximum page size is 1000.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="next"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="systemId"> (optional)</param>
        /// <param name="systemId2"> (optional)</param>
        /// <param name="systemName"> (optional)</param>
        /// <param name="systemName2"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="status2"> (optional)</param>
        /// <param name="reference"> (optional)</param>
        /// <param name="reference2"> (optional)</param>
        /// <param name="installer"> (optional)</param>
        /// <param name="installer2"> (optional)</param>
        /// <param name="connectionType"> (optional)</param>
        /// <param name="connectionType2"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SystemsResponse</returns>
        public async System.Threading.Tasks.Task<SystemsResponse> SystemsAsync(string userId, string next = default(string), int? limit = default(int?), int? systemId = default(int?), List<int> systemId2 = default(List<int>), string systemName = default(string), List<string> systemName2 = default(List<string>), Status? status = default(Status?), List<Status> status2 = default(List<Status>), string reference = default(string), List<string> reference2 = default(List<string>), string installer = default(string), List<string> installer2 = default(List<string>), ConnectionType? connectionType = default(ConnectionType?), List<ConnectionType> connectionType2 = default(List<ConnectionType>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnphaseOpenAPI.Enlighten.Client.ApiResponse<SystemsResponse> localVarResponse = await SystemsWithHttpInfoAsync(userId, next, limit, systemId, systemId2, systemName, systemName2, status, status2, reference, reference2, installer, installer2, connectionType, connectionType2, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of systems for which the user can make API requests. There is a limit to the number of systems that can be returned at one time. If the first request does not return a full list, use the &#x60;next&#x60; attribute in the response body to request the next page of systems. By default, systems are returned in batches of 100. The maximum page size is 1000.
        /// </summary>
        /// <exception cref="EnphaseOpenAPI.Enlighten.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="next"> (optional)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="systemId"> (optional)</param>
        /// <param name="systemId2"> (optional)</param>
        /// <param name="systemName"> (optional)</param>
        /// <param name="systemName2"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="status2"> (optional)</param>
        /// <param name="reference"> (optional)</param>
        /// <param name="reference2"> (optional)</param>
        /// <param name="installer"> (optional)</param>
        /// <param name="installer2"> (optional)</param>
        /// <param name="connectionType"> (optional)</param>
        /// <param name="connectionType2"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SystemsResponse)</returns>
        public async System.Threading.Tasks.Task<EnphaseOpenAPI.Enlighten.Client.ApiResponse<SystemsResponse>> SystemsWithHttpInfoAsync(string userId, string next = default(string), int? limit = default(int?), int? systemId = default(int?), List<int> systemId2 = default(List<int>), string systemName = default(string), List<string> systemName2 = default(List<string>), Status? status = default(Status?), List<Status> status2 = default(List<Status>), string reference = default(string), List<string> reference2 = default(List<string>), string installer = default(string), List<string> installer2 = default(List<string>), ConnectionType? connectionType = default(ConnectionType?), List<ConnectionType> connectionType2 = default(List<ConnectionType>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new EnphaseOpenAPI.Enlighten.Client.ApiException(400, "Missing required parameter 'userId' when calling DefaultApi->Systems");


            EnphaseOpenAPI.Enlighten.Client.RequestOptions localVarRequestOptions = new EnphaseOpenAPI.Enlighten.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = EnphaseOpenAPI.Enlighten.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            if (next != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "next", next));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (systemId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "system_id", systemId));
            }
            if (systemId2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("multi", "system_id[]", systemId2));
            }
            if (systemName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "system_name", systemName));
            }
            if (systemName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("multi", "system_name[]", systemName2));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (status2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("multi", "status[]", status2));
            }
            if (reference != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "reference", reference));
            }
            if (reference2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("multi", "reference[]", reference2));
            }
            if (installer != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "installer", installer));
            }
            if (installer2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("multi", "installer[]", installer2));
            }
            if (connectionType != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "connection_type", connectionType));
            }
            if (connectionType2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("multi", "connection_type[]", connectionType2));
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarRequestOptions.QueryParameters.Add(EnphaseOpenAPI.Enlighten.Client.ClientUtils.ParameterToMultiMap("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SystemsResponse>("/systems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Systems", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
